syntax = "proto3";

package api; // Keep package name as 'api'

// Use 'api' alias for Go package for compatibility with existing code
option go_package = "github.com/dexidp/dex/api/v2;api";
option java_package = "com.coreos.dex.api";

// Import standard types
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto"; // Needed for Delete response potentially

// -------------------------------------------------------------
// Existing Dex Messages (Clients, Passwords, Connectors, etc.)
// (Copied from your input - assumed correct)
// -------------------------------------------------------------

// Client represents an OAuth2 client.
message Client {
  string id = 1;
  string secret = 2;
  repeated string redirect_uris = 3;
  repeated string trusted_peers = 4;
  bool public = 5;
  string name = 6;
  string logo_url = 7;
}

// GetClientReq is a request to retrieve client details.
message GetClientReq {
  string id = 1;
}

// GetClientResp returns the client details.
message GetClientResp {
  Client client = 1;
}

// CreateClientReq is a request to make a client.
message CreateClientReq {
  Client client = 1;
}

// CreateClientResp returns the response from creating a client.
message CreateClientResp {
  bool already_exists = 1;
  Client client = 2;
}

// DeleteClientReq is a request to delete a client.
message DeleteClientReq {
  string id = 1;
}

// DeleteClientResp determines if the client is deleted successfully.
message DeleteClientResp {
  bool not_found = 1;
}

// UpdateClientReq is a request to update an existing client.
message UpdateClientReq {
    string id = 1;
    repeated string redirect_uris = 2;
    repeated string trusted_peers = 3;
    string name = 4;
    string logo_url = 5;
}

// UpdateClientResp returns the response from updating a client.
message UpdateClientResp {
    bool not_found = 1;
}

// Password is an email for password mapping managed by the storage.
message Password {
  string email = 1;
  bytes hash = 2;
  string username = 3;
  string user_id = 4;
}

// CreatePasswordReq is a request to make a password.
message CreatePasswordReq {
  Password password = 1;
}

// CreatePasswordResp returns the response from creating a password.
message CreatePasswordResp {
  bool already_exists = 1;
}

// UpdatePasswordReq is a request to modify an existing password.
message UpdatePasswordReq {
  string email = 1;
  bytes new_hash = 2;
  string new_username = 3;
}

// UpdatePasswordResp returns the response from modifying an existing password.
message UpdatePasswordResp {
  bool not_found = 1;
}

// DeletePasswordReq is a request to delete a password.
message DeletePasswordReq {
  string email = 1;
}

// DeletePasswordResp returns the response from deleting a password.
message DeletePasswordResp {
  bool not_found = 1;
}

// ListPasswordReq is a request to enumerate passwords.
message ListPasswordReq {}

// ListPasswordResp returns a list of passwords.
message ListPasswordResp {
  repeated Password passwords = 1;
}

// Connector is a strategy used by Dex for authenticating a user against another identity provider
message Connector {
  string id = 1;
  string type = 2;
  string name = 3;
  bytes config = 4;
}

// CreateConnectorReq is a request to make a connector.
message CreateConnectorReq {
  Connector connector = 1;
}

// CreateConnectorResp returns the response from creating a connector.
message CreateConnectorResp {
  bool already_exists = 1;
}

// UpdateConnectorReq is a request to modify an existing connector.
message UpdateConnectorReq {
  string id = 1;
  string new_type = 2;
  string new_name = 3;
  bytes new_config = 4;
}

// UpdateConnectorResp returns the response from modifying an existing connector.
message UpdateConnectorResp {
  bool not_found = 1;
}

// DeleteConnectorReq is a request to delete a connector.
message DeleteConnectorReq {
  string id = 1;
}

// DeleteConnectorResp returns the response from deleting a connector.
message DeleteConnectorResp {
  bool not_found = 1;
}

// ListConnectorReq is a request to enumerate connectors.
message ListConnectorReq {}

// ListConnectorResp returns a list of connectors.
message ListConnectorResp {
  repeated Connector connectors = 1;
}

// VersionReq is a request to fetch version info.
message VersionReq {}

// VersionResp holds the version info of components.
message VersionResp {
  string server = 1;
  int32 api = 2;
}

// DiscoveryReq is a request to fetch discover information.
message DiscoveryReq {}

//DiscoverResp holds the version oidc disovery info.
message DiscoveryResp {
  string issuer = 1;
  string authorization_endpoint = 2;
  string token_endpoint = 3;
  string jwks_uri = 4;
  string userinfo_endpoint = 5;
  string device_authorization_endpoint = 6;
  string introspection_endpoint = 7;
  repeated string grant_types_supported = 8;
  repeated string response_types_supported = 9;
  repeated string subject_types_supported = 10;
  repeated string id_token_signing_alg_values_supported = 11;
  repeated string code_challenge_methods_supported = 12;
  repeated string scopes_supported = 13;
  repeated string token_endpoint_auth_methods_supported = 14;
  repeated string claims_supported = 15;
}

// RefreshTokenRef contains the metadata for a refresh token that is managed by the storage.
message RefreshTokenRef {
  string id = 1;
  string client_id = 2;
  int64 created_at = 5; // Consider changing to google.protobuf.Timestamp if appropriate elsewhere
  int64 last_used = 6;  // Consider changing to google.protobuf.Timestamp
}

// ListRefreshReq is a request to enumerate the refresh tokens of a user.
message ListRefreshReq {
  string user_id = 1;
}

// ListRefreshResp returns a list of refresh tokens for a user.
message ListRefreshResp {
  repeated RefreshTokenRef refresh_tokens = 1;
}

// RevokeRefreshReq is a request to revoke the refresh token of the user-client pair.
message RevokeRefreshReq {
  string user_id = 1;
  string client_id = 2;
}

// RevokeRefreshResp determines if the refresh token is revoked successfully.
message RevokeRefreshResp {
  bool not_found = 1;
}

message VerifyPasswordReq {
  string email = 1;
  string password = 2;
}

message VerifyPasswordResp {
  bool verified = 1;
  bool not_found = 2;
}

// -------------------------------------------------------------
// PlatformUser Messages and Service Definitions
// (Updated section)
// -------------------------------------------------------------

// PlatformUser message - mirrors the Ent schema PlatformUser entity.
message PlatformUser {
  string id = 1; // String ID for gRPC API consistency
  string email = 2;
  google.protobuf.StringValue display_name = 3; // Optional
  bool is_active = 4;
  google.protobuf.Timestamp create_time = 5; // Corresponds to Ent CreateTime
  google.protobuf.Timestamp update_time = 6; // Corresponds to Ent UpdateTime
  google.protobuf.Timestamp last_login = 7;  // Optional (nullable time)
  // Note: first_connector_id and first_federated_user_id removed from proto
}

// --- Create messages --- (Using consistent naming)
message CreatePlatformUserRequest {
  string email = 1; // Required
  google.protobuf.StringValue display_name = 2; // Optional
}
message CreatePlatformUserResponse {
  PlatformUser platform_user = 1; // Contains the created PlatformUser
}

// --- Get messages --- (Using consistent naming)
message GetPlatformUserRequest {
  string id = 1; // ID of the user to retrieve (required)
}
message GetPlatformUserResponse {
  PlatformUser platform_user = 1; // Contains the retrieved PlatformUser
}

// --- List messages --- (Using consistent naming)
message ListPlatformUsersRequest {
  // The maximum number of users to return. Defaults server-side if 0. Max limit may apply.
  int32 page_size = 1;
  // Token from previous response to get the next page. Empty for first page.
  string page_token = 2;
  // Optional filter: only return users with this active status.
  google.protobuf.BoolValue filter_is_active = 3;
  // Optional filter: only return users whose email contains this substring (case-insensitive).
  string filter_email_contains = 4;
}
message ListPlatformUsersResponse {
  // The list of platform users for the current page.
  repeated PlatformUser users = 1;
  // Token to retrieve the next page. Empty if no more pages.
  string next_page_token = 2;
  // Total number of users matching the filter criteria, disregarding pagination.
  int32 total_size = 3;
  // Total number of pages available based on the effective page size used by the server.
  int32 total_pages = 4;
}

// --- Update messages --- (Using consistent naming)
message UpdatePlatformUserRequest {
  string id = 1; // ID of the user to update (required)
  // Use wrappers for optional fields to indicate presence for update
  google.protobuf.StringValue display_name = 2;
  google.protobuf.BoolValue is_active = 3;
}
message UpdatePlatformUserResponse {
  PlatformUser platform_user = 1; // Contains the updated PlatformUser
}

// --- Delete messages --- (Using consistent naming)
message DeletePlatformUserRequest {
  string id = 1; // ID of the user to delete (required)
}
message DeletePlatformUserResponse {
  // Standard practice is to return Empty for successful deletes.
  google.protobuf.Empty placeholder = 1;
}

// -------------------------------------------------------------
// Service Definitions
// -------------------------------------------------------------

// Dex represents the main dex gRPC service.
// (Copied from your input - assumed correct)
service Dex {
  rpc GetClient(GetClientReq) returns (GetClientResp) {};
  rpc CreateClient(CreateClientReq) returns (CreateClientResp) {};
  rpc UpdateClient(UpdateClientReq) returns (UpdateClientResp) {};
  rpc DeleteClient(DeleteClientReq) returns (DeleteClientResp) {};
  rpc CreatePassword(CreatePasswordReq) returns (CreatePasswordResp) {};
  rpc UpdatePassword(UpdatePasswordReq) returns (UpdatePasswordResp) {};
  rpc DeletePassword(DeletePasswordReq) returns (DeletePasswordResp) {};
  rpc ListPasswords(ListPasswordReq) returns (ListPasswordResp) {};
  rpc CreateConnector(CreateConnectorReq) returns (CreateConnectorResp) {};
  rpc UpdateConnector(UpdateConnectorReq) returns (UpdateConnectorResp) {};
  rpc DeleteConnector(DeleteConnectorReq) returns (DeleteConnectorResp) {};
  rpc ListConnectors(ListConnectorReq) returns (ListConnectorResp) {};
  rpc GetVersion(VersionReq) returns (VersionResp) {};
  rpc GetDiscovery(DiscoveryReq) returns (DiscoveryResp) {};
  rpc ListRefresh(ListRefreshReq) returns (ListRefreshResp) {};
  rpc RevokeRefresh(RevokeRefreshReq) returns (RevokeRefreshResp) {};
  rpc VerifyPassword(VerifyPasswordReq) returns (VerifyPasswordResp) {};
}

// NEW: PlatformUserService defines RPCs for managing platform users.
// (Updated with consistent message names and ListUsers)
service PlatformUserService {
  rpc CreateUser(CreatePlatformUserRequest) returns (CreatePlatformUserResponse);
  rpc GetUser(GetPlatformUserRequest) returns (GetPlatformUserResponse);
  rpc ListUsers(ListPlatformUsersRequest) returns (ListPlatformUsersResponse); // Added ListUsers
  rpc UpdateUser(UpdatePlatformUserRequest) returns (UpdatePlatformUserResponse);
  rpc DeleteUser(DeletePlatformUserRequest) returns (DeletePlatformUserResponse);
}

// TODO: Add service definitions and messages for PlatformAppRole, PlatformToken,
// PlatformFederatedIdentity, and the assignment operations later.