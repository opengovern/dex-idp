// Code generated by ent, DO NOT EDIT.

package platformapprole

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the platformapprole type in the database.
	Label = "platform_app_role"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// EdgeUserAssignments holds the string denoting the user_assignments edge name in mutations.
	EdgeUserAssignments = "user_assignments"
	// EdgeIdentityAssignments holds the string denoting the identity_assignments edge name in mutations.
	EdgeIdentityAssignments = "identity_assignments"
	// EdgeTokens holds the string denoting the tokens edge name in mutations.
	EdgeTokens = "tokens"
	// Table holds the table name of the platformapprole in the database.
	Table = "platform_app_roles"
	// UserAssignmentsTable is the table that holds the user_assignments relation/edge.
	UserAssignmentsTable = "platform_user_role_assignments"
	// UserAssignmentsInverseTable is the table name for the PlatformUserRoleAssignment entity.
	// It exists in this package in order to avoid circular dependency with the "platformuserroleassignment" package.
	UserAssignmentsInverseTable = "platform_user_role_assignments"
	// UserAssignmentsColumn is the table column denoting the user_assignments relation/edge.
	UserAssignmentsColumn = "platform_app_role_user_assignments"
	// IdentityAssignmentsTable is the table that holds the identity_assignments relation/edge.
	IdentityAssignmentsTable = "platform_identity_role_assignments"
	// IdentityAssignmentsInverseTable is the table name for the PlatformIdentityRoleAssignment entity.
	// It exists in this package in order to avoid circular dependency with the "platformidentityroleassignment" package.
	IdentityAssignmentsInverseTable = "platform_identity_role_assignments"
	// IdentityAssignmentsColumn is the table column denoting the identity_assignments relation/edge.
	IdentityAssignmentsColumn = "platform_app_role_identity_assignments"
	// TokensTable is the table that holds the tokens relation/edge.
	TokensTable = "platform_tokens"
	// TokensInverseTable is the table name for the PlatformToken entity.
	// It exists in this package in order to avoid circular dependency with the "platformtoken" package.
	TokensInverseTable = "platform_tokens"
	// TokensColumn is the table column denoting the tokens relation/edge.
	TokensColumn = "platform_app_role_tokens"
)

// Columns holds all SQL columns for platformapprole fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldAppID,
	FieldTitle,
	FieldDescription,
	FieldWeight,
	FieldIsActive,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// AppIDValidator is a validator for the "app_id" field. It is called by the builders before save.
	AppIDValidator func(string) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultWeight holds the default value on creation for the "weight" field.
	DefaultWeight int
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
)

// OrderOption defines the ordering options for the PlatformAppRole queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByUserAssignmentsCount orders the results by user_assignments count.
func ByUserAssignmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserAssignmentsStep(), opts...)
	}
}

// ByUserAssignments orders the results by user_assignments terms.
func ByUserAssignments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserAssignmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIdentityAssignmentsCount orders the results by identity_assignments count.
func ByIdentityAssignmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIdentityAssignmentsStep(), opts...)
	}
}

// ByIdentityAssignments orders the results by identity_assignments terms.
func ByIdentityAssignments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIdentityAssignmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTokensCount orders the results by tokens count.
func ByTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTokensStep(), opts...)
	}
}

// ByTokens orders the results by tokens terms.
func ByTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserAssignmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserAssignmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserAssignmentsTable, UserAssignmentsColumn),
	)
}
func newIdentityAssignmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IdentityAssignmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IdentityAssignmentsTable, IdentityAssignmentsColumn),
	)
}
func newTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TokensTable, TokensColumn),
	)
}
