// Code generated by ent, DO NOT EDIT.

package platformapprole

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dexidp/dex/storage/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldEQ(FieldUpdateTime, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldEQ(FieldAppID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldEQ(FieldDescription, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v int) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldEQ(FieldWeight, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldEQ(FieldIsActive, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldLTE(FieldUpdateTime, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldLTE(FieldAppID, v))
}

// AppIDContains applies the Contains predicate on the "app_id" field.
func AppIDContains(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldContains(FieldAppID, v))
}

// AppIDHasPrefix applies the HasPrefix predicate on the "app_id" field.
func AppIDHasPrefix(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldHasPrefix(FieldAppID, v))
}

// AppIDHasSuffix applies the HasSuffix predicate on the "app_id" field.
func AppIDHasSuffix(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldHasSuffix(FieldAppID, v))
}

// AppIDEqualFold applies the EqualFold predicate on the "app_id" field.
func AppIDEqualFold(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldEqualFold(FieldAppID, v))
}

// AppIDContainsFold applies the ContainsFold predicate on the "app_id" field.
func AppIDContainsFold(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldContainsFold(FieldAppID, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldContainsFold(FieldDescription, v))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v int) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v int) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...int) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...int) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v int) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v int) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v int) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v int) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldLTE(FieldWeight, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.FieldNEQ(FieldIsActive, v))
}

// HasUserAssignments applies the HasEdge predicate on the "user_assignments" edge.
func HasUserAssignments() predicate.PlatformAppRole {
	return predicate.PlatformAppRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserAssignmentsTable, UserAssignmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserAssignmentsWith applies the HasEdge predicate on the "user_assignments" edge with a given conditions (other predicates).
func HasUserAssignmentsWith(preds ...predicate.PlatformUserRoleAssignment) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(func(s *sql.Selector) {
		step := newUserAssignmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIdentityAssignments applies the HasEdge predicate on the "identity_assignments" edge.
func HasIdentityAssignments() predicate.PlatformAppRole {
	return predicate.PlatformAppRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IdentityAssignmentsTable, IdentityAssignmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIdentityAssignmentsWith applies the HasEdge predicate on the "identity_assignments" edge with a given conditions (other predicates).
func HasIdentityAssignmentsWith(preds ...predicate.PlatformIdentityRoleAssignment) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(func(s *sql.Selector) {
		step := newIdentityAssignmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTokens applies the HasEdge predicate on the "tokens" edge.
func HasTokens() predicate.PlatformAppRole {
	return predicate.PlatformAppRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TokensTable, TokensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTokensWith applies the HasEdge predicate on the "tokens" edge with a given conditions (other predicates).
func HasTokensWith(preds ...predicate.PlatformToken) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(func(s *sql.Selector) {
		step := newTokensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PlatformAppRole) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PlatformAppRole) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PlatformAppRole) predicate.PlatformAppRole {
	return predicate.PlatformAppRole(sql.NotPredicates(p))
}
