// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dexidp/dex/storage/ent/db/platformapprole"
	"github.com/dexidp/dex/storage/ent/db/platformidentityroleassignment"
	"github.com/dexidp/dex/storage/ent/db/platformtoken"
	"github.com/dexidp/dex/storage/ent/db/platformuserroleassignment"
)

// PlatformAppRoleCreate is the builder for creating a PlatformAppRole entity.
type PlatformAppRoleCreate struct {
	config
	mutation *PlatformAppRoleMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (parc *PlatformAppRoleCreate) SetCreateTime(t time.Time) *PlatformAppRoleCreate {
	parc.mutation.SetCreateTime(t)
	return parc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (parc *PlatformAppRoleCreate) SetNillableCreateTime(t *time.Time) *PlatformAppRoleCreate {
	if t != nil {
		parc.SetCreateTime(*t)
	}
	return parc
}

// SetUpdateTime sets the "update_time" field.
func (parc *PlatformAppRoleCreate) SetUpdateTime(t time.Time) *PlatformAppRoleCreate {
	parc.mutation.SetUpdateTime(t)
	return parc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (parc *PlatformAppRoleCreate) SetNillableUpdateTime(t *time.Time) *PlatformAppRoleCreate {
	if t != nil {
		parc.SetUpdateTime(*t)
	}
	return parc
}

// SetAppID sets the "app_id" field.
func (parc *PlatformAppRoleCreate) SetAppID(s string) *PlatformAppRoleCreate {
	parc.mutation.SetAppID(s)
	return parc
}

// SetTitle sets the "title" field.
func (parc *PlatformAppRoleCreate) SetTitle(s string) *PlatformAppRoleCreate {
	parc.mutation.SetTitle(s)
	return parc
}

// SetDescription sets the "description" field.
func (parc *PlatformAppRoleCreate) SetDescription(s string) *PlatformAppRoleCreate {
	parc.mutation.SetDescription(s)
	return parc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (parc *PlatformAppRoleCreate) SetNillableDescription(s *string) *PlatformAppRoleCreate {
	if s != nil {
		parc.SetDescription(*s)
	}
	return parc
}

// SetWeight sets the "weight" field.
func (parc *PlatformAppRoleCreate) SetWeight(i int) *PlatformAppRoleCreate {
	parc.mutation.SetWeight(i)
	return parc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (parc *PlatformAppRoleCreate) SetNillableWeight(i *int) *PlatformAppRoleCreate {
	if i != nil {
		parc.SetWeight(*i)
	}
	return parc
}

// SetIsActive sets the "is_active" field.
func (parc *PlatformAppRoleCreate) SetIsActive(b bool) *PlatformAppRoleCreate {
	parc.mutation.SetIsActive(b)
	return parc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (parc *PlatformAppRoleCreate) SetNillableIsActive(b *bool) *PlatformAppRoleCreate {
	if b != nil {
		parc.SetIsActive(*b)
	}
	return parc
}

// AddUserAssignmentIDs adds the "user_assignments" edge to the PlatformUserRoleAssignment entity by IDs.
func (parc *PlatformAppRoleCreate) AddUserAssignmentIDs(ids ...int) *PlatformAppRoleCreate {
	parc.mutation.AddUserAssignmentIDs(ids...)
	return parc
}

// AddUserAssignments adds the "user_assignments" edges to the PlatformUserRoleAssignment entity.
func (parc *PlatformAppRoleCreate) AddUserAssignments(p ...*PlatformUserRoleAssignment) *PlatformAppRoleCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return parc.AddUserAssignmentIDs(ids...)
}

// AddIdentityAssignmentIDs adds the "identity_assignments" edge to the PlatformIdentityRoleAssignment entity by IDs.
func (parc *PlatformAppRoleCreate) AddIdentityAssignmentIDs(ids ...int) *PlatformAppRoleCreate {
	parc.mutation.AddIdentityAssignmentIDs(ids...)
	return parc
}

// AddIdentityAssignments adds the "identity_assignments" edges to the PlatformIdentityRoleAssignment entity.
func (parc *PlatformAppRoleCreate) AddIdentityAssignments(p ...*PlatformIdentityRoleAssignment) *PlatformAppRoleCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return parc.AddIdentityAssignmentIDs(ids...)
}

// AddTokenIDs adds the "tokens" edge to the PlatformToken entity by IDs.
func (parc *PlatformAppRoleCreate) AddTokenIDs(ids ...int) *PlatformAppRoleCreate {
	parc.mutation.AddTokenIDs(ids...)
	return parc
}

// AddTokens adds the "tokens" edges to the PlatformToken entity.
func (parc *PlatformAppRoleCreate) AddTokens(p ...*PlatformToken) *PlatformAppRoleCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return parc.AddTokenIDs(ids...)
}

// Mutation returns the PlatformAppRoleMutation object of the builder.
func (parc *PlatformAppRoleCreate) Mutation() *PlatformAppRoleMutation {
	return parc.mutation
}

// Save creates the PlatformAppRole in the database.
func (parc *PlatformAppRoleCreate) Save(ctx context.Context) (*PlatformAppRole, error) {
	parc.defaults()
	return withHooks(ctx, parc.sqlSave, parc.mutation, parc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (parc *PlatformAppRoleCreate) SaveX(ctx context.Context) *PlatformAppRole {
	v, err := parc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (parc *PlatformAppRoleCreate) Exec(ctx context.Context) error {
	_, err := parc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (parc *PlatformAppRoleCreate) ExecX(ctx context.Context) {
	if err := parc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (parc *PlatformAppRoleCreate) defaults() {
	if _, ok := parc.mutation.CreateTime(); !ok {
		v := platformapprole.DefaultCreateTime()
		parc.mutation.SetCreateTime(v)
	}
	if _, ok := parc.mutation.UpdateTime(); !ok {
		v := platformapprole.DefaultUpdateTime()
		parc.mutation.SetUpdateTime(v)
	}
	if _, ok := parc.mutation.Weight(); !ok {
		v := platformapprole.DefaultWeight
		parc.mutation.SetWeight(v)
	}
	if _, ok := parc.mutation.IsActive(); !ok {
		v := platformapprole.DefaultIsActive
		parc.mutation.SetIsActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (parc *PlatformAppRoleCreate) check() error {
	if _, ok := parc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`db: missing required field "PlatformAppRole.create_time"`)}
	}
	if _, ok := parc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`db: missing required field "PlatformAppRole.update_time"`)}
	}
	if _, ok := parc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`db: missing required field "PlatformAppRole.app_id"`)}
	}
	if v, ok := parc.mutation.AppID(); ok {
		if err := platformapprole.AppIDValidator(v); err != nil {
			return &ValidationError{Name: "app_id", err: fmt.Errorf(`db: validator failed for field "PlatformAppRole.app_id": %w`, err)}
		}
	}
	if _, ok := parc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`db: missing required field "PlatformAppRole.title"`)}
	}
	if v, ok := parc.mutation.Title(); ok {
		if err := platformapprole.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`db: validator failed for field "PlatformAppRole.title": %w`, err)}
		}
	}
	if _, ok := parc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`db: missing required field "PlatformAppRole.weight"`)}
	}
	if _, ok := parc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`db: missing required field "PlatformAppRole.is_active"`)}
	}
	return nil
}

func (parc *PlatformAppRoleCreate) sqlSave(ctx context.Context) (*PlatformAppRole, error) {
	if err := parc.check(); err != nil {
		return nil, err
	}
	_node, _spec := parc.createSpec()
	if err := sqlgraph.CreateNode(ctx, parc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	parc.mutation.id = &_node.ID
	parc.mutation.done = true
	return _node, nil
}

func (parc *PlatformAppRoleCreate) createSpec() (*PlatformAppRole, *sqlgraph.CreateSpec) {
	var (
		_node = &PlatformAppRole{config: parc.config}
		_spec = sqlgraph.NewCreateSpec(platformapprole.Table, sqlgraph.NewFieldSpec(platformapprole.FieldID, field.TypeInt))
	)
	if value, ok := parc.mutation.CreateTime(); ok {
		_spec.SetField(platformapprole.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := parc.mutation.UpdateTime(); ok {
		_spec.SetField(platformapprole.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := parc.mutation.AppID(); ok {
		_spec.SetField(platformapprole.FieldAppID, field.TypeString, value)
		_node.AppID = value
	}
	if value, ok := parc.mutation.Title(); ok {
		_spec.SetField(platformapprole.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := parc.mutation.Description(); ok {
		_spec.SetField(platformapprole.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := parc.mutation.Weight(); ok {
		_spec.SetField(platformapprole.FieldWeight, field.TypeInt, value)
		_node.Weight = value
	}
	if value, ok := parc.mutation.IsActive(); ok {
		_spec.SetField(platformapprole.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if nodes := parc.mutation.UserAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformapprole.UserAssignmentsTable,
			Columns: []string{platformapprole.UserAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuserroleassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := parc.mutation.IdentityAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformapprole.IdentityAssignmentsTable,
			Columns: []string{platformapprole.IdentityAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformidentityroleassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := parc.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformapprole.TokensTable,
			Columns: []string{platformapprole.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformtoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlatformAppRoleCreateBulk is the builder for creating many PlatformAppRole entities in bulk.
type PlatformAppRoleCreateBulk struct {
	config
	err      error
	builders []*PlatformAppRoleCreate
}

// Save creates the PlatformAppRole entities in the database.
func (parcb *PlatformAppRoleCreateBulk) Save(ctx context.Context) ([]*PlatformAppRole, error) {
	if parcb.err != nil {
		return nil, parcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(parcb.builders))
	nodes := make([]*PlatformAppRole, len(parcb.builders))
	mutators := make([]Mutator, len(parcb.builders))
	for i := range parcb.builders {
		func(i int, root context.Context) {
			builder := parcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlatformAppRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, parcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, parcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, parcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (parcb *PlatformAppRoleCreateBulk) SaveX(ctx context.Context) []*PlatformAppRole {
	v, err := parcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (parcb *PlatformAppRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := parcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (parcb *PlatformAppRoleCreateBulk) ExecX(ctx context.Context) {
	if err := parcb.Exec(ctx); err != nil {
		panic(err)
	}
}
