// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dexidp/dex/storage/ent/db/platformapprole"
	"github.com/dexidp/dex/storage/ent/db/platformidentityroleassignment"
	"github.com/dexidp/dex/storage/ent/db/platformtoken"
	"github.com/dexidp/dex/storage/ent/db/platformuserroleassignment"
	"github.com/dexidp/dex/storage/ent/db/predicate"
)

// PlatformAppRoleQuery is the builder for querying PlatformAppRole entities.
type PlatformAppRoleQuery struct {
	config
	ctx                     *QueryContext
	order                   []platformapprole.OrderOption
	inters                  []Interceptor
	predicates              []predicate.PlatformAppRole
	withUserAssignments     *PlatformUserRoleAssignmentQuery
	withIdentityAssignments *PlatformIdentityRoleAssignmentQuery
	withTokens              *PlatformTokenQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PlatformAppRoleQuery builder.
func (parq *PlatformAppRoleQuery) Where(ps ...predicate.PlatformAppRole) *PlatformAppRoleQuery {
	parq.predicates = append(parq.predicates, ps...)
	return parq
}

// Limit the number of records to be returned by this query.
func (parq *PlatformAppRoleQuery) Limit(limit int) *PlatformAppRoleQuery {
	parq.ctx.Limit = &limit
	return parq
}

// Offset to start from.
func (parq *PlatformAppRoleQuery) Offset(offset int) *PlatformAppRoleQuery {
	parq.ctx.Offset = &offset
	return parq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (parq *PlatformAppRoleQuery) Unique(unique bool) *PlatformAppRoleQuery {
	parq.ctx.Unique = &unique
	return parq
}

// Order specifies how the records should be ordered.
func (parq *PlatformAppRoleQuery) Order(o ...platformapprole.OrderOption) *PlatformAppRoleQuery {
	parq.order = append(parq.order, o...)
	return parq
}

// QueryUserAssignments chains the current query on the "user_assignments" edge.
func (parq *PlatformAppRoleQuery) QueryUserAssignments() *PlatformUserRoleAssignmentQuery {
	query := (&PlatformUserRoleAssignmentClient{config: parq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := parq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := parq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(platformapprole.Table, platformapprole.FieldID, selector),
			sqlgraph.To(platformuserroleassignment.Table, platformuserroleassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, platformapprole.UserAssignmentsTable, platformapprole.UserAssignmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(parq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIdentityAssignments chains the current query on the "identity_assignments" edge.
func (parq *PlatformAppRoleQuery) QueryIdentityAssignments() *PlatformIdentityRoleAssignmentQuery {
	query := (&PlatformIdentityRoleAssignmentClient{config: parq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := parq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := parq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(platformapprole.Table, platformapprole.FieldID, selector),
			sqlgraph.To(platformidentityroleassignment.Table, platformidentityroleassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, platformapprole.IdentityAssignmentsTable, platformapprole.IdentityAssignmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(parq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTokens chains the current query on the "tokens" edge.
func (parq *PlatformAppRoleQuery) QueryTokens() *PlatformTokenQuery {
	query := (&PlatformTokenClient{config: parq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := parq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := parq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(platformapprole.Table, platformapprole.FieldID, selector),
			sqlgraph.To(platformtoken.Table, platformtoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, platformapprole.TokensTable, platformapprole.TokensColumn),
		)
		fromU = sqlgraph.SetNeighbors(parq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PlatformAppRole entity from the query.
// Returns a *NotFoundError when no PlatformAppRole was found.
func (parq *PlatformAppRoleQuery) First(ctx context.Context) (*PlatformAppRole, error) {
	nodes, err := parq.Limit(1).All(setContextOp(ctx, parq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{platformapprole.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (parq *PlatformAppRoleQuery) FirstX(ctx context.Context) *PlatformAppRole {
	node, err := parq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PlatformAppRole ID from the query.
// Returns a *NotFoundError when no PlatformAppRole ID was found.
func (parq *PlatformAppRoleQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = parq.Limit(1).IDs(setContextOp(ctx, parq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{platformapprole.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (parq *PlatformAppRoleQuery) FirstIDX(ctx context.Context) int {
	id, err := parq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PlatformAppRole entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PlatformAppRole entity is found.
// Returns a *NotFoundError when no PlatformAppRole entities are found.
func (parq *PlatformAppRoleQuery) Only(ctx context.Context) (*PlatformAppRole, error) {
	nodes, err := parq.Limit(2).All(setContextOp(ctx, parq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{platformapprole.Label}
	default:
		return nil, &NotSingularError{platformapprole.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (parq *PlatformAppRoleQuery) OnlyX(ctx context.Context) *PlatformAppRole {
	node, err := parq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PlatformAppRole ID in the query.
// Returns a *NotSingularError when more than one PlatformAppRole ID is found.
// Returns a *NotFoundError when no entities are found.
func (parq *PlatformAppRoleQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = parq.Limit(2).IDs(setContextOp(ctx, parq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{platformapprole.Label}
	default:
		err = &NotSingularError{platformapprole.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (parq *PlatformAppRoleQuery) OnlyIDX(ctx context.Context) int {
	id, err := parq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PlatformAppRoles.
func (parq *PlatformAppRoleQuery) All(ctx context.Context) ([]*PlatformAppRole, error) {
	ctx = setContextOp(ctx, parq.ctx, ent.OpQueryAll)
	if err := parq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PlatformAppRole, *PlatformAppRoleQuery]()
	return withInterceptors[[]*PlatformAppRole](ctx, parq, qr, parq.inters)
}

// AllX is like All, but panics if an error occurs.
func (parq *PlatformAppRoleQuery) AllX(ctx context.Context) []*PlatformAppRole {
	nodes, err := parq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PlatformAppRole IDs.
func (parq *PlatformAppRoleQuery) IDs(ctx context.Context) (ids []int, err error) {
	if parq.ctx.Unique == nil && parq.path != nil {
		parq.Unique(true)
	}
	ctx = setContextOp(ctx, parq.ctx, ent.OpQueryIDs)
	if err = parq.Select(platformapprole.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (parq *PlatformAppRoleQuery) IDsX(ctx context.Context) []int {
	ids, err := parq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (parq *PlatformAppRoleQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, parq.ctx, ent.OpQueryCount)
	if err := parq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, parq, querierCount[*PlatformAppRoleQuery](), parq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (parq *PlatformAppRoleQuery) CountX(ctx context.Context) int {
	count, err := parq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (parq *PlatformAppRoleQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, parq.ctx, ent.OpQueryExist)
	switch _, err := parq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (parq *PlatformAppRoleQuery) ExistX(ctx context.Context) bool {
	exist, err := parq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PlatformAppRoleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (parq *PlatformAppRoleQuery) Clone() *PlatformAppRoleQuery {
	if parq == nil {
		return nil
	}
	return &PlatformAppRoleQuery{
		config:                  parq.config,
		ctx:                     parq.ctx.Clone(),
		order:                   append([]platformapprole.OrderOption{}, parq.order...),
		inters:                  append([]Interceptor{}, parq.inters...),
		predicates:              append([]predicate.PlatformAppRole{}, parq.predicates...),
		withUserAssignments:     parq.withUserAssignments.Clone(),
		withIdentityAssignments: parq.withIdentityAssignments.Clone(),
		withTokens:              parq.withTokens.Clone(),
		// clone intermediate query.
		sql:  parq.sql.Clone(),
		path: parq.path,
	}
}

// WithUserAssignments tells the query-builder to eager-load the nodes that are connected to
// the "user_assignments" edge. The optional arguments are used to configure the query builder of the edge.
func (parq *PlatformAppRoleQuery) WithUserAssignments(opts ...func(*PlatformUserRoleAssignmentQuery)) *PlatformAppRoleQuery {
	query := (&PlatformUserRoleAssignmentClient{config: parq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	parq.withUserAssignments = query
	return parq
}

// WithIdentityAssignments tells the query-builder to eager-load the nodes that are connected to
// the "identity_assignments" edge. The optional arguments are used to configure the query builder of the edge.
func (parq *PlatformAppRoleQuery) WithIdentityAssignments(opts ...func(*PlatformIdentityRoleAssignmentQuery)) *PlatformAppRoleQuery {
	query := (&PlatformIdentityRoleAssignmentClient{config: parq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	parq.withIdentityAssignments = query
	return parq
}

// WithTokens tells the query-builder to eager-load the nodes that are connected to
// the "tokens" edge. The optional arguments are used to configure the query builder of the edge.
func (parq *PlatformAppRoleQuery) WithTokens(opts ...func(*PlatformTokenQuery)) *PlatformAppRoleQuery {
	query := (&PlatformTokenClient{config: parq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	parq.withTokens = query
	return parq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PlatformAppRole.Query().
//		GroupBy(platformapprole.FieldCreateTime).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (parq *PlatformAppRoleQuery) GroupBy(field string, fields ...string) *PlatformAppRoleGroupBy {
	parq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PlatformAppRoleGroupBy{build: parq}
	grbuild.flds = &parq.ctx.Fields
	grbuild.label = platformapprole.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.PlatformAppRole.Query().
//		Select(platformapprole.FieldCreateTime).
//		Scan(ctx, &v)
func (parq *PlatformAppRoleQuery) Select(fields ...string) *PlatformAppRoleSelect {
	parq.ctx.Fields = append(parq.ctx.Fields, fields...)
	sbuild := &PlatformAppRoleSelect{PlatformAppRoleQuery: parq}
	sbuild.label = platformapprole.Label
	sbuild.flds, sbuild.scan = &parq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PlatformAppRoleSelect configured with the given aggregations.
func (parq *PlatformAppRoleQuery) Aggregate(fns ...AggregateFunc) *PlatformAppRoleSelect {
	return parq.Select().Aggregate(fns...)
}

func (parq *PlatformAppRoleQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range parq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, parq); err != nil {
				return err
			}
		}
	}
	for _, f := range parq.ctx.Fields {
		if !platformapprole.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if parq.path != nil {
		prev, err := parq.path(ctx)
		if err != nil {
			return err
		}
		parq.sql = prev
	}
	return nil
}

func (parq *PlatformAppRoleQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PlatformAppRole, error) {
	var (
		nodes       = []*PlatformAppRole{}
		_spec       = parq.querySpec()
		loadedTypes = [3]bool{
			parq.withUserAssignments != nil,
			parq.withIdentityAssignments != nil,
			parq.withTokens != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PlatformAppRole).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PlatformAppRole{config: parq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, parq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := parq.withUserAssignments; query != nil {
		if err := parq.loadUserAssignments(ctx, query, nodes,
			func(n *PlatformAppRole) { n.Edges.UserAssignments = []*PlatformUserRoleAssignment{} },
			func(n *PlatformAppRole, e *PlatformUserRoleAssignment) {
				n.Edges.UserAssignments = append(n.Edges.UserAssignments, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := parq.withIdentityAssignments; query != nil {
		if err := parq.loadIdentityAssignments(ctx, query, nodes,
			func(n *PlatformAppRole) { n.Edges.IdentityAssignments = []*PlatformIdentityRoleAssignment{} },
			func(n *PlatformAppRole, e *PlatformIdentityRoleAssignment) {
				n.Edges.IdentityAssignments = append(n.Edges.IdentityAssignments, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := parq.withTokens; query != nil {
		if err := parq.loadTokens(ctx, query, nodes,
			func(n *PlatformAppRole) { n.Edges.Tokens = []*PlatformToken{} },
			func(n *PlatformAppRole, e *PlatformToken) { n.Edges.Tokens = append(n.Edges.Tokens, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (parq *PlatformAppRoleQuery) loadUserAssignments(ctx context.Context, query *PlatformUserRoleAssignmentQuery, nodes []*PlatformAppRole, init func(*PlatformAppRole), assign func(*PlatformAppRole, *PlatformUserRoleAssignment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PlatformAppRole)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PlatformUserRoleAssignment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(platformapprole.UserAssignmentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.platform_app_role_user_assignments
		if fk == nil {
			return fmt.Errorf(`foreign-key "platform_app_role_user_assignments" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "platform_app_role_user_assignments" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (parq *PlatformAppRoleQuery) loadIdentityAssignments(ctx context.Context, query *PlatformIdentityRoleAssignmentQuery, nodes []*PlatformAppRole, init func(*PlatformAppRole), assign func(*PlatformAppRole, *PlatformIdentityRoleAssignment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PlatformAppRole)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PlatformIdentityRoleAssignment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(platformapprole.IdentityAssignmentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.platform_app_role_identity_assignments
		if fk == nil {
			return fmt.Errorf(`foreign-key "platform_app_role_identity_assignments" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "platform_app_role_identity_assignments" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (parq *PlatformAppRoleQuery) loadTokens(ctx context.Context, query *PlatformTokenQuery, nodes []*PlatformAppRole, init func(*PlatformAppRole), assign func(*PlatformAppRole, *PlatformToken)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PlatformAppRole)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PlatformToken(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(platformapprole.TokensColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.platform_app_role_tokens
		if fk == nil {
			return fmt.Errorf(`foreign-key "platform_app_role_tokens" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "platform_app_role_tokens" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (parq *PlatformAppRoleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := parq.querySpec()
	_spec.Node.Columns = parq.ctx.Fields
	if len(parq.ctx.Fields) > 0 {
		_spec.Unique = parq.ctx.Unique != nil && *parq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, parq.driver, _spec)
}

func (parq *PlatformAppRoleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(platformapprole.Table, platformapprole.Columns, sqlgraph.NewFieldSpec(platformapprole.FieldID, field.TypeInt))
	_spec.From = parq.sql
	if unique := parq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if parq.path != nil {
		_spec.Unique = true
	}
	if fields := parq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, platformapprole.FieldID)
		for i := range fields {
			if fields[i] != platformapprole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := parq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := parq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := parq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := parq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (parq *PlatformAppRoleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(parq.driver.Dialect())
	t1 := builder.Table(platformapprole.Table)
	columns := parq.ctx.Fields
	if len(columns) == 0 {
		columns = platformapprole.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if parq.sql != nil {
		selector = parq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if parq.ctx.Unique != nil && *parq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range parq.predicates {
		p(selector)
	}
	for _, p := range parq.order {
		p(selector)
	}
	if offset := parq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := parq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PlatformAppRoleGroupBy is the group-by builder for PlatformAppRole entities.
type PlatformAppRoleGroupBy struct {
	selector
	build *PlatformAppRoleQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pargb *PlatformAppRoleGroupBy) Aggregate(fns ...AggregateFunc) *PlatformAppRoleGroupBy {
	pargb.fns = append(pargb.fns, fns...)
	return pargb
}

// Scan applies the selector query and scans the result into the given value.
func (pargb *PlatformAppRoleGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pargb.build.ctx, ent.OpQueryGroupBy)
	if err := pargb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlatformAppRoleQuery, *PlatformAppRoleGroupBy](ctx, pargb.build, pargb, pargb.build.inters, v)
}

func (pargb *PlatformAppRoleGroupBy) sqlScan(ctx context.Context, root *PlatformAppRoleQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pargb.fns))
	for _, fn := range pargb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pargb.flds)+len(pargb.fns))
		for _, f := range *pargb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pargb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pargb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PlatformAppRoleSelect is the builder for selecting fields of PlatformAppRole entities.
type PlatformAppRoleSelect struct {
	*PlatformAppRoleQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pars *PlatformAppRoleSelect) Aggregate(fns ...AggregateFunc) *PlatformAppRoleSelect {
	pars.fns = append(pars.fns, fns...)
	return pars
}

// Scan applies the selector query and scans the result into the given value.
func (pars *PlatformAppRoleSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pars.ctx, ent.OpQuerySelect)
	if err := pars.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlatformAppRoleQuery, *PlatformAppRoleSelect](ctx, pars.PlatformAppRoleQuery, pars, pars.inters, v)
}

func (pars *PlatformAppRoleSelect) sqlScan(ctx context.Context, root *PlatformAppRoleQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pars.fns))
	for _, fn := range pars.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pars.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pars.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
