// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dexidp/dex/storage/ent/db/platformapprole"
	"github.com/dexidp/dex/storage/ent/db/platformidentityroleassignment"
	"github.com/dexidp/dex/storage/ent/db/platformtoken"
	"github.com/dexidp/dex/storage/ent/db/platformuserroleassignment"
	"github.com/dexidp/dex/storage/ent/db/predicate"
)

// PlatformAppRoleUpdate is the builder for updating PlatformAppRole entities.
type PlatformAppRoleUpdate struct {
	config
	hooks    []Hook
	mutation *PlatformAppRoleMutation
}

// Where appends a list predicates to the PlatformAppRoleUpdate builder.
func (paru *PlatformAppRoleUpdate) Where(ps ...predicate.PlatformAppRole) *PlatformAppRoleUpdate {
	paru.mutation.Where(ps...)
	return paru
}

// SetUpdateTime sets the "update_time" field.
func (paru *PlatformAppRoleUpdate) SetUpdateTime(t time.Time) *PlatformAppRoleUpdate {
	paru.mutation.SetUpdateTime(t)
	return paru
}

// SetAppID sets the "app_id" field.
func (paru *PlatformAppRoleUpdate) SetAppID(s string) *PlatformAppRoleUpdate {
	paru.mutation.SetAppID(s)
	return paru
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (paru *PlatformAppRoleUpdate) SetNillableAppID(s *string) *PlatformAppRoleUpdate {
	if s != nil {
		paru.SetAppID(*s)
	}
	return paru
}

// SetTitle sets the "title" field.
func (paru *PlatformAppRoleUpdate) SetTitle(s string) *PlatformAppRoleUpdate {
	paru.mutation.SetTitle(s)
	return paru
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (paru *PlatformAppRoleUpdate) SetNillableTitle(s *string) *PlatformAppRoleUpdate {
	if s != nil {
		paru.SetTitle(*s)
	}
	return paru
}

// SetDescription sets the "description" field.
func (paru *PlatformAppRoleUpdate) SetDescription(s string) *PlatformAppRoleUpdate {
	paru.mutation.SetDescription(s)
	return paru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (paru *PlatformAppRoleUpdate) SetNillableDescription(s *string) *PlatformAppRoleUpdate {
	if s != nil {
		paru.SetDescription(*s)
	}
	return paru
}

// ClearDescription clears the value of the "description" field.
func (paru *PlatformAppRoleUpdate) ClearDescription() *PlatformAppRoleUpdate {
	paru.mutation.ClearDescription()
	return paru
}

// SetWeight sets the "weight" field.
func (paru *PlatformAppRoleUpdate) SetWeight(i int) *PlatformAppRoleUpdate {
	paru.mutation.ResetWeight()
	paru.mutation.SetWeight(i)
	return paru
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (paru *PlatformAppRoleUpdate) SetNillableWeight(i *int) *PlatformAppRoleUpdate {
	if i != nil {
		paru.SetWeight(*i)
	}
	return paru
}

// AddWeight adds i to the "weight" field.
func (paru *PlatformAppRoleUpdate) AddWeight(i int) *PlatformAppRoleUpdate {
	paru.mutation.AddWeight(i)
	return paru
}

// SetIsActive sets the "is_active" field.
func (paru *PlatformAppRoleUpdate) SetIsActive(b bool) *PlatformAppRoleUpdate {
	paru.mutation.SetIsActive(b)
	return paru
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (paru *PlatformAppRoleUpdate) SetNillableIsActive(b *bool) *PlatformAppRoleUpdate {
	if b != nil {
		paru.SetIsActive(*b)
	}
	return paru
}

// AddUserAssignmentIDs adds the "user_assignments" edge to the PlatformUserRoleAssignment entity by IDs.
func (paru *PlatformAppRoleUpdate) AddUserAssignmentIDs(ids ...int) *PlatformAppRoleUpdate {
	paru.mutation.AddUserAssignmentIDs(ids...)
	return paru
}

// AddUserAssignments adds the "user_assignments" edges to the PlatformUserRoleAssignment entity.
func (paru *PlatformAppRoleUpdate) AddUserAssignments(p ...*PlatformUserRoleAssignment) *PlatformAppRoleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return paru.AddUserAssignmentIDs(ids...)
}

// AddIdentityAssignmentIDs adds the "identity_assignments" edge to the PlatformIdentityRoleAssignment entity by IDs.
func (paru *PlatformAppRoleUpdate) AddIdentityAssignmentIDs(ids ...int) *PlatformAppRoleUpdate {
	paru.mutation.AddIdentityAssignmentIDs(ids...)
	return paru
}

// AddIdentityAssignments adds the "identity_assignments" edges to the PlatformIdentityRoleAssignment entity.
func (paru *PlatformAppRoleUpdate) AddIdentityAssignments(p ...*PlatformIdentityRoleAssignment) *PlatformAppRoleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return paru.AddIdentityAssignmentIDs(ids...)
}

// AddTokenIDs adds the "tokens" edge to the PlatformToken entity by IDs.
func (paru *PlatformAppRoleUpdate) AddTokenIDs(ids ...int) *PlatformAppRoleUpdate {
	paru.mutation.AddTokenIDs(ids...)
	return paru
}

// AddTokens adds the "tokens" edges to the PlatformToken entity.
func (paru *PlatformAppRoleUpdate) AddTokens(p ...*PlatformToken) *PlatformAppRoleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return paru.AddTokenIDs(ids...)
}

// Mutation returns the PlatformAppRoleMutation object of the builder.
func (paru *PlatformAppRoleUpdate) Mutation() *PlatformAppRoleMutation {
	return paru.mutation
}

// ClearUserAssignments clears all "user_assignments" edges to the PlatformUserRoleAssignment entity.
func (paru *PlatformAppRoleUpdate) ClearUserAssignments() *PlatformAppRoleUpdate {
	paru.mutation.ClearUserAssignments()
	return paru
}

// RemoveUserAssignmentIDs removes the "user_assignments" edge to PlatformUserRoleAssignment entities by IDs.
func (paru *PlatformAppRoleUpdate) RemoveUserAssignmentIDs(ids ...int) *PlatformAppRoleUpdate {
	paru.mutation.RemoveUserAssignmentIDs(ids...)
	return paru
}

// RemoveUserAssignments removes "user_assignments" edges to PlatformUserRoleAssignment entities.
func (paru *PlatformAppRoleUpdate) RemoveUserAssignments(p ...*PlatformUserRoleAssignment) *PlatformAppRoleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return paru.RemoveUserAssignmentIDs(ids...)
}

// ClearIdentityAssignments clears all "identity_assignments" edges to the PlatformIdentityRoleAssignment entity.
func (paru *PlatformAppRoleUpdate) ClearIdentityAssignments() *PlatformAppRoleUpdate {
	paru.mutation.ClearIdentityAssignments()
	return paru
}

// RemoveIdentityAssignmentIDs removes the "identity_assignments" edge to PlatformIdentityRoleAssignment entities by IDs.
func (paru *PlatformAppRoleUpdate) RemoveIdentityAssignmentIDs(ids ...int) *PlatformAppRoleUpdate {
	paru.mutation.RemoveIdentityAssignmentIDs(ids...)
	return paru
}

// RemoveIdentityAssignments removes "identity_assignments" edges to PlatformIdentityRoleAssignment entities.
func (paru *PlatformAppRoleUpdate) RemoveIdentityAssignments(p ...*PlatformIdentityRoleAssignment) *PlatformAppRoleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return paru.RemoveIdentityAssignmentIDs(ids...)
}

// ClearTokens clears all "tokens" edges to the PlatformToken entity.
func (paru *PlatformAppRoleUpdate) ClearTokens() *PlatformAppRoleUpdate {
	paru.mutation.ClearTokens()
	return paru
}

// RemoveTokenIDs removes the "tokens" edge to PlatformToken entities by IDs.
func (paru *PlatformAppRoleUpdate) RemoveTokenIDs(ids ...int) *PlatformAppRoleUpdate {
	paru.mutation.RemoveTokenIDs(ids...)
	return paru
}

// RemoveTokens removes "tokens" edges to PlatformToken entities.
func (paru *PlatformAppRoleUpdate) RemoveTokens(p ...*PlatformToken) *PlatformAppRoleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return paru.RemoveTokenIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (paru *PlatformAppRoleUpdate) Save(ctx context.Context) (int, error) {
	paru.defaults()
	return withHooks(ctx, paru.sqlSave, paru.mutation, paru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (paru *PlatformAppRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := paru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (paru *PlatformAppRoleUpdate) Exec(ctx context.Context) error {
	_, err := paru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (paru *PlatformAppRoleUpdate) ExecX(ctx context.Context) {
	if err := paru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (paru *PlatformAppRoleUpdate) defaults() {
	if _, ok := paru.mutation.UpdateTime(); !ok {
		v := platformapprole.UpdateDefaultUpdateTime()
		paru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (paru *PlatformAppRoleUpdate) check() error {
	if v, ok := paru.mutation.AppID(); ok {
		if err := platformapprole.AppIDValidator(v); err != nil {
			return &ValidationError{Name: "app_id", err: fmt.Errorf(`db: validator failed for field "PlatformAppRole.app_id": %w`, err)}
		}
	}
	if v, ok := paru.mutation.Title(); ok {
		if err := platformapprole.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`db: validator failed for field "PlatformAppRole.title": %w`, err)}
		}
	}
	return nil
}

func (paru *PlatformAppRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := paru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(platformapprole.Table, platformapprole.Columns, sqlgraph.NewFieldSpec(platformapprole.FieldID, field.TypeInt))
	if ps := paru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := paru.mutation.UpdateTime(); ok {
		_spec.SetField(platformapprole.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := paru.mutation.AppID(); ok {
		_spec.SetField(platformapprole.FieldAppID, field.TypeString, value)
	}
	if value, ok := paru.mutation.Title(); ok {
		_spec.SetField(platformapprole.FieldTitle, field.TypeString, value)
	}
	if value, ok := paru.mutation.Description(); ok {
		_spec.SetField(platformapprole.FieldDescription, field.TypeString, value)
	}
	if paru.mutation.DescriptionCleared() {
		_spec.ClearField(platformapprole.FieldDescription, field.TypeString)
	}
	if value, ok := paru.mutation.Weight(); ok {
		_spec.SetField(platformapprole.FieldWeight, field.TypeInt, value)
	}
	if value, ok := paru.mutation.AddedWeight(); ok {
		_spec.AddField(platformapprole.FieldWeight, field.TypeInt, value)
	}
	if value, ok := paru.mutation.IsActive(); ok {
		_spec.SetField(platformapprole.FieldIsActive, field.TypeBool, value)
	}
	if paru.mutation.UserAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformapprole.UserAssignmentsTable,
			Columns: []string{platformapprole.UserAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuserroleassignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := paru.mutation.RemovedUserAssignmentsIDs(); len(nodes) > 0 && !paru.mutation.UserAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformapprole.UserAssignmentsTable,
			Columns: []string{platformapprole.UserAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuserroleassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := paru.mutation.UserAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformapprole.UserAssignmentsTable,
			Columns: []string{platformapprole.UserAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuserroleassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if paru.mutation.IdentityAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformapprole.IdentityAssignmentsTable,
			Columns: []string{platformapprole.IdentityAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformidentityroleassignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := paru.mutation.RemovedIdentityAssignmentsIDs(); len(nodes) > 0 && !paru.mutation.IdentityAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformapprole.IdentityAssignmentsTable,
			Columns: []string{platformapprole.IdentityAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformidentityroleassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := paru.mutation.IdentityAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformapprole.IdentityAssignmentsTable,
			Columns: []string{platformapprole.IdentityAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformidentityroleassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if paru.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformapprole.TokensTable,
			Columns: []string{platformapprole.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformtoken.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := paru.mutation.RemovedTokensIDs(); len(nodes) > 0 && !paru.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformapprole.TokensTable,
			Columns: []string{platformapprole.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformtoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := paru.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformapprole.TokensTable,
			Columns: []string{platformapprole.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformtoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, paru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platformapprole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	paru.mutation.done = true
	return n, nil
}

// PlatformAppRoleUpdateOne is the builder for updating a single PlatformAppRole entity.
type PlatformAppRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlatformAppRoleMutation
}

// SetUpdateTime sets the "update_time" field.
func (paruo *PlatformAppRoleUpdateOne) SetUpdateTime(t time.Time) *PlatformAppRoleUpdateOne {
	paruo.mutation.SetUpdateTime(t)
	return paruo
}

// SetAppID sets the "app_id" field.
func (paruo *PlatformAppRoleUpdateOne) SetAppID(s string) *PlatformAppRoleUpdateOne {
	paruo.mutation.SetAppID(s)
	return paruo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (paruo *PlatformAppRoleUpdateOne) SetNillableAppID(s *string) *PlatformAppRoleUpdateOne {
	if s != nil {
		paruo.SetAppID(*s)
	}
	return paruo
}

// SetTitle sets the "title" field.
func (paruo *PlatformAppRoleUpdateOne) SetTitle(s string) *PlatformAppRoleUpdateOne {
	paruo.mutation.SetTitle(s)
	return paruo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (paruo *PlatformAppRoleUpdateOne) SetNillableTitle(s *string) *PlatformAppRoleUpdateOne {
	if s != nil {
		paruo.SetTitle(*s)
	}
	return paruo
}

// SetDescription sets the "description" field.
func (paruo *PlatformAppRoleUpdateOne) SetDescription(s string) *PlatformAppRoleUpdateOne {
	paruo.mutation.SetDescription(s)
	return paruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (paruo *PlatformAppRoleUpdateOne) SetNillableDescription(s *string) *PlatformAppRoleUpdateOne {
	if s != nil {
		paruo.SetDescription(*s)
	}
	return paruo
}

// ClearDescription clears the value of the "description" field.
func (paruo *PlatformAppRoleUpdateOne) ClearDescription() *PlatformAppRoleUpdateOne {
	paruo.mutation.ClearDescription()
	return paruo
}

// SetWeight sets the "weight" field.
func (paruo *PlatformAppRoleUpdateOne) SetWeight(i int) *PlatformAppRoleUpdateOne {
	paruo.mutation.ResetWeight()
	paruo.mutation.SetWeight(i)
	return paruo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (paruo *PlatformAppRoleUpdateOne) SetNillableWeight(i *int) *PlatformAppRoleUpdateOne {
	if i != nil {
		paruo.SetWeight(*i)
	}
	return paruo
}

// AddWeight adds i to the "weight" field.
func (paruo *PlatformAppRoleUpdateOne) AddWeight(i int) *PlatformAppRoleUpdateOne {
	paruo.mutation.AddWeight(i)
	return paruo
}

// SetIsActive sets the "is_active" field.
func (paruo *PlatformAppRoleUpdateOne) SetIsActive(b bool) *PlatformAppRoleUpdateOne {
	paruo.mutation.SetIsActive(b)
	return paruo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (paruo *PlatformAppRoleUpdateOne) SetNillableIsActive(b *bool) *PlatformAppRoleUpdateOne {
	if b != nil {
		paruo.SetIsActive(*b)
	}
	return paruo
}

// AddUserAssignmentIDs adds the "user_assignments" edge to the PlatformUserRoleAssignment entity by IDs.
func (paruo *PlatformAppRoleUpdateOne) AddUserAssignmentIDs(ids ...int) *PlatformAppRoleUpdateOne {
	paruo.mutation.AddUserAssignmentIDs(ids...)
	return paruo
}

// AddUserAssignments adds the "user_assignments" edges to the PlatformUserRoleAssignment entity.
func (paruo *PlatformAppRoleUpdateOne) AddUserAssignments(p ...*PlatformUserRoleAssignment) *PlatformAppRoleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return paruo.AddUserAssignmentIDs(ids...)
}

// AddIdentityAssignmentIDs adds the "identity_assignments" edge to the PlatformIdentityRoleAssignment entity by IDs.
func (paruo *PlatformAppRoleUpdateOne) AddIdentityAssignmentIDs(ids ...int) *PlatformAppRoleUpdateOne {
	paruo.mutation.AddIdentityAssignmentIDs(ids...)
	return paruo
}

// AddIdentityAssignments adds the "identity_assignments" edges to the PlatformIdentityRoleAssignment entity.
func (paruo *PlatformAppRoleUpdateOne) AddIdentityAssignments(p ...*PlatformIdentityRoleAssignment) *PlatformAppRoleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return paruo.AddIdentityAssignmentIDs(ids...)
}

// AddTokenIDs adds the "tokens" edge to the PlatformToken entity by IDs.
func (paruo *PlatformAppRoleUpdateOne) AddTokenIDs(ids ...int) *PlatformAppRoleUpdateOne {
	paruo.mutation.AddTokenIDs(ids...)
	return paruo
}

// AddTokens adds the "tokens" edges to the PlatformToken entity.
func (paruo *PlatformAppRoleUpdateOne) AddTokens(p ...*PlatformToken) *PlatformAppRoleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return paruo.AddTokenIDs(ids...)
}

// Mutation returns the PlatformAppRoleMutation object of the builder.
func (paruo *PlatformAppRoleUpdateOne) Mutation() *PlatformAppRoleMutation {
	return paruo.mutation
}

// ClearUserAssignments clears all "user_assignments" edges to the PlatformUserRoleAssignment entity.
func (paruo *PlatformAppRoleUpdateOne) ClearUserAssignments() *PlatformAppRoleUpdateOne {
	paruo.mutation.ClearUserAssignments()
	return paruo
}

// RemoveUserAssignmentIDs removes the "user_assignments" edge to PlatformUserRoleAssignment entities by IDs.
func (paruo *PlatformAppRoleUpdateOne) RemoveUserAssignmentIDs(ids ...int) *PlatformAppRoleUpdateOne {
	paruo.mutation.RemoveUserAssignmentIDs(ids...)
	return paruo
}

// RemoveUserAssignments removes "user_assignments" edges to PlatformUserRoleAssignment entities.
func (paruo *PlatformAppRoleUpdateOne) RemoveUserAssignments(p ...*PlatformUserRoleAssignment) *PlatformAppRoleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return paruo.RemoveUserAssignmentIDs(ids...)
}

// ClearIdentityAssignments clears all "identity_assignments" edges to the PlatformIdentityRoleAssignment entity.
func (paruo *PlatformAppRoleUpdateOne) ClearIdentityAssignments() *PlatformAppRoleUpdateOne {
	paruo.mutation.ClearIdentityAssignments()
	return paruo
}

// RemoveIdentityAssignmentIDs removes the "identity_assignments" edge to PlatformIdentityRoleAssignment entities by IDs.
func (paruo *PlatformAppRoleUpdateOne) RemoveIdentityAssignmentIDs(ids ...int) *PlatformAppRoleUpdateOne {
	paruo.mutation.RemoveIdentityAssignmentIDs(ids...)
	return paruo
}

// RemoveIdentityAssignments removes "identity_assignments" edges to PlatformIdentityRoleAssignment entities.
func (paruo *PlatformAppRoleUpdateOne) RemoveIdentityAssignments(p ...*PlatformIdentityRoleAssignment) *PlatformAppRoleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return paruo.RemoveIdentityAssignmentIDs(ids...)
}

// ClearTokens clears all "tokens" edges to the PlatformToken entity.
func (paruo *PlatformAppRoleUpdateOne) ClearTokens() *PlatformAppRoleUpdateOne {
	paruo.mutation.ClearTokens()
	return paruo
}

// RemoveTokenIDs removes the "tokens" edge to PlatformToken entities by IDs.
func (paruo *PlatformAppRoleUpdateOne) RemoveTokenIDs(ids ...int) *PlatformAppRoleUpdateOne {
	paruo.mutation.RemoveTokenIDs(ids...)
	return paruo
}

// RemoveTokens removes "tokens" edges to PlatformToken entities.
func (paruo *PlatformAppRoleUpdateOne) RemoveTokens(p ...*PlatformToken) *PlatformAppRoleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return paruo.RemoveTokenIDs(ids...)
}

// Where appends a list predicates to the PlatformAppRoleUpdate builder.
func (paruo *PlatformAppRoleUpdateOne) Where(ps ...predicate.PlatformAppRole) *PlatformAppRoleUpdateOne {
	paruo.mutation.Where(ps...)
	return paruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (paruo *PlatformAppRoleUpdateOne) Select(field string, fields ...string) *PlatformAppRoleUpdateOne {
	paruo.fields = append([]string{field}, fields...)
	return paruo
}

// Save executes the query and returns the updated PlatformAppRole entity.
func (paruo *PlatformAppRoleUpdateOne) Save(ctx context.Context) (*PlatformAppRole, error) {
	paruo.defaults()
	return withHooks(ctx, paruo.sqlSave, paruo.mutation, paruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (paruo *PlatformAppRoleUpdateOne) SaveX(ctx context.Context) *PlatformAppRole {
	node, err := paruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (paruo *PlatformAppRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := paruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (paruo *PlatformAppRoleUpdateOne) ExecX(ctx context.Context) {
	if err := paruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (paruo *PlatformAppRoleUpdateOne) defaults() {
	if _, ok := paruo.mutation.UpdateTime(); !ok {
		v := platformapprole.UpdateDefaultUpdateTime()
		paruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (paruo *PlatformAppRoleUpdateOne) check() error {
	if v, ok := paruo.mutation.AppID(); ok {
		if err := platformapprole.AppIDValidator(v); err != nil {
			return &ValidationError{Name: "app_id", err: fmt.Errorf(`db: validator failed for field "PlatformAppRole.app_id": %w`, err)}
		}
	}
	if v, ok := paruo.mutation.Title(); ok {
		if err := platformapprole.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`db: validator failed for field "PlatformAppRole.title": %w`, err)}
		}
	}
	return nil
}

func (paruo *PlatformAppRoleUpdateOne) sqlSave(ctx context.Context) (_node *PlatformAppRole, err error) {
	if err := paruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(platformapprole.Table, platformapprole.Columns, sqlgraph.NewFieldSpec(platformapprole.FieldID, field.TypeInt))
	id, ok := paruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "PlatformAppRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := paruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, platformapprole.FieldID)
		for _, f := range fields {
			if !platformapprole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != platformapprole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := paruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := paruo.mutation.UpdateTime(); ok {
		_spec.SetField(platformapprole.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := paruo.mutation.AppID(); ok {
		_spec.SetField(platformapprole.FieldAppID, field.TypeString, value)
	}
	if value, ok := paruo.mutation.Title(); ok {
		_spec.SetField(platformapprole.FieldTitle, field.TypeString, value)
	}
	if value, ok := paruo.mutation.Description(); ok {
		_spec.SetField(platformapprole.FieldDescription, field.TypeString, value)
	}
	if paruo.mutation.DescriptionCleared() {
		_spec.ClearField(platformapprole.FieldDescription, field.TypeString)
	}
	if value, ok := paruo.mutation.Weight(); ok {
		_spec.SetField(platformapprole.FieldWeight, field.TypeInt, value)
	}
	if value, ok := paruo.mutation.AddedWeight(); ok {
		_spec.AddField(platformapprole.FieldWeight, field.TypeInt, value)
	}
	if value, ok := paruo.mutation.IsActive(); ok {
		_spec.SetField(platformapprole.FieldIsActive, field.TypeBool, value)
	}
	if paruo.mutation.UserAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformapprole.UserAssignmentsTable,
			Columns: []string{platformapprole.UserAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuserroleassignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := paruo.mutation.RemovedUserAssignmentsIDs(); len(nodes) > 0 && !paruo.mutation.UserAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformapprole.UserAssignmentsTable,
			Columns: []string{platformapprole.UserAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuserroleassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := paruo.mutation.UserAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformapprole.UserAssignmentsTable,
			Columns: []string{platformapprole.UserAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuserroleassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if paruo.mutation.IdentityAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformapprole.IdentityAssignmentsTable,
			Columns: []string{platformapprole.IdentityAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformidentityroleassignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := paruo.mutation.RemovedIdentityAssignmentsIDs(); len(nodes) > 0 && !paruo.mutation.IdentityAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformapprole.IdentityAssignmentsTable,
			Columns: []string{platformapprole.IdentityAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformidentityroleassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := paruo.mutation.IdentityAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformapprole.IdentityAssignmentsTable,
			Columns: []string{platformapprole.IdentityAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformidentityroleassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if paruo.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformapprole.TokensTable,
			Columns: []string{platformapprole.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformtoken.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := paruo.mutation.RemovedTokensIDs(); len(nodes) > 0 && !paruo.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformapprole.TokensTable,
			Columns: []string{platformapprole.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformtoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := paruo.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformapprole.TokensTable,
			Columns: []string{platformapprole.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformtoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlatformAppRole{config: paruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, paruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platformapprole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	paruo.mutation.done = true
	return _node, nil
}
