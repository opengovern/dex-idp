// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dexidp/dex/storage/ent/db/platformfederatedidentity"
	"github.com/dexidp/dex/storage/ent/db/platformuser"
)

// PlatformFederatedIdentity is the model entity for the PlatformFederatedIdentity schema.
type PlatformFederatedIdentity struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Identifier of the Dex connector used for authentication.
	ConnectorID string `json:"connector_id,omitempty"`
	// The unique User ID provided by the specific external connector (e.g., subject ID, username).
	FederatedUserID string `json:"federated_user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlatformFederatedIdentityQuery when eager-loading is set.
	Edges                              PlatformFederatedIdentityEdges `json:"edges"`
	platform_user_federated_identities *int
	selectValues                       sql.SelectValues
}

// PlatformFederatedIdentityEdges holds the relations/edges for other nodes in the graph.
type PlatformFederatedIdentityEdges struct {
	// User holds the value of the user edge.
	User *PlatformUser `json:"user,omitempty"`
	// Holds the individual application role assignments specific to this federated identity.
	RoleAssignments []*PlatformIdentityRoleAssignment `json:"role_assignments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlatformFederatedIdentityEdges) UserOrErr() (*PlatformUser, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: platformuser.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// RoleAssignmentsOrErr returns the RoleAssignments value or an error if the edge
// was not loaded in eager-loading.
func (e PlatformFederatedIdentityEdges) RoleAssignmentsOrErr() ([]*PlatformIdentityRoleAssignment, error) {
	if e.loadedTypes[1] {
		return e.RoleAssignments, nil
	}
	return nil, &NotLoadedError{edge: "role_assignments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlatformFederatedIdentity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case platformfederatedidentity.FieldID:
			values[i] = new(sql.NullInt64)
		case platformfederatedidentity.FieldConnectorID, platformfederatedidentity.FieldFederatedUserID:
			values[i] = new(sql.NullString)
		case platformfederatedidentity.FieldCreateTime, platformfederatedidentity.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case platformfederatedidentity.ForeignKeys[0]: // platform_user_federated_identities
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlatformFederatedIdentity fields.
func (pfi *PlatformFederatedIdentity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case platformfederatedidentity.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pfi.ID = int(value.Int64)
		case platformfederatedidentity.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pfi.CreateTime = value.Time
			}
		case platformfederatedidentity.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pfi.UpdateTime = value.Time
			}
		case platformfederatedidentity.FieldConnectorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field connector_id", values[i])
			} else if value.Valid {
				pfi.ConnectorID = value.String
			}
		case platformfederatedidentity.FieldFederatedUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field federated_user_id", values[i])
			} else if value.Valid {
				pfi.FederatedUserID = value.String
			}
		case platformfederatedidentity.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field platform_user_federated_identities", value)
			} else if value.Valid {
				pfi.platform_user_federated_identities = new(int)
				*pfi.platform_user_federated_identities = int(value.Int64)
			}
		default:
			pfi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PlatformFederatedIdentity.
// This includes values selected through modifiers, order, etc.
func (pfi *PlatformFederatedIdentity) Value(name string) (ent.Value, error) {
	return pfi.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the PlatformFederatedIdentity entity.
func (pfi *PlatformFederatedIdentity) QueryUser() *PlatformUserQuery {
	return NewPlatformFederatedIdentityClient(pfi.config).QueryUser(pfi)
}

// QueryRoleAssignments queries the "role_assignments" edge of the PlatformFederatedIdentity entity.
func (pfi *PlatformFederatedIdentity) QueryRoleAssignments() *PlatformIdentityRoleAssignmentQuery {
	return NewPlatformFederatedIdentityClient(pfi.config).QueryRoleAssignments(pfi)
}

// Update returns a builder for updating this PlatformFederatedIdentity.
// Note that you need to call PlatformFederatedIdentity.Unwrap() before calling this method if this PlatformFederatedIdentity
// was returned from a transaction, and the transaction was committed or rolled back.
func (pfi *PlatformFederatedIdentity) Update() *PlatformFederatedIdentityUpdateOne {
	return NewPlatformFederatedIdentityClient(pfi.config).UpdateOne(pfi)
}

// Unwrap unwraps the PlatformFederatedIdentity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pfi *PlatformFederatedIdentity) Unwrap() *PlatformFederatedIdentity {
	_tx, ok := pfi.config.driver.(*txDriver)
	if !ok {
		panic("db: PlatformFederatedIdentity is not a transactional entity")
	}
	pfi.config.driver = _tx.drv
	return pfi
}

// String implements the fmt.Stringer.
func (pfi *PlatformFederatedIdentity) String() string {
	var builder strings.Builder
	builder.WriteString("PlatformFederatedIdentity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pfi.ID))
	builder.WriteString("create_time=")
	builder.WriteString(pfi.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(pfi.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("connector_id=")
	builder.WriteString(pfi.ConnectorID)
	builder.WriteString(", ")
	builder.WriteString("federated_user_id=")
	builder.WriteString(pfi.FederatedUserID)
	builder.WriteByte(')')
	return builder.String()
}

// PlatformFederatedIdentities is a parsable slice of PlatformFederatedIdentity.
type PlatformFederatedIdentities []*PlatformFederatedIdentity
