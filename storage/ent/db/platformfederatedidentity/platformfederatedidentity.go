// Code generated by ent, DO NOT EDIT.

package platformfederatedidentity

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the platformfederatedidentity type in the database.
	Label = "platform_federated_identity"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldConnectorID holds the string denoting the connector_id field in the database.
	FieldConnectorID = "connector_id"
	// FieldConnectorSubject holds the string denoting the connector_subject field in the database.
	FieldConnectorSubject = "connector_subject"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeRoleAssignments holds the string denoting the role_assignments edge name in mutations.
	EdgeRoleAssignments = "role_assignments"
	// Table holds the table name of the platformfederatedidentity in the database.
	Table = "platform_federated_identities"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "platform_federated_identities"
	// UserInverseTable is the table name for the PlatformUser entity.
	// It exists in this package in order to avoid circular dependency with the "platformuser" package.
	UserInverseTable = "platform_users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "platform_user_federated_identities"
	// RoleAssignmentsTable is the table that holds the role_assignments relation/edge.
	RoleAssignmentsTable = "platform_identity_role_assignments"
	// RoleAssignmentsInverseTable is the table name for the PlatformIdentityRoleAssignment entity.
	// It exists in this package in order to avoid circular dependency with the "platformidentityroleassignment" package.
	RoleAssignmentsInverseTable = "platform_identity_role_assignments"
	// RoleAssignmentsColumn is the table column denoting the role_assignments relation/edge.
	RoleAssignmentsColumn = "platform_federated_identity_role_assignments"
)

// Columns holds all SQL columns for platformfederatedidentity fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldConnectorID,
	FieldConnectorSubject,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "platform_federated_identities"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"platform_user_federated_identities",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// ConnectorIDValidator is a validator for the "connector_id" field. It is called by the builders before save.
	ConnectorIDValidator func(string) error
	// ConnectorSubjectValidator is a validator for the "connector_subject" field. It is called by the builders before save.
	ConnectorSubjectValidator func(string) error
)

// OrderOption defines the ordering options for the PlatformFederatedIdentity queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByConnectorID orders the results by the connector_id field.
func ByConnectorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConnectorID, opts...).ToFunc()
}

// ByConnectorSubject orders the results by the connector_subject field.
func ByConnectorSubject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConnectorSubject, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByRoleAssignmentsCount orders the results by role_assignments count.
func ByRoleAssignmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRoleAssignmentsStep(), opts...)
	}
}

// ByRoleAssignments orders the results by role_assignments terms.
func ByRoleAssignments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoleAssignmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newRoleAssignmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoleAssignmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RoleAssignmentsTable, RoleAssignmentsColumn),
	)
}
