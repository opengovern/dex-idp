// Code generated by ent, DO NOT EDIT.

package platformfederatedidentity

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dexidp/dex/storage/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldEQ(FieldUpdateTime, v))
}

// ConnectorID applies equality check predicate on the "connector_id" field. It's identical to ConnectorIDEQ.
func ConnectorID(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldEQ(FieldConnectorID, v))
}

// FederatedUserID applies equality check predicate on the "federated_user_id" field. It's identical to FederatedUserIDEQ.
func FederatedUserID(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldEQ(FieldFederatedUserID, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldLTE(FieldUpdateTime, v))
}

// ConnectorIDEQ applies the EQ predicate on the "connector_id" field.
func ConnectorIDEQ(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldEQ(FieldConnectorID, v))
}

// ConnectorIDNEQ applies the NEQ predicate on the "connector_id" field.
func ConnectorIDNEQ(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldNEQ(FieldConnectorID, v))
}

// ConnectorIDIn applies the In predicate on the "connector_id" field.
func ConnectorIDIn(vs ...string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldIn(FieldConnectorID, vs...))
}

// ConnectorIDNotIn applies the NotIn predicate on the "connector_id" field.
func ConnectorIDNotIn(vs ...string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldNotIn(FieldConnectorID, vs...))
}

// ConnectorIDGT applies the GT predicate on the "connector_id" field.
func ConnectorIDGT(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldGT(FieldConnectorID, v))
}

// ConnectorIDGTE applies the GTE predicate on the "connector_id" field.
func ConnectorIDGTE(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldGTE(FieldConnectorID, v))
}

// ConnectorIDLT applies the LT predicate on the "connector_id" field.
func ConnectorIDLT(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldLT(FieldConnectorID, v))
}

// ConnectorIDLTE applies the LTE predicate on the "connector_id" field.
func ConnectorIDLTE(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldLTE(FieldConnectorID, v))
}

// ConnectorIDContains applies the Contains predicate on the "connector_id" field.
func ConnectorIDContains(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldContains(FieldConnectorID, v))
}

// ConnectorIDHasPrefix applies the HasPrefix predicate on the "connector_id" field.
func ConnectorIDHasPrefix(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldHasPrefix(FieldConnectorID, v))
}

// ConnectorIDHasSuffix applies the HasSuffix predicate on the "connector_id" field.
func ConnectorIDHasSuffix(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldHasSuffix(FieldConnectorID, v))
}

// ConnectorIDEqualFold applies the EqualFold predicate on the "connector_id" field.
func ConnectorIDEqualFold(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldEqualFold(FieldConnectorID, v))
}

// ConnectorIDContainsFold applies the ContainsFold predicate on the "connector_id" field.
func ConnectorIDContainsFold(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldContainsFold(FieldConnectorID, v))
}

// FederatedUserIDEQ applies the EQ predicate on the "federated_user_id" field.
func FederatedUserIDEQ(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldEQ(FieldFederatedUserID, v))
}

// FederatedUserIDNEQ applies the NEQ predicate on the "federated_user_id" field.
func FederatedUserIDNEQ(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldNEQ(FieldFederatedUserID, v))
}

// FederatedUserIDIn applies the In predicate on the "federated_user_id" field.
func FederatedUserIDIn(vs ...string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldIn(FieldFederatedUserID, vs...))
}

// FederatedUserIDNotIn applies the NotIn predicate on the "federated_user_id" field.
func FederatedUserIDNotIn(vs ...string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldNotIn(FieldFederatedUserID, vs...))
}

// FederatedUserIDGT applies the GT predicate on the "federated_user_id" field.
func FederatedUserIDGT(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldGT(FieldFederatedUserID, v))
}

// FederatedUserIDGTE applies the GTE predicate on the "federated_user_id" field.
func FederatedUserIDGTE(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldGTE(FieldFederatedUserID, v))
}

// FederatedUserIDLT applies the LT predicate on the "federated_user_id" field.
func FederatedUserIDLT(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldLT(FieldFederatedUserID, v))
}

// FederatedUserIDLTE applies the LTE predicate on the "federated_user_id" field.
func FederatedUserIDLTE(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldLTE(FieldFederatedUserID, v))
}

// FederatedUserIDContains applies the Contains predicate on the "federated_user_id" field.
func FederatedUserIDContains(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldContains(FieldFederatedUserID, v))
}

// FederatedUserIDHasPrefix applies the HasPrefix predicate on the "federated_user_id" field.
func FederatedUserIDHasPrefix(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldHasPrefix(FieldFederatedUserID, v))
}

// FederatedUserIDHasSuffix applies the HasSuffix predicate on the "federated_user_id" field.
func FederatedUserIDHasSuffix(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldHasSuffix(FieldFederatedUserID, v))
}

// FederatedUserIDEqualFold applies the EqualFold predicate on the "federated_user_id" field.
func FederatedUserIDEqualFold(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldEqualFold(FieldFederatedUserID, v))
}

// FederatedUserIDContainsFold applies the ContainsFold predicate on the "federated_user_id" field.
func FederatedUserIDContainsFold(v string) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.FieldContainsFold(FieldFederatedUserID, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.PlatformUser) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoleAssignments applies the HasEdge predicate on the "role_assignments" edge.
func HasRoleAssignments() predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RoleAssignmentsTable, RoleAssignmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleAssignmentsWith applies the HasEdge predicate on the "role_assignments" edge with a given conditions (other predicates).
func HasRoleAssignmentsWith(preds ...predicate.PlatformIdentityRoleAssignment) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(func(s *sql.Selector) {
		step := newRoleAssignmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PlatformFederatedIdentity) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PlatformFederatedIdentity) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PlatformFederatedIdentity) predicate.PlatformFederatedIdentity {
	return predicate.PlatformFederatedIdentity(sql.NotPredicates(p))
}
