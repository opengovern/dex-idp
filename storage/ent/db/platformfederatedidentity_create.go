// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dexidp/dex/storage/ent/db/platformfederatedidentity"
	"github.com/dexidp/dex/storage/ent/db/platformidentityroleassignment"
	"github.com/dexidp/dex/storage/ent/db/platformuser"
)

// PlatformFederatedIdentityCreate is the builder for creating a PlatformFederatedIdentity entity.
type PlatformFederatedIdentityCreate struct {
	config
	mutation *PlatformFederatedIdentityMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (pfic *PlatformFederatedIdentityCreate) SetCreateTime(t time.Time) *PlatformFederatedIdentityCreate {
	pfic.mutation.SetCreateTime(t)
	return pfic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pfic *PlatformFederatedIdentityCreate) SetNillableCreateTime(t *time.Time) *PlatformFederatedIdentityCreate {
	if t != nil {
		pfic.SetCreateTime(*t)
	}
	return pfic
}

// SetUpdateTime sets the "update_time" field.
func (pfic *PlatformFederatedIdentityCreate) SetUpdateTime(t time.Time) *PlatformFederatedIdentityCreate {
	pfic.mutation.SetUpdateTime(t)
	return pfic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pfic *PlatformFederatedIdentityCreate) SetNillableUpdateTime(t *time.Time) *PlatformFederatedIdentityCreate {
	if t != nil {
		pfic.SetUpdateTime(*t)
	}
	return pfic
}

// SetConnectorID sets the "connector_id" field.
func (pfic *PlatformFederatedIdentityCreate) SetConnectorID(s string) *PlatformFederatedIdentityCreate {
	pfic.mutation.SetConnectorID(s)
	return pfic
}

// SetFederatedUserID sets the "federated_user_id" field.
func (pfic *PlatformFederatedIdentityCreate) SetFederatedUserID(s string) *PlatformFederatedIdentityCreate {
	pfic.mutation.SetFederatedUserID(s)
	return pfic
}

// SetUserID sets the "user" edge to the PlatformUser entity by ID.
func (pfic *PlatformFederatedIdentityCreate) SetUserID(id int) *PlatformFederatedIdentityCreate {
	pfic.mutation.SetUserID(id)
	return pfic
}

// SetUser sets the "user" edge to the PlatformUser entity.
func (pfic *PlatformFederatedIdentityCreate) SetUser(p *PlatformUser) *PlatformFederatedIdentityCreate {
	return pfic.SetUserID(p.ID)
}

// AddRoleAssignmentIDs adds the "role_assignments" edge to the PlatformIdentityRoleAssignment entity by IDs.
func (pfic *PlatformFederatedIdentityCreate) AddRoleAssignmentIDs(ids ...int) *PlatformFederatedIdentityCreate {
	pfic.mutation.AddRoleAssignmentIDs(ids...)
	return pfic
}

// AddRoleAssignments adds the "role_assignments" edges to the PlatformIdentityRoleAssignment entity.
func (pfic *PlatformFederatedIdentityCreate) AddRoleAssignments(p ...*PlatformIdentityRoleAssignment) *PlatformFederatedIdentityCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfic.AddRoleAssignmentIDs(ids...)
}

// Mutation returns the PlatformFederatedIdentityMutation object of the builder.
func (pfic *PlatformFederatedIdentityCreate) Mutation() *PlatformFederatedIdentityMutation {
	return pfic.mutation
}

// Save creates the PlatformFederatedIdentity in the database.
func (pfic *PlatformFederatedIdentityCreate) Save(ctx context.Context) (*PlatformFederatedIdentity, error) {
	pfic.defaults()
	return withHooks(ctx, pfic.sqlSave, pfic.mutation, pfic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pfic *PlatformFederatedIdentityCreate) SaveX(ctx context.Context) *PlatformFederatedIdentity {
	v, err := pfic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pfic *PlatformFederatedIdentityCreate) Exec(ctx context.Context) error {
	_, err := pfic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfic *PlatformFederatedIdentityCreate) ExecX(ctx context.Context) {
	if err := pfic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfic *PlatformFederatedIdentityCreate) defaults() {
	if _, ok := pfic.mutation.CreateTime(); !ok {
		v := platformfederatedidentity.DefaultCreateTime()
		pfic.mutation.SetCreateTime(v)
	}
	if _, ok := pfic.mutation.UpdateTime(); !ok {
		v := platformfederatedidentity.DefaultUpdateTime()
		pfic.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfic *PlatformFederatedIdentityCreate) check() error {
	if _, ok := pfic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`db: missing required field "PlatformFederatedIdentity.create_time"`)}
	}
	if _, ok := pfic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`db: missing required field "PlatformFederatedIdentity.update_time"`)}
	}
	if _, ok := pfic.mutation.ConnectorID(); !ok {
		return &ValidationError{Name: "connector_id", err: errors.New(`db: missing required field "PlatformFederatedIdentity.connector_id"`)}
	}
	if v, ok := pfic.mutation.ConnectorID(); ok {
		if err := platformfederatedidentity.ConnectorIDValidator(v); err != nil {
			return &ValidationError{Name: "connector_id", err: fmt.Errorf(`db: validator failed for field "PlatformFederatedIdentity.connector_id": %w`, err)}
		}
	}
	if _, ok := pfic.mutation.FederatedUserID(); !ok {
		return &ValidationError{Name: "federated_user_id", err: errors.New(`db: missing required field "PlatformFederatedIdentity.federated_user_id"`)}
	}
	if v, ok := pfic.mutation.FederatedUserID(); ok {
		if err := platformfederatedidentity.FederatedUserIDValidator(v); err != nil {
			return &ValidationError{Name: "federated_user_id", err: fmt.Errorf(`db: validator failed for field "PlatformFederatedIdentity.federated_user_id": %w`, err)}
		}
	}
	if len(pfic.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`db: missing required edge "PlatformFederatedIdentity.user"`)}
	}
	return nil
}

func (pfic *PlatformFederatedIdentityCreate) sqlSave(ctx context.Context) (*PlatformFederatedIdentity, error) {
	if err := pfic.check(); err != nil {
		return nil, err
	}
	_node, _spec := pfic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pfic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pfic.mutation.id = &_node.ID
	pfic.mutation.done = true
	return _node, nil
}

func (pfic *PlatformFederatedIdentityCreate) createSpec() (*PlatformFederatedIdentity, *sqlgraph.CreateSpec) {
	var (
		_node = &PlatformFederatedIdentity{config: pfic.config}
		_spec = sqlgraph.NewCreateSpec(platformfederatedidentity.Table, sqlgraph.NewFieldSpec(platformfederatedidentity.FieldID, field.TypeInt))
	)
	if value, ok := pfic.mutation.CreateTime(); ok {
		_spec.SetField(platformfederatedidentity.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := pfic.mutation.UpdateTime(); ok {
		_spec.SetField(platformfederatedidentity.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := pfic.mutation.ConnectorID(); ok {
		_spec.SetField(platformfederatedidentity.FieldConnectorID, field.TypeString, value)
		_node.ConnectorID = value
	}
	if value, ok := pfic.mutation.FederatedUserID(); ok {
		_spec.SetField(platformfederatedidentity.FieldFederatedUserID, field.TypeString, value)
		_node.FederatedUserID = value
	}
	if nodes := pfic.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformfederatedidentity.UserTable,
			Columns: []string{platformfederatedidentity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.platform_user_federated_identities = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pfic.mutation.RoleAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformfederatedidentity.RoleAssignmentsTable,
			Columns: []string{platformfederatedidentity.RoleAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformidentityroleassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlatformFederatedIdentityCreateBulk is the builder for creating many PlatformFederatedIdentity entities in bulk.
type PlatformFederatedIdentityCreateBulk struct {
	config
	err      error
	builders []*PlatformFederatedIdentityCreate
}

// Save creates the PlatformFederatedIdentity entities in the database.
func (pficb *PlatformFederatedIdentityCreateBulk) Save(ctx context.Context) ([]*PlatformFederatedIdentity, error) {
	if pficb.err != nil {
		return nil, pficb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pficb.builders))
	nodes := make([]*PlatformFederatedIdentity, len(pficb.builders))
	mutators := make([]Mutator, len(pficb.builders))
	for i := range pficb.builders {
		func(i int, root context.Context) {
			builder := pficb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlatformFederatedIdentityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pficb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pficb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pficb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pficb *PlatformFederatedIdentityCreateBulk) SaveX(ctx context.Context) []*PlatformFederatedIdentity {
	v, err := pficb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pficb *PlatformFederatedIdentityCreateBulk) Exec(ctx context.Context) error {
	_, err := pficb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pficb *PlatformFederatedIdentityCreateBulk) ExecX(ctx context.Context) {
	if err := pficb.Exec(ctx); err != nil {
		panic(err)
	}
}
