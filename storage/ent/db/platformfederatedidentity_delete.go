// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dexidp/dex/storage/ent/db/platformfederatedidentity"
	"github.com/dexidp/dex/storage/ent/db/predicate"
)

// PlatformFederatedIdentityDelete is the builder for deleting a PlatformFederatedIdentity entity.
type PlatformFederatedIdentityDelete struct {
	config
	hooks    []Hook
	mutation *PlatformFederatedIdentityMutation
}

// Where appends a list predicates to the PlatformFederatedIdentityDelete builder.
func (pfid *PlatformFederatedIdentityDelete) Where(ps ...predicate.PlatformFederatedIdentity) *PlatformFederatedIdentityDelete {
	pfid.mutation.Where(ps...)
	return pfid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pfid *PlatformFederatedIdentityDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pfid.sqlExec, pfid.mutation, pfid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pfid *PlatformFederatedIdentityDelete) ExecX(ctx context.Context) int {
	n, err := pfid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pfid *PlatformFederatedIdentityDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(platformfederatedidentity.Table, sqlgraph.NewFieldSpec(platformfederatedidentity.FieldID, field.TypeInt))
	if ps := pfid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pfid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pfid.mutation.done = true
	return affected, err
}

// PlatformFederatedIdentityDeleteOne is the builder for deleting a single PlatformFederatedIdentity entity.
type PlatformFederatedIdentityDeleteOne struct {
	pfid *PlatformFederatedIdentityDelete
}

// Where appends a list predicates to the PlatformFederatedIdentityDelete builder.
func (pfido *PlatformFederatedIdentityDeleteOne) Where(ps ...predicate.PlatformFederatedIdentity) *PlatformFederatedIdentityDeleteOne {
	pfido.pfid.mutation.Where(ps...)
	return pfido
}

// Exec executes the deletion query.
func (pfido *PlatformFederatedIdentityDeleteOne) Exec(ctx context.Context) error {
	n, err := pfido.pfid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{platformfederatedidentity.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pfido *PlatformFederatedIdentityDeleteOne) ExecX(ctx context.Context) {
	if err := pfido.Exec(ctx); err != nil {
		panic(err)
	}
}
