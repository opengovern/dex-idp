// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dexidp/dex/storage/ent/db/platformfederatedidentity"
	"github.com/dexidp/dex/storage/ent/db/platformidentityroleassignment"
	"github.com/dexidp/dex/storage/ent/db/platformuser"
	"github.com/dexidp/dex/storage/ent/db/predicate"
)

// PlatformFederatedIdentityQuery is the builder for querying PlatformFederatedIdentity entities.
type PlatformFederatedIdentityQuery struct {
	config
	ctx                 *QueryContext
	order               []platformfederatedidentity.OrderOption
	inters              []Interceptor
	predicates          []predicate.PlatformFederatedIdentity
	withUser            *PlatformUserQuery
	withRoleAssignments *PlatformIdentityRoleAssignmentQuery
	withFKs             bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PlatformFederatedIdentityQuery builder.
func (pfiq *PlatformFederatedIdentityQuery) Where(ps ...predicate.PlatformFederatedIdentity) *PlatformFederatedIdentityQuery {
	pfiq.predicates = append(pfiq.predicates, ps...)
	return pfiq
}

// Limit the number of records to be returned by this query.
func (pfiq *PlatformFederatedIdentityQuery) Limit(limit int) *PlatformFederatedIdentityQuery {
	pfiq.ctx.Limit = &limit
	return pfiq
}

// Offset to start from.
func (pfiq *PlatformFederatedIdentityQuery) Offset(offset int) *PlatformFederatedIdentityQuery {
	pfiq.ctx.Offset = &offset
	return pfiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pfiq *PlatformFederatedIdentityQuery) Unique(unique bool) *PlatformFederatedIdentityQuery {
	pfiq.ctx.Unique = &unique
	return pfiq
}

// Order specifies how the records should be ordered.
func (pfiq *PlatformFederatedIdentityQuery) Order(o ...platformfederatedidentity.OrderOption) *PlatformFederatedIdentityQuery {
	pfiq.order = append(pfiq.order, o...)
	return pfiq
}

// QueryUser chains the current query on the "user" edge.
func (pfiq *PlatformFederatedIdentityQuery) QueryUser() *PlatformUserQuery {
	query := (&PlatformUserClient{config: pfiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pfiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pfiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(platformfederatedidentity.Table, platformfederatedidentity.FieldID, selector),
			sqlgraph.To(platformuser.Table, platformuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, platformfederatedidentity.UserTable, platformfederatedidentity.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(pfiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoleAssignments chains the current query on the "role_assignments" edge.
func (pfiq *PlatformFederatedIdentityQuery) QueryRoleAssignments() *PlatformIdentityRoleAssignmentQuery {
	query := (&PlatformIdentityRoleAssignmentClient{config: pfiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pfiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pfiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(platformfederatedidentity.Table, platformfederatedidentity.FieldID, selector),
			sqlgraph.To(platformidentityroleassignment.Table, platformidentityroleassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, platformfederatedidentity.RoleAssignmentsTable, platformfederatedidentity.RoleAssignmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pfiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PlatformFederatedIdentity entity from the query.
// Returns a *NotFoundError when no PlatformFederatedIdentity was found.
func (pfiq *PlatformFederatedIdentityQuery) First(ctx context.Context) (*PlatformFederatedIdentity, error) {
	nodes, err := pfiq.Limit(1).All(setContextOp(ctx, pfiq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{platformfederatedidentity.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pfiq *PlatformFederatedIdentityQuery) FirstX(ctx context.Context) *PlatformFederatedIdentity {
	node, err := pfiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PlatformFederatedIdentity ID from the query.
// Returns a *NotFoundError when no PlatformFederatedIdentity ID was found.
func (pfiq *PlatformFederatedIdentityQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pfiq.Limit(1).IDs(setContextOp(ctx, pfiq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{platformfederatedidentity.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pfiq *PlatformFederatedIdentityQuery) FirstIDX(ctx context.Context) int {
	id, err := pfiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PlatformFederatedIdentity entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PlatformFederatedIdentity entity is found.
// Returns a *NotFoundError when no PlatformFederatedIdentity entities are found.
func (pfiq *PlatformFederatedIdentityQuery) Only(ctx context.Context) (*PlatformFederatedIdentity, error) {
	nodes, err := pfiq.Limit(2).All(setContextOp(ctx, pfiq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{platformfederatedidentity.Label}
	default:
		return nil, &NotSingularError{platformfederatedidentity.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pfiq *PlatformFederatedIdentityQuery) OnlyX(ctx context.Context) *PlatformFederatedIdentity {
	node, err := pfiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PlatformFederatedIdentity ID in the query.
// Returns a *NotSingularError when more than one PlatformFederatedIdentity ID is found.
// Returns a *NotFoundError when no entities are found.
func (pfiq *PlatformFederatedIdentityQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pfiq.Limit(2).IDs(setContextOp(ctx, pfiq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{platformfederatedidentity.Label}
	default:
		err = &NotSingularError{platformfederatedidentity.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pfiq *PlatformFederatedIdentityQuery) OnlyIDX(ctx context.Context) int {
	id, err := pfiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PlatformFederatedIdentities.
func (pfiq *PlatformFederatedIdentityQuery) All(ctx context.Context) ([]*PlatformFederatedIdentity, error) {
	ctx = setContextOp(ctx, pfiq.ctx, ent.OpQueryAll)
	if err := pfiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PlatformFederatedIdentity, *PlatformFederatedIdentityQuery]()
	return withInterceptors[[]*PlatformFederatedIdentity](ctx, pfiq, qr, pfiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pfiq *PlatformFederatedIdentityQuery) AllX(ctx context.Context) []*PlatformFederatedIdentity {
	nodes, err := pfiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PlatformFederatedIdentity IDs.
func (pfiq *PlatformFederatedIdentityQuery) IDs(ctx context.Context) (ids []int, err error) {
	if pfiq.ctx.Unique == nil && pfiq.path != nil {
		pfiq.Unique(true)
	}
	ctx = setContextOp(ctx, pfiq.ctx, ent.OpQueryIDs)
	if err = pfiq.Select(platformfederatedidentity.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pfiq *PlatformFederatedIdentityQuery) IDsX(ctx context.Context) []int {
	ids, err := pfiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pfiq *PlatformFederatedIdentityQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pfiq.ctx, ent.OpQueryCount)
	if err := pfiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pfiq, querierCount[*PlatformFederatedIdentityQuery](), pfiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pfiq *PlatformFederatedIdentityQuery) CountX(ctx context.Context) int {
	count, err := pfiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pfiq *PlatformFederatedIdentityQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pfiq.ctx, ent.OpQueryExist)
	switch _, err := pfiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pfiq *PlatformFederatedIdentityQuery) ExistX(ctx context.Context) bool {
	exist, err := pfiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PlatformFederatedIdentityQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pfiq *PlatformFederatedIdentityQuery) Clone() *PlatformFederatedIdentityQuery {
	if pfiq == nil {
		return nil
	}
	return &PlatformFederatedIdentityQuery{
		config:              pfiq.config,
		ctx:                 pfiq.ctx.Clone(),
		order:               append([]platformfederatedidentity.OrderOption{}, pfiq.order...),
		inters:              append([]Interceptor{}, pfiq.inters...),
		predicates:          append([]predicate.PlatformFederatedIdentity{}, pfiq.predicates...),
		withUser:            pfiq.withUser.Clone(),
		withRoleAssignments: pfiq.withRoleAssignments.Clone(),
		// clone intermediate query.
		sql:  pfiq.sql.Clone(),
		path: pfiq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (pfiq *PlatformFederatedIdentityQuery) WithUser(opts ...func(*PlatformUserQuery)) *PlatformFederatedIdentityQuery {
	query := (&PlatformUserClient{config: pfiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pfiq.withUser = query
	return pfiq
}

// WithRoleAssignments tells the query-builder to eager-load the nodes that are connected to
// the "role_assignments" edge. The optional arguments are used to configure the query builder of the edge.
func (pfiq *PlatformFederatedIdentityQuery) WithRoleAssignments(opts ...func(*PlatformIdentityRoleAssignmentQuery)) *PlatformFederatedIdentityQuery {
	query := (&PlatformIdentityRoleAssignmentClient{config: pfiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pfiq.withRoleAssignments = query
	return pfiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PlatformFederatedIdentity.Query().
//		GroupBy(platformfederatedidentity.FieldCreateTime).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (pfiq *PlatformFederatedIdentityQuery) GroupBy(field string, fields ...string) *PlatformFederatedIdentityGroupBy {
	pfiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PlatformFederatedIdentityGroupBy{build: pfiq}
	grbuild.flds = &pfiq.ctx.Fields
	grbuild.label = platformfederatedidentity.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.PlatformFederatedIdentity.Query().
//		Select(platformfederatedidentity.FieldCreateTime).
//		Scan(ctx, &v)
func (pfiq *PlatformFederatedIdentityQuery) Select(fields ...string) *PlatformFederatedIdentitySelect {
	pfiq.ctx.Fields = append(pfiq.ctx.Fields, fields...)
	sbuild := &PlatformFederatedIdentitySelect{PlatformFederatedIdentityQuery: pfiq}
	sbuild.label = platformfederatedidentity.Label
	sbuild.flds, sbuild.scan = &pfiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PlatformFederatedIdentitySelect configured with the given aggregations.
func (pfiq *PlatformFederatedIdentityQuery) Aggregate(fns ...AggregateFunc) *PlatformFederatedIdentitySelect {
	return pfiq.Select().Aggregate(fns...)
}

func (pfiq *PlatformFederatedIdentityQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pfiq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pfiq); err != nil {
				return err
			}
		}
	}
	for _, f := range pfiq.ctx.Fields {
		if !platformfederatedidentity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if pfiq.path != nil {
		prev, err := pfiq.path(ctx)
		if err != nil {
			return err
		}
		pfiq.sql = prev
	}
	return nil
}

func (pfiq *PlatformFederatedIdentityQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PlatformFederatedIdentity, error) {
	var (
		nodes       = []*PlatformFederatedIdentity{}
		withFKs     = pfiq.withFKs
		_spec       = pfiq.querySpec()
		loadedTypes = [2]bool{
			pfiq.withUser != nil,
			pfiq.withRoleAssignments != nil,
		}
	)
	if pfiq.withUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, platformfederatedidentity.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PlatformFederatedIdentity).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PlatformFederatedIdentity{config: pfiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pfiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pfiq.withUser; query != nil {
		if err := pfiq.loadUser(ctx, query, nodes, nil,
			func(n *PlatformFederatedIdentity, e *PlatformUser) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := pfiq.withRoleAssignments; query != nil {
		if err := pfiq.loadRoleAssignments(ctx, query, nodes,
			func(n *PlatformFederatedIdentity) { n.Edges.RoleAssignments = []*PlatformIdentityRoleAssignment{} },
			func(n *PlatformFederatedIdentity, e *PlatformIdentityRoleAssignment) {
				n.Edges.RoleAssignments = append(n.Edges.RoleAssignments, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pfiq *PlatformFederatedIdentityQuery) loadUser(ctx context.Context, query *PlatformUserQuery, nodes []*PlatformFederatedIdentity, init func(*PlatformFederatedIdentity), assign func(*PlatformFederatedIdentity, *PlatformUser)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*PlatformFederatedIdentity)
	for i := range nodes {
		if nodes[i].platform_user_federated_identities == nil {
			continue
		}
		fk := *nodes[i].platform_user_federated_identities
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(platformuser.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "platform_user_federated_identities" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pfiq *PlatformFederatedIdentityQuery) loadRoleAssignments(ctx context.Context, query *PlatformIdentityRoleAssignmentQuery, nodes []*PlatformFederatedIdentity, init func(*PlatformFederatedIdentity), assign func(*PlatformFederatedIdentity, *PlatformIdentityRoleAssignment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PlatformFederatedIdentity)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PlatformIdentityRoleAssignment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(platformfederatedidentity.RoleAssignmentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.platform_federated_identity_role_assignments
		if fk == nil {
			return fmt.Errorf(`foreign-key "platform_federated_identity_role_assignments" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "platform_federated_identity_role_assignments" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pfiq *PlatformFederatedIdentityQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pfiq.querySpec()
	_spec.Node.Columns = pfiq.ctx.Fields
	if len(pfiq.ctx.Fields) > 0 {
		_spec.Unique = pfiq.ctx.Unique != nil && *pfiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pfiq.driver, _spec)
}

func (pfiq *PlatformFederatedIdentityQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(platformfederatedidentity.Table, platformfederatedidentity.Columns, sqlgraph.NewFieldSpec(platformfederatedidentity.FieldID, field.TypeInt))
	_spec.From = pfiq.sql
	if unique := pfiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pfiq.path != nil {
		_spec.Unique = true
	}
	if fields := pfiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, platformfederatedidentity.FieldID)
		for i := range fields {
			if fields[i] != platformfederatedidentity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pfiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pfiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pfiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pfiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pfiq *PlatformFederatedIdentityQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pfiq.driver.Dialect())
	t1 := builder.Table(platformfederatedidentity.Table)
	columns := pfiq.ctx.Fields
	if len(columns) == 0 {
		columns = platformfederatedidentity.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pfiq.sql != nil {
		selector = pfiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pfiq.ctx.Unique != nil && *pfiq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pfiq.predicates {
		p(selector)
	}
	for _, p := range pfiq.order {
		p(selector)
	}
	if offset := pfiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pfiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PlatformFederatedIdentityGroupBy is the group-by builder for PlatformFederatedIdentity entities.
type PlatformFederatedIdentityGroupBy struct {
	selector
	build *PlatformFederatedIdentityQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pfigb *PlatformFederatedIdentityGroupBy) Aggregate(fns ...AggregateFunc) *PlatformFederatedIdentityGroupBy {
	pfigb.fns = append(pfigb.fns, fns...)
	return pfigb
}

// Scan applies the selector query and scans the result into the given value.
func (pfigb *PlatformFederatedIdentityGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pfigb.build.ctx, ent.OpQueryGroupBy)
	if err := pfigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlatformFederatedIdentityQuery, *PlatformFederatedIdentityGroupBy](ctx, pfigb.build, pfigb, pfigb.build.inters, v)
}

func (pfigb *PlatformFederatedIdentityGroupBy) sqlScan(ctx context.Context, root *PlatformFederatedIdentityQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pfigb.fns))
	for _, fn := range pfigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pfigb.flds)+len(pfigb.fns))
		for _, f := range *pfigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pfigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pfigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PlatformFederatedIdentitySelect is the builder for selecting fields of PlatformFederatedIdentity entities.
type PlatformFederatedIdentitySelect struct {
	*PlatformFederatedIdentityQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pfis *PlatformFederatedIdentitySelect) Aggregate(fns ...AggregateFunc) *PlatformFederatedIdentitySelect {
	pfis.fns = append(pfis.fns, fns...)
	return pfis
}

// Scan applies the selector query and scans the result into the given value.
func (pfis *PlatformFederatedIdentitySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pfis.ctx, ent.OpQuerySelect)
	if err := pfis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlatformFederatedIdentityQuery, *PlatformFederatedIdentitySelect](ctx, pfis.PlatformFederatedIdentityQuery, pfis, pfis.inters, v)
}

func (pfis *PlatformFederatedIdentitySelect) sqlScan(ctx context.Context, root *PlatformFederatedIdentityQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pfis.fns))
	for _, fn := range pfis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pfis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pfis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
