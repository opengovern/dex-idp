// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dexidp/dex/storage/ent/db/platformfederatedidentity"
	"github.com/dexidp/dex/storage/ent/db/platformidentityroleassignment"
	"github.com/dexidp/dex/storage/ent/db/platformuser"
	"github.com/dexidp/dex/storage/ent/db/predicate"
)

// PlatformFederatedIdentityUpdate is the builder for updating PlatformFederatedIdentity entities.
type PlatformFederatedIdentityUpdate struct {
	config
	hooks    []Hook
	mutation *PlatformFederatedIdentityMutation
}

// Where appends a list predicates to the PlatformFederatedIdentityUpdate builder.
func (pfiu *PlatformFederatedIdentityUpdate) Where(ps ...predicate.PlatformFederatedIdentity) *PlatformFederatedIdentityUpdate {
	pfiu.mutation.Where(ps...)
	return pfiu
}

// SetUpdateTime sets the "update_time" field.
func (pfiu *PlatformFederatedIdentityUpdate) SetUpdateTime(t time.Time) *PlatformFederatedIdentityUpdate {
	pfiu.mutation.SetUpdateTime(t)
	return pfiu
}

// SetConnectorID sets the "connector_id" field.
func (pfiu *PlatformFederatedIdentityUpdate) SetConnectorID(s string) *PlatformFederatedIdentityUpdate {
	pfiu.mutation.SetConnectorID(s)
	return pfiu
}

// SetNillableConnectorID sets the "connector_id" field if the given value is not nil.
func (pfiu *PlatformFederatedIdentityUpdate) SetNillableConnectorID(s *string) *PlatformFederatedIdentityUpdate {
	if s != nil {
		pfiu.SetConnectorID(*s)
	}
	return pfiu
}

// SetFederatedUserID sets the "federated_user_id" field.
func (pfiu *PlatformFederatedIdentityUpdate) SetFederatedUserID(s string) *PlatformFederatedIdentityUpdate {
	pfiu.mutation.SetFederatedUserID(s)
	return pfiu
}

// SetNillableFederatedUserID sets the "federated_user_id" field if the given value is not nil.
func (pfiu *PlatformFederatedIdentityUpdate) SetNillableFederatedUserID(s *string) *PlatformFederatedIdentityUpdate {
	if s != nil {
		pfiu.SetFederatedUserID(*s)
	}
	return pfiu
}

// SetUserID sets the "user" edge to the PlatformUser entity by ID.
func (pfiu *PlatformFederatedIdentityUpdate) SetUserID(id int) *PlatformFederatedIdentityUpdate {
	pfiu.mutation.SetUserID(id)
	return pfiu
}

// SetUser sets the "user" edge to the PlatformUser entity.
func (pfiu *PlatformFederatedIdentityUpdate) SetUser(p *PlatformUser) *PlatformFederatedIdentityUpdate {
	return pfiu.SetUserID(p.ID)
}

// AddRoleAssignmentIDs adds the "role_assignments" edge to the PlatformIdentityRoleAssignment entity by IDs.
func (pfiu *PlatformFederatedIdentityUpdate) AddRoleAssignmentIDs(ids ...int) *PlatformFederatedIdentityUpdate {
	pfiu.mutation.AddRoleAssignmentIDs(ids...)
	return pfiu
}

// AddRoleAssignments adds the "role_assignments" edges to the PlatformIdentityRoleAssignment entity.
func (pfiu *PlatformFederatedIdentityUpdate) AddRoleAssignments(p ...*PlatformIdentityRoleAssignment) *PlatformFederatedIdentityUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfiu.AddRoleAssignmentIDs(ids...)
}

// Mutation returns the PlatformFederatedIdentityMutation object of the builder.
func (pfiu *PlatformFederatedIdentityUpdate) Mutation() *PlatformFederatedIdentityMutation {
	return pfiu.mutation
}

// ClearUser clears the "user" edge to the PlatformUser entity.
func (pfiu *PlatformFederatedIdentityUpdate) ClearUser() *PlatformFederatedIdentityUpdate {
	pfiu.mutation.ClearUser()
	return pfiu
}

// ClearRoleAssignments clears all "role_assignments" edges to the PlatformIdentityRoleAssignment entity.
func (pfiu *PlatformFederatedIdentityUpdate) ClearRoleAssignments() *PlatformFederatedIdentityUpdate {
	pfiu.mutation.ClearRoleAssignments()
	return pfiu
}

// RemoveRoleAssignmentIDs removes the "role_assignments" edge to PlatformIdentityRoleAssignment entities by IDs.
func (pfiu *PlatformFederatedIdentityUpdate) RemoveRoleAssignmentIDs(ids ...int) *PlatformFederatedIdentityUpdate {
	pfiu.mutation.RemoveRoleAssignmentIDs(ids...)
	return pfiu
}

// RemoveRoleAssignments removes "role_assignments" edges to PlatformIdentityRoleAssignment entities.
func (pfiu *PlatformFederatedIdentityUpdate) RemoveRoleAssignments(p ...*PlatformIdentityRoleAssignment) *PlatformFederatedIdentityUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfiu.RemoveRoleAssignmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pfiu *PlatformFederatedIdentityUpdate) Save(ctx context.Context) (int, error) {
	pfiu.defaults()
	return withHooks(ctx, pfiu.sqlSave, pfiu.mutation, pfiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pfiu *PlatformFederatedIdentityUpdate) SaveX(ctx context.Context) int {
	affected, err := pfiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pfiu *PlatformFederatedIdentityUpdate) Exec(ctx context.Context) error {
	_, err := pfiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfiu *PlatformFederatedIdentityUpdate) ExecX(ctx context.Context) {
	if err := pfiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfiu *PlatformFederatedIdentityUpdate) defaults() {
	if _, ok := pfiu.mutation.UpdateTime(); !ok {
		v := platformfederatedidentity.UpdateDefaultUpdateTime()
		pfiu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfiu *PlatformFederatedIdentityUpdate) check() error {
	if v, ok := pfiu.mutation.ConnectorID(); ok {
		if err := platformfederatedidentity.ConnectorIDValidator(v); err != nil {
			return &ValidationError{Name: "connector_id", err: fmt.Errorf(`db: validator failed for field "PlatformFederatedIdentity.connector_id": %w`, err)}
		}
	}
	if v, ok := pfiu.mutation.FederatedUserID(); ok {
		if err := platformfederatedidentity.FederatedUserIDValidator(v); err != nil {
			return &ValidationError{Name: "federated_user_id", err: fmt.Errorf(`db: validator failed for field "PlatformFederatedIdentity.federated_user_id": %w`, err)}
		}
	}
	if pfiu.mutation.UserCleared() && len(pfiu.mutation.UserIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "PlatformFederatedIdentity.user"`)
	}
	return nil
}

func (pfiu *PlatformFederatedIdentityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pfiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(platformfederatedidentity.Table, platformfederatedidentity.Columns, sqlgraph.NewFieldSpec(platformfederatedidentity.FieldID, field.TypeInt))
	if ps := pfiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfiu.mutation.UpdateTime(); ok {
		_spec.SetField(platformfederatedidentity.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := pfiu.mutation.ConnectorID(); ok {
		_spec.SetField(platformfederatedidentity.FieldConnectorID, field.TypeString, value)
	}
	if value, ok := pfiu.mutation.FederatedUserID(); ok {
		_spec.SetField(platformfederatedidentity.FieldFederatedUserID, field.TypeString, value)
	}
	if pfiu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformfederatedidentity.UserTable,
			Columns: []string{platformfederatedidentity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfiu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformfederatedidentity.UserTable,
			Columns: []string{platformfederatedidentity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfiu.mutation.RoleAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformfederatedidentity.RoleAssignmentsTable,
			Columns: []string{platformfederatedidentity.RoleAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformidentityroleassignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfiu.mutation.RemovedRoleAssignmentsIDs(); len(nodes) > 0 && !pfiu.mutation.RoleAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformfederatedidentity.RoleAssignmentsTable,
			Columns: []string{platformfederatedidentity.RoleAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformidentityroleassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfiu.mutation.RoleAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformfederatedidentity.RoleAssignmentsTable,
			Columns: []string{platformfederatedidentity.RoleAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformidentityroleassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pfiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platformfederatedidentity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pfiu.mutation.done = true
	return n, nil
}

// PlatformFederatedIdentityUpdateOne is the builder for updating a single PlatformFederatedIdentity entity.
type PlatformFederatedIdentityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlatformFederatedIdentityMutation
}

// SetUpdateTime sets the "update_time" field.
func (pfiuo *PlatformFederatedIdentityUpdateOne) SetUpdateTime(t time.Time) *PlatformFederatedIdentityUpdateOne {
	pfiuo.mutation.SetUpdateTime(t)
	return pfiuo
}

// SetConnectorID sets the "connector_id" field.
func (pfiuo *PlatformFederatedIdentityUpdateOne) SetConnectorID(s string) *PlatformFederatedIdentityUpdateOne {
	pfiuo.mutation.SetConnectorID(s)
	return pfiuo
}

// SetNillableConnectorID sets the "connector_id" field if the given value is not nil.
func (pfiuo *PlatformFederatedIdentityUpdateOne) SetNillableConnectorID(s *string) *PlatformFederatedIdentityUpdateOne {
	if s != nil {
		pfiuo.SetConnectorID(*s)
	}
	return pfiuo
}

// SetFederatedUserID sets the "federated_user_id" field.
func (pfiuo *PlatformFederatedIdentityUpdateOne) SetFederatedUserID(s string) *PlatformFederatedIdentityUpdateOne {
	pfiuo.mutation.SetFederatedUserID(s)
	return pfiuo
}

// SetNillableFederatedUserID sets the "federated_user_id" field if the given value is not nil.
func (pfiuo *PlatformFederatedIdentityUpdateOne) SetNillableFederatedUserID(s *string) *PlatformFederatedIdentityUpdateOne {
	if s != nil {
		pfiuo.SetFederatedUserID(*s)
	}
	return pfiuo
}

// SetUserID sets the "user" edge to the PlatformUser entity by ID.
func (pfiuo *PlatformFederatedIdentityUpdateOne) SetUserID(id int) *PlatformFederatedIdentityUpdateOne {
	pfiuo.mutation.SetUserID(id)
	return pfiuo
}

// SetUser sets the "user" edge to the PlatformUser entity.
func (pfiuo *PlatformFederatedIdentityUpdateOne) SetUser(p *PlatformUser) *PlatformFederatedIdentityUpdateOne {
	return pfiuo.SetUserID(p.ID)
}

// AddRoleAssignmentIDs adds the "role_assignments" edge to the PlatformIdentityRoleAssignment entity by IDs.
func (pfiuo *PlatformFederatedIdentityUpdateOne) AddRoleAssignmentIDs(ids ...int) *PlatformFederatedIdentityUpdateOne {
	pfiuo.mutation.AddRoleAssignmentIDs(ids...)
	return pfiuo
}

// AddRoleAssignments adds the "role_assignments" edges to the PlatformIdentityRoleAssignment entity.
func (pfiuo *PlatformFederatedIdentityUpdateOne) AddRoleAssignments(p ...*PlatformIdentityRoleAssignment) *PlatformFederatedIdentityUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfiuo.AddRoleAssignmentIDs(ids...)
}

// Mutation returns the PlatformFederatedIdentityMutation object of the builder.
func (pfiuo *PlatformFederatedIdentityUpdateOne) Mutation() *PlatformFederatedIdentityMutation {
	return pfiuo.mutation
}

// ClearUser clears the "user" edge to the PlatformUser entity.
func (pfiuo *PlatformFederatedIdentityUpdateOne) ClearUser() *PlatformFederatedIdentityUpdateOne {
	pfiuo.mutation.ClearUser()
	return pfiuo
}

// ClearRoleAssignments clears all "role_assignments" edges to the PlatformIdentityRoleAssignment entity.
func (pfiuo *PlatformFederatedIdentityUpdateOne) ClearRoleAssignments() *PlatformFederatedIdentityUpdateOne {
	pfiuo.mutation.ClearRoleAssignments()
	return pfiuo
}

// RemoveRoleAssignmentIDs removes the "role_assignments" edge to PlatformIdentityRoleAssignment entities by IDs.
func (pfiuo *PlatformFederatedIdentityUpdateOne) RemoveRoleAssignmentIDs(ids ...int) *PlatformFederatedIdentityUpdateOne {
	pfiuo.mutation.RemoveRoleAssignmentIDs(ids...)
	return pfiuo
}

// RemoveRoleAssignments removes "role_assignments" edges to PlatformIdentityRoleAssignment entities.
func (pfiuo *PlatformFederatedIdentityUpdateOne) RemoveRoleAssignments(p ...*PlatformIdentityRoleAssignment) *PlatformFederatedIdentityUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfiuo.RemoveRoleAssignmentIDs(ids...)
}

// Where appends a list predicates to the PlatformFederatedIdentityUpdate builder.
func (pfiuo *PlatformFederatedIdentityUpdateOne) Where(ps ...predicate.PlatformFederatedIdentity) *PlatformFederatedIdentityUpdateOne {
	pfiuo.mutation.Where(ps...)
	return pfiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pfiuo *PlatformFederatedIdentityUpdateOne) Select(field string, fields ...string) *PlatformFederatedIdentityUpdateOne {
	pfiuo.fields = append([]string{field}, fields...)
	return pfiuo
}

// Save executes the query and returns the updated PlatformFederatedIdentity entity.
func (pfiuo *PlatformFederatedIdentityUpdateOne) Save(ctx context.Context) (*PlatformFederatedIdentity, error) {
	pfiuo.defaults()
	return withHooks(ctx, pfiuo.sqlSave, pfiuo.mutation, pfiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pfiuo *PlatformFederatedIdentityUpdateOne) SaveX(ctx context.Context) *PlatformFederatedIdentity {
	node, err := pfiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pfiuo *PlatformFederatedIdentityUpdateOne) Exec(ctx context.Context) error {
	_, err := pfiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfiuo *PlatformFederatedIdentityUpdateOne) ExecX(ctx context.Context) {
	if err := pfiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfiuo *PlatformFederatedIdentityUpdateOne) defaults() {
	if _, ok := pfiuo.mutation.UpdateTime(); !ok {
		v := platformfederatedidentity.UpdateDefaultUpdateTime()
		pfiuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfiuo *PlatformFederatedIdentityUpdateOne) check() error {
	if v, ok := pfiuo.mutation.ConnectorID(); ok {
		if err := platformfederatedidentity.ConnectorIDValidator(v); err != nil {
			return &ValidationError{Name: "connector_id", err: fmt.Errorf(`db: validator failed for field "PlatformFederatedIdentity.connector_id": %w`, err)}
		}
	}
	if v, ok := pfiuo.mutation.FederatedUserID(); ok {
		if err := platformfederatedidentity.FederatedUserIDValidator(v); err != nil {
			return &ValidationError{Name: "federated_user_id", err: fmt.Errorf(`db: validator failed for field "PlatformFederatedIdentity.federated_user_id": %w`, err)}
		}
	}
	if pfiuo.mutation.UserCleared() && len(pfiuo.mutation.UserIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "PlatformFederatedIdentity.user"`)
	}
	return nil
}

func (pfiuo *PlatformFederatedIdentityUpdateOne) sqlSave(ctx context.Context) (_node *PlatformFederatedIdentity, err error) {
	if err := pfiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(platformfederatedidentity.Table, platformfederatedidentity.Columns, sqlgraph.NewFieldSpec(platformfederatedidentity.FieldID, field.TypeInt))
	id, ok := pfiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "PlatformFederatedIdentity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pfiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, platformfederatedidentity.FieldID)
		for _, f := range fields {
			if !platformfederatedidentity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != platformfederatedidentity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pfiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfiuo.mutation.UpdateTime(); ok {
		_spec.SetField(platformfederatedidentity.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := pfiuo.mutation.ConnectorID(); ok {
		_spec.SetField(platformfederatedidentity.FieldConnectorID, field.TypeString, value)
	}
	if value, ok := pfiuo.mutation.FederatedUserID(); ok {
		_spec.SetField(platformfederatedidentity.FieldFederatedUserID, field.TypeString, value)
	}
	if pfiuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformfederatedidentity.UserTable,
			Columns: []string{platformfederatedidentity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfiuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformfederatedidentity.UserTable,
			Columns: []string{platformfederatedidentity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfiuo.mutation.RoleAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformfederatedidentity.RoleAssignmentsTable,
			Columns: []string{platformfederatedidentity.RoleAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformidentityroleassignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfiuo.mutation.RemovedRoleAssignmentsIDs(); len(nodes) > 0 && !pfiuo.mutation.RoleAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformfederatedidentity.RoleAssignmentsTable,
			Columns: []string{platformfederatedidentity.RoleAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformidentityroleassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfiuo.mutation.RoleAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformfederatedidentity.RoleAssignmentsTable,
			Columns: []string{platformfederatedidentity.RoleAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformidentityroleassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlatformFederatedIdentity{config: pfiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pfiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platformfederatedidentity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pfiuo.mutation.done = true
	return _node, nil
}
