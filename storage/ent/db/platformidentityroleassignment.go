// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dexidp/dex/storage/ent/db/platformapprole"
	"github.com/dexidp/dex/storage/ent/db/platformfederatedidentity"
	"github.com/dexidp/dex/storage/ent/db/platformidentityroleassignment"
)

// PlatformIdentityRoleAssignment is the model entity for the PlatformIdentityRoleAssignment schema.
type PlatformIdentityRoleAssignment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Indicates if this specific role assignment instance is currently active.
	IsActive bool `json:"is_active,omitempty"`
	// Timestamp when the role was initially assigned to the federated identity.
	AssignedAt time.Time `json:"assigned_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlatformIdentityRoleAssignmentQuery when eager-loading is set.
	Edges                                        PlatformIdentityRoleAssignmentEdges `json:"edges"`
	platform_app_role_identity_assignments       *int
	platform_federated_identity_role_assignments *int
	selectValues                                 sql.SelectValues
}

// PlatformIdentityRoleAssignmentEdges holds the relations/edges for other nodes in the graph.
type PlatformIdentityRoleAssignmentEdges struct {
	// Identity holds the value of the identity edge.
	Identity *PlatformFederatedIdentity `json:"identity,omitempty"`
	// Role holds the value of the role edge.
	Role *PlatformAppRole `json:"role,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// IdentityOrErr returns the Identity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlatformIdentityRoleAssignmentEdges) IdentityOrErr() (*PlatformFederatedIdentity, error) {
	if e.Identity != nil {
		return e.Identity, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: platformfederatedidentity.Label}
	}
	return nil, &NotLoadedError{edge: "identity"}
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlatformIdentityRoleAssignmentEdges) RoleOrErr() (*PlatformAppRole, error) {
	if e.Role != nil {
		return e.Role, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: platformapprole.Label}
	}
	return nil, &NotLoadedError{edge: "role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlatformIdentityRoleAssignment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case platformidentityroleassignment.FieldIsActive:
			values[i] = new(sql.NullBool)
		case platformidentityroleassignment.FieldID:
			values[i] = new(sql.NullInt64)
		case platformidentityroleassignment.FieldUpdateTime, platformidentityroleassignment.FieldAssignedAt:
			values[i] = new(sql.NullTime)
		case platformidentityroleassignment.ForeignKeys[0]: // platform_app_role_identity_assignments
			values[i] = new(sql.NullInt64)
		case platformidentityroleassignment.ForeignKeys[1]: // platform_federated_identity_role_assignments
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlatformIdentityRoleAssignment fields.
func (pira *PlatformIdentityRoleAssignment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case platformidentityroleassignment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pira.ID = int(value.Int64)
		case platformidentityroleassignment.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pira.UpdateTime = value.Time
			}
		case platformidentityroleassignment.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				pira.IsActive = value.Bool
			}
		case platformidentityroleassignment.FieldAssignedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field assigned_at", values[i])
			} else if value.Valid {
				pira.AssignedAt = value.Time
			}
		case platformidentityroleassignment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field platform_app_role_identity_assignments", value)
			} else if value.Valid {
				pira.platform_app_role_identity_assignments = new(int)
				*pira.platform_app_role_identity_assignments = int(value.Int64)
			}
		case platformidentityroleassignment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field platform_federated_identity_role_assignments", value)
			} else if value.Valid {
				pira.platform_federated_identity_role_assignments = new(int)
				*pira.platform_federated_identity_role_assignments = int(value.Int64)
			}
		default:
			pira.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PlatformIdentityRoleAssignment.
// This includes values selected through modifiers, order, etc.
func (pira *PlatformIdentityRoleAssignment) Value(name string) (ent.Value, error) {
	return pira.selectValues.Get(name)
}

// QueryIdentity queries the "identity" edge of the PlatformIdentityRoleAssignment entity.
func (pira *PlatformIdentityRoleAssignment) QueryIdentity() *PlatformFederatedIdentityQuery {
	return NewPlatformIdentityRoleAssignmentClient(pira.config).QueryIdentity(pira)
}

// QueryRole queries the "role" edge of the PlatformIdentityRoleAssignment entity.
func (pira *PlatformIdentityRoleAssignment) QueryRole() *PlatformAppRoleQuery {
	return NewPlatformIdentityRoleAssignmentClient(pira.config).QueryRole(pira)
}

// Update returns a builder for updating this PlatformIdentityRoleAssignment.
// Note that you need to call PlatformIdentityRoleAssignment.Unwrap() before calling this method if this PlatformIdentityRoleAssignment
// was returned from a transaction, and the transaction was committed or rolled back.
func (pira *PlatformIdentityRoleAssignment) Update() *PlatformIdentityRoleAssignmentUpdateOne {
	return NewPlatformIdentityRoleAssignmentClient(pira.config).UpdateOne(pira)
}

// Unwrap unwraps the PlatformIdentityRoleAssignment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pira *PlatformIdentityRoleAssignment) Unwrap() *PlatformIdentityRoleAssignment {
	_tx, ok := pira.config.driver.(*txDriver)
	if !ok {
		panic("db: PlatformIdentityRoleAssignment is not a transactional entity")
	}
	pira.config.driver = _tx.drv
	return pira
}

// String implements the fmt.Stringer.
func (pira *PlatformIdentityRoleAssignment) String() string {
	var builder strings.Builder
	builder.WriteString("PlatformIdentityRoleAssignment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pira.ID))
	builder.WriteString("update_time=")
	builder.WriteString(pira.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", pira.IsActive))
	builder.WriteString(", ")
	builder.WriteString("assigned_at=")
	builder.WriteString(pira.AssignedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PlatformIdentityRoleAssignments is a parsable slice of PlatformIdentityRoleAssignment.
type PlatformIdentityRoleAssignments []*PlatformIdentityRoleAssignment
