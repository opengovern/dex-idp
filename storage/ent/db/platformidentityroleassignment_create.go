// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dexidp/dex/storage/ent/db/platformapprole"
	"github.com/dexidp/dex/storage/ent/db/platformfederatedidentity"
	"github.com/dexidp/dex/storage/ent/db/platformidentityroleassignment"
)

// PlatformIdentityRoleAssignmentCreate is the builder for creating a PlatformIdentityRoleAssignment entity.
type PlatformIdentityRoleAssignmentCreate struct {
	config
	mutation *PlatformIdentityRoleAssignmentMutation
	hooks    []Hook
}

// SetUpdateTime sets the "update_time" field.
func (pirac *PlatformIdentityRoleAssignmentCreate) SetUpdateTime(t time.Time) *PlatformIdentityRoleAssignmentCreate {
	pirac.mutation.SetUpdateTime(t)
	return pirac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pirac *PlatformIdentityRoleAssignmentCreate) SetNillableUpdateTime(t *time.Time) *PlatformIdentityRoleAssignmentCreate {
	if t != nil {
		pirac.SetUpdateTime(*t)
	}
	return pirac
}

// SetIsActive sets the "is_active" field.
func (pirac *PlatformIdentityRoleAssignmentCreate) SetIsActive(b bool) *PlatformIdentityRoleAssignmentCreate {
	pirac.mutation.SetIsActive(b)
	return pirac
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pirac *PlatformIdentityRoleAssignmentCreate) SetNillableIsActive(b *bool) *PlatformIdentityRoleAssignmentCreate {
	if b != nil {
		pirac.SetIsActive(*b)
	}
	return pirac
}

// SetAssignedAt sets the "assigned_at" field.
func (pirac *PlatformIdentityRoleAssignmentCreate) SetAssignedAt(t time.Time) *PlatformIdentityRoleAssignmentCreate {
	pirac.mutation.SetAssignedAt(t)
	return pirac
}

// SetNillableAssignedAt sets the "assigned_at" field if the given value is not nil.
func (pirac *PlatformIdentityRoleAssignmentCreate) SetNillableAssignedAt(t *time.Time) *PlatformIdentityRoleAssignmentCreate {
	if t != nil {
		pirac.SetAssignedAt(*t)
	}
	return pirac
}

// SetIdentityID sets the "identity" edge to the PlatformFederatedIdentity entity by ID.
func (pirac *PlatformIdentityRoleAssignmentCreate) SetIdentityID(id int) *PlatformIdentityRoleAssignmentCreate {
	pirac.mutation.SetIdentityID(id)
	return pirac
}

// SetIdentity sets the "identity" edge to the PlatformFederatedIdentity entity.
func (pirac *PlatformIdentityRoleAssignmentCreate) SetIdentity(p *PlatformFederatedIdentity) *PlatformIdentityRoleAssignmentCreate {
	return pirac.SetIdentityID(p.ID)
}

// SetRoleID sets the "role" edge to the PlatformAppRole entity by ID.
func (pirac *PlatformIdentityRoleAssignmentCreate) SetRoleID(id int) *PlatformIdentityRoleAssignmentCreate {
	pirac.mutation.SetRoleID(id)
	return pirac
}

// SetRole sets the "role" edge to the PlatformAppRole entity.
func (pirac *PlatformIdentityRoleAssignmentCreate) SetRole(p *PlatformAppRole) *PlatformIdentityRoleAssignmentCreate {
	return pirac.SetRoleID(p.ID)
}

// Mutation returns the PlatformIdentityRoleAssignmentMutation object of the builder.
func (pirac *PlatformIdentityRoleAssignmentCreate) Mutation() *PlatformIdentityRoleAssignmentMutation {
	return pirac.mutation
}

// Save creates the PlatformIdentityRoleAssignment in the database.
func (pirac *PlatformIdentityRoleAssignmentCreate) Save(ctx context.Context) (*PlatformIdentityRoleAssignment, error) {
	pirac.defaults()
	return withHooks(ctx, pirac.sqlSave, pirac.mutation, pirac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pirac *PlatformIdentityRoleAssignmentCreate) SaveX(ctx context.Context) *PlatformIdentityRoleAssignment {
	v, err := pirac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pirac *PlatformIdentityRoleAssignmentCreate) Exec(ctx context.Context) error {
	_, err := pirac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pirac *PlatformIdentityRoleAssignmentCreate) ExecX(ctx context.Context) {
	if err := pirac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pirac *PlatformIdentityRoleAssignmentCreate) defaults() {
	if _, ok := pirac.mutation.UpdateTime(); !ok {
		v := platformidentityroleassignment.DefaultUpdateTime()
		pirac.mutation.SetUpdateTime(v)
	}
	if _, ok := pirac.mutation.IsActive(); !ok {
		v := platformidentityroleassignment.DefaultIsActive
		pirac.mutation.SetIsActive(v)
	}
	if _, ok := pirac.mutation.AssignedAt(); !ok {
		v := platformidentityroleassignment.DefaultAssignedAt()
		pirac.mutation.SetAssignedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pirac *PlatformIdentityRoleAssignmentCreate) check() error {
	if _, ok := pirac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`db: missing required field "PlatformIdentityRoleAssignment.update_time"`)}
	}
	if _, ok := pirac.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`db: missing required field "PlatformIdentityRoleAssignment.is_active"`)}
	}
	if _, ok := pirac.mutation.AssignedAt(); !ok {
		return &ValidationError{Name: "assigned_at", err: errors.New(`db: missing required field "PlatformIdentityRoleAssignment.assigned_at"`)}
	}
	if len(pirac.mutation.IdentityIDs()) == 0 {
		return &ValidationError{Name: "identity", err: errors.New(`db: missing required edge "PlatformIdentityRoleAssignment.identity"`)}
	}
	if len(pirac.mutation.RoleIDs()) == 0 {
		return &ValidationError{Name: "role", err: errors.New(`db: missing required edge "PlatformIdentityRoleAssignment.role"`)}
	}
	return nil
}

func (pirac *PlatformIdentityRoleAssignmentCreate) sqlSave(ctx context.Context) (*PlatformIdentityRoleAssignment, error) {
	if err := pirac.check(); err != nil {
		return nil, err
	}
	_node, _spec := pirac.createSpec()
	if err := sqlgraph.CreateNode(ctx, pirac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pirac.mutation.id = &_node.ID
	pirac.mutation.done = true
	return _node, nil
}

func (pirac *PlatformIdentityRoleAssignmentCreate) createSpec() (*PlatformIdentityRoleAssignment, *sqlgraph.CreateSpec) {
	var (
		_node = &PlatformIdentityRoleAssignment{config: pirac.config}
		_spec = sqlgraph.NewCreateSpec(platformidentityroleassignment.Table, sqlgraph.NewFieldSpec(platformidentityroleassignment.FieldID, field.TypeInt))
	)
	if value, ok := pirac.mutation.UpdateTime(); ok {
		_spec.SetField(platformidentityroleassignment.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := pirac.mutation.IsActive(); ok {
		_spec.SetField(platformidentityroleassignment.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := pirac.mutation.AssignedAt(); ok {
		_spec.SetField(platformidentityroleassignment.FieldAssignedAt, field.TypeTime, value)
		_node.AssignedAt = value
	}
	if nodes := pirac.mutation.IdentityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformidentityroleassignment.IdentityTable,
			Columns: []string{platformidentityroleassignment.IdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformfederatedidentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.platform_federated_identity_role_assignments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pirac.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformidentityroleassignment.RoleTable,
			Columns: []string{platformidentityroleassignment.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformapprole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.platform_app_role_identity_assignments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlatformIdentityRoleAssignmentCreateBulk is the builder for creating many PlatformIdentityRoleAssignment entities in bulk.
type PlatformIdentityRoleAssignmentCreateBulk struct {
	config
	err      error
	builders []*PlatformIdentityRoleAssignmentCreate
}

// Save creates the PlatformIdentityRoleAssignment entities in the database.
func (piracb *PlatformIdentityRoleAssignmentCreateBulk) Save(ctx context.Context) ([]*PlatformIdentityRoleAssignment, error) {
	if piracb.err != nil {
		return nil, piracb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(piracb.builders))
	nodes := make([]*PlatformIdentityRoleAssignment, len(piracb.builders))
	mutators := make([]Mutator, len(piracb.builders))
	for i := range piracb.builders {
		func(i int, root context.Context) {
			builder := piracb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlatformIdentityRoleAssignmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, piracb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, piracb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, piracb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (piracb *PlatformIdentityRoleAssignmentCreateBulk) SaveX(ctx context.Context) []*PlatformIdentityRoleAssignment {
	v, err := piracb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (piracb *PlatformIdentityRoleAssignmentCreateBulk) Exec(ctx context.Context) error {
	_, err := piracb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piracb *PlatformIdentityRoleAssignmentCreateBulk) ExecX(ctx context.Context) {
	if err := piracb.Exec(ctx); err != nil {
		panic(err)
	}
}
