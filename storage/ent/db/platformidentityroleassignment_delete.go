// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dexidp/dex/storage/ent/db/platformidentityroleassignment"
	"github.com/dexidp/dex/storage/ent/db/predicate"
)

// PlatformIdentityRoleAssignmentDelete is the builder for deleting a PlatformIdentityRoleAssignment entity.
type PlatformIdentityRoleAssignmentDelete struct {
	config
	hooks    []Hook
	mutation *PlatformIdentityRoleAssignmentMutation
}

// Where appends a list predicates to the PlatformIdentityRoleAssignmentDelete builder.
func (pirad *PlatformIdentityRoleAssignmentDelete) Where(ps ...predicate.PlatformIdentityRoleAssignment) *PlatformIdentityRoleAssignmentDelete {
	pirad.mutation.Where(ps...)
	return pirad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pirad *PlatformIdentityRoleAssignmentDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pirad.sqlExec, pirad.mutation, pirad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pirad *PlatformIdentityRoleAssignmentDelete) ExecX(ctx context.Context) int {
	n, err := pirad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pirad *PlatformIdentityRoleAssignmentDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(platformidentityroleassignment.Table, sqlgraph.NewFieldSpec(platformidentityroleassignment.FieldID, field.TypeInt))
	if ps := pirad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pirad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pirad.mutation.done = true
	return affected, err
}

// PlatformIdentityRoleAssignmentDeleteOne is the builder for deleting a single PlatformIdentityRoleAssignment entity.
type PlatformIdentityRoleAssignmentDeleteOne struct {
	pirad *PlatformIdentityRoleAssignmentDelete
}

// Where appends a list predicates to the PlatformIdentityRoleAssignmentDelete builder.
func (pirado *PlatformIdentityRoleAssignmentDeleteOne) Where(ps ...predicate.PlatformIdentityRoleAssignment) *PlatformIdentityRoleAssignmentDeleteOne {
	pirado.pirad.mutation.Where(ps...)
	return pirado
}

// Exec executes the deletion query.
func (pirado *PlatformIdentityRoleAssignmentDeleteOne) Exec(ctx context.Context) error {
	n, err := pirado.pirad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{platformidentityroleassignment.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pirado *PlatformIdentityRoleAssignmentDeleteOne) ExecX(ctx context.Context) {
	if err := pirado.Exec(ctx); err != nil {
		panic(err)
	}
}
