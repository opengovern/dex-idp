// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dexidp/dex/storage/ent/db/platformapprole"
	"github.com/dexidp/dex/storage/ent/db/platformfederatedidentity"
	"github.com/dexidp/dex/storage/ent/db/platformidentityroleassignment"
	"github.com/dexidp/dex/storage/ent/db/predicate"
)

// PlatformIdentityRoleAssignmentUpdate is the builder for updating PlatformIdentityRoleAssignment entities.
type PlatformIdentityRoleAssignmentUpdate struct {
	config
	hooks    []Hook
	mutation *PlatformIdentityRoleAssignmentMutation
}

// Where appends a list predicates to the PlatformIdentityRoleAssignmentUpdate builder.
func (pirau *PlatformIdentityRoleAssignmentUpdate) Where(ps ...predicate.PlatformIdentityRoleAssignment) *PlatformIdentityRoleAssignmentUpdate {
	pirau.mutation.Where(ps...)
	return pirau
}

// SetUpdateTime sets the "update_time" field.
func (pirau *PlatformIdentityRoleAssignmentUpdate) SetUpdateTime(t time.Time) *PlatformIdentityRoleAssignmentUpdate {
	pirau.mutation.SetUpdateTime(t)
	return pirau
}

// SetIsActive sets the "is_active" field.
func (pirau *PlatformIdentityRoleAssignmentUpdate) SetIsActive(b bool) *PlatformIdentityRoleAssignmentUpdate {
	pirau.mutation.SetIsActive(b)
	return pirau
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pirau *PlatformIdentityRoleAssignmentUpdate) SetNillableIsActive(b *bool) *PlatformIdentityRoleAssignmentUpdate {
	if b != nil {
		pirau.SetIsActive(*b)
	}
	return pirau
}

// SetIdentityID sets the "identity" edge to the PlatformFederatedIdentity entity by ID.
func (pirau *PlatformIdentityRoleAssignmentUpdate) SetIdentityID(id int) *PlatformIdentityRoleAssignmentUpdate {
	pirau.mutation.SetIdentityID(id)
	return pirau
}

// SetIdentity sets the "identity" edge to the PlatformFederatedIdentity entity.
func (pirau *PlatformIdentityRoleAssignmentUpdate) SetIdentity(p *PlatformFederatedIdentity) *PlatformIdentityRoleAssignmentUpdate {
	return pirau.SetIdentityID(p.ID)
}

// SetRoleID sets the "role" edge to the PlatformAppRole entity by ID.
func (pirau *PlatformIdentityRoleAssignmentUpdate) SetRoleID(id int) *PlatformIdentityRoleAssignmentUpdate {
	pirau.mutation.SetRoleID(id)
	return pirau
}

// SetRole sets the "role" edge to the PlatformAppRole entity.
func (pirau *PlatformIdentityRoleAssignmentUpdate) SetRole(p *PlatformAppRole) *PlatformIdentityRoleAssignmentUpdate {
	return pirau.SetRoleID(p.ID)
}

// Mutation returns the PlatformIdentityRoleAssignmentMutation object of the builder.
func (pirau *PlatformIdentityRoleAssignmentUpdate) Mutation() *PlatformIdentityRoleAssignmentMutation {
	return pirau.mutation
}

// ClearIdentity clears the "identity" edge to the PlatformFederatedIdentity entity.
func (pirau *PlatformIdentityRoleAssignmentUpdate) ClearIdentity() *PlatformIdentityRoleAssignmentUpdate {
	pirau.mutation.ClearIdentity()
	return pirau
}

// ClearRole clears the "role" edge to the PlatformAppRole entity.
func (pirau *PlatformIdentityRoleAssignmentUpdate) ClearRole() *PlatformIdentityRoleAssignmentUpdate {
	pirau.mutation.ClearRole()
	return pirau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pirau *PlatformIdentityRoleAssignmentUpdate) Save(ctx context.Context) (int, error) {
	pirau.defaults()
	return withHooks(ctx, pirau.sqlSave, pirau.mutation, pirau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pirau *PlatformIdentityRoleAssignmentUpdate) SaveX(ctx context.Context) int {
	affected, err := pirau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pirau *PlatformIdentityRoleAssignmentUpdate) Exec(ctx context.Context) error {
	_, err := pirau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pirau *PlatformIdentityRoleAssignmentUpdate) ExecX(ctx context.Context) {
	if err := pirau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pirau *PlatformIdentityRoleAssignmentUpdate) defaults() {
	if _, ok := pirau.mutation.UpdateTime(); !ok {
		v := platformidentityroleassignment.UpdateDefaultUpdateTime()
		pirau.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pirau *PlatformIdentityRoleAssignmentUpdate) check() error {
	if pirau.mutation.IdentityCleared() && len(pirau.mutation.IdentityIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "PlatformIdentityRoleAssignment.identity"`)
	}
	if pirau.mutation.RoleCleared() && len(pirau.mutation.RoleIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "PlatformIdentityRoleAssignment.role"`)
	}
	return nil
}

func (pirau *PlatformIdentityRoleAssignmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pirau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(platformidentityroleassignment.Table, platformidentityroleassignment.Columns, sqlgraph.NewFieldSpec(platformidentityroleassignment.FieldID, field.TypeInt))
	if ps := pirau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pirau.mutation.UpdateTime(); ok {
		_spec.SetField(platformidentityroleassignment.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := pirau.mutation.IsActive(); ok {
		_spec.SetField(platformidentityroleassignment.FieldIsActive, field.TypeBool, value)
	}
	if pirau.mutation.IdentityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformidentityroleassignment.IdentityTable,
			Columns: []string{platformidentityroleassignment.IdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformfederatedidentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pirau.mutation.IdentityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformidentityroleassignment.IdentityTable,
			Columns: []string{platformidentityroleassignment.IdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformfederatedidentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pirau.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformidentityroleassignment.RoleTable,
			Columns: []string{platformidentityroleassignment.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformapprole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pirau.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformidentityroleassignment.RoleTable,
			Columns: []string{platformidentityroleassignment.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformapprole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pirau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platformidentityroleassignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pirau.mutation.done = true
	return n, nil
}

// PlatformIdentityRoleAssignmentUpdateOne is the builder for updating a single PlatformIdentityRoleAssignment entity.
type PlatformIdentityRoleAssignmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlatformIdentityRoleAssignmentMutation
}

// SetUpdateTime sets the "update_time" field.
func (pirauo *PlatformIdentityRoleAssignmentUpdateOne) SetUpdateTime(t time.Time) *PlatformIdentityRoleAssignmentUpdateOne {
	pirauo.mutation.SetUpdateTime(t)
	return pirauo
}

// SetIsActive sets the "is_active" field.
func (pirauo *PlatformIdentityRoleAssignmentUpdateOne) SetIsActive(b bool) *PlatformIdentityRoleAssignmentUpdateOne {
	pirauo.mutation.SetIsActive(b)
	return pirauo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pirauo *PlatformIdentityRoleAssignmentUpdateOne) SetNillableIsActive(b *bool) *PlatformIdentityRoleAssignmentUpdateOne {
	if b != nil {
		pirauo.SetIsActive(*b)
	}
	return pirauo
}

// SetIdentityID sets the "identity" edge to the PlatformFederatedIdentity entity by ID.
func (pirauo *PlatformIdentityRoleAssignmentUpdateOne) SetIdentityID(id int) *PlatformIdentityRoleAssignmentUpdateOne {
	pirauo.mutation.SetIdentityID(id)
	return pirauo
}

// SetIdentity sets the "identity" edge to the PlatformFederatedIdentity entity.
func (pirauo *PlatformIdentityRoleAssignmentUpdateOne) SetIdentity(p *PlatformFederatedIdentity) *PlatformIdentityRoleAssignmentUpdateOne {
	return pirauo.SetIdentityID(p.ID)
}

// SetRoleID sets the "role" edge to the PlatformAppRole entity by ID.
func (pirauo *PlatformIdentityRoleAssignmentUpdateOne) SetRoleID(id int) *PlatformIdentityRoleAssignmentUpdateOne {
	pirauo.mutation.SetRoleID(id)
	return pirauo
}

// SetRole sets the "role" edge to the PlatformAppRole entity.
func (pirauo *PlatformIdentityRoleAssignmentUpdateOne) SetRole(p *PlatformAppRole) *PlatformIdentityRoleAssignmentUpdateOne {
	return pirauo.SetRoleID(p.ID)
}

// Mutation returns the PlatformIdentityRoleAssignmentMutation object of the builder.
func (pirauo *PlatformIdentityRoleAssignmentUpdateOne) Mutation() *PlatformIdentityRoleAssignmentMutation {
	return pirauo.mutation
}

// ClearIdentity clears the "identity" edge to the PlatformFederatedIdentity entity.
func (pirauo *PlatformIdentityRoleAssignmentUpdateOne) ClearIdentity() *PlatformIdentityRoleAssignmentUpdateOne {
	pirauo.mutation.ClearIdentity()
	return pirauo
}

// ClearRole clears the "role" edge to the PlatformAppRole entity.
func (pirauo *PlatformIdentityRoleAssignmentUpdateOne) ClearRole() *PlatformIdentityRoleAssignmentUpdateOne {
	pirauo.mutation.ClearRole()
	return pirauo
}

// Where appends a list predicates to the PlatformIdentityRoleAssignmentUpdate builder.
func (pirauo *PlatformIdentityRoleAssignmentUpdateOne) Where(ps ...predicate.PlatformIdentityRoleAssignment) *PlatformIdentityRoleAssignmentUpdateOne {
	pirauo.mutation.Where(ps...)
	return pirauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pirauo *PlatformIdentityRoleAssignmentUpdateOne) Select(field string, fields ...string) *PlatformIdentityRoleAssignmentUpdateOne {
	pirauo.fields = append([]string{field}, fields...)
	return pirauo
}

// Save executes the query and returns the updated PlatformIdentityRoleAssignment entity.
func (pirauo *PlatformIdentityRoleAssignmentUpdateOne) Save(ctx context.Context) (*PlatformIdentityRoleAssignment, error) {
	pirauo.defaults()
	return withHooks(ctx, pirauo.sqlSave, pirauo.mutation, pirauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pirauo *PlatformIdentityRoleAssignmentUpdateOne) SaveX(ctx context.Context) *PlatformIdentityRoleAssignment {
	node, err := pirauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pirauo *PlatformIdentityRoleAssignmentUpdateOne) Exec(ctx context.Context) error {
	_, err := pirauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pirauo *PlatformIdentityRoleAssignmentUpdateOne) ExecX(ctx context.Context) {
	if err := pirauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pirauo *PlatformIdentityRoleAssignmentUpdateOne) defaults() {
	if _, ok := pirauo.mutation.UpdateTime(); !ok {
		v := platformidentityroleassignment.UpdateDefaultUpdateTime()
		pirauo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pirauo *PlatformIdentityRoleAssignmentUpdateOne) check() error {
	if pirauo.mutation.IdentityCleared() && len(pirauo.mutation.IdentityIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "PlatformIdentityRoleAssignment.identity"`)
	}
	if pirauo.mutation.RoleCleared() && len(pirauo.mutation.RoleIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "PlatformIdentityRoleAssignment.role"`)
	}
	return nil
}

func (pirauo *PlatformIdentityRoleAssignmentUpdateOne) sqlSave(ctx context.Context) (_node *PlatformIdentityRoleAssignment, err error) {
	if err := pirauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(platformidentityroleassignment.Table, platformidentityroleassignment.Columns, sqlgraph.NewFieldSpec(platformidentityroleassignment.FieldID, field.TypeInt))
	id, ok := pirauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "PlatformIdentityRoleAssignment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pirauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, platformidentityroleassignment.FieldID)
		for _, f := range fields {
			if !platformidentityroleassignment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != platformidentityroleassignment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pirauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pirauo.mutation.UpdateTime(); ok {
		_spec.SetField(platformidentityroleassignment.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := pirauo.mutation.IsActive(); ok {
		_spec.SetField(platformidentityroleassignment.FieldIsActive, field.TypeBool, value)
	}
	if pirauo.mutation.IdentityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformidentityroleassignment.IdentityTable,
			Columns: []string{platformidentityroleassignment.IdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformfederatedidentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pirauo.mutation.IdentityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformidentityroleassignment.IdentityTable,
			Columns: []string{platformidentityroleassignment.IdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformfederatedidentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pirauo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformidentityroleassignment.RoleTable,
			Columns: []string{platformidentityroleassignment.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformapprole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pirauo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformidentityroleassignment.RoleTable,
			Columns: []string{platformidentityroleassignment.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformapprole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlatformIdentityRoleAssignment{config: pirauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pirauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platformidentityroleassignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pirauo.mutation.done = true
	return _node, nil
}
