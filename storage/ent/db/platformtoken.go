// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dexidp/dex/storage/ent/db/platformapprole"
	"github.com/dexidp/dex/storage/ent/db/platformtoken"
	"github.com/dexidp/dex/storage/ent/db/platformuser"
)

// PlatformToken is the model entity for the PlatformToken schema.
type PlatformToken struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Unique, publicly visible identifier or prefix for the token (safe for logging).
	PublicID string `json:"public_id,omitempty"`
	// Strong cryptographic hash (e.g., Argon2id) of the actual token secret.
	SecretHash string `json:"-"`
	// Indicates if the token is currently active and valid for use.
	IsActive bool `json:"is_active,omitempty"`
	// Timestamp when the token becomes invalid. NULL indicates the token never expires.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlatformTokenQuery when eager-loading is set.
	Edges                        PlatformTokenEdges `json:"edges"`
	platform_app_role_tokens     *int
	platform_user_created_tokens *int
	selectValues                 sql.SelectValues
}

// PlatformTokenEdges holds the relations/edges for other nodes in the graph.
type PlatformTokenEdges struct {
	// Creator holds the value of the creator edge.
	Creator *PlatformUser `json:"creator,omitempty"`
	// Role holds the value of the role edge.
	Role *PlatformAppRole `json:"role,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlatformTokenEdges) CreatorOrErr() (*PlatformUser, error) {
	if e.Creator != nil {
		return e.Creator, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: platformuser.Label}
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlatformTokenEdges) RoleOrErr() (*PlatformAppRole, error) {
	if e.Role != nil {
		return e.Role, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: platformapprole.Label}
	}
	return nil, &NotLoadedError{edge: "role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlatformToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case platformtoken.FieldIsActive:
			values[i] = new(sql.NullBool)
		case platformtoken.FieldID:
			values[i] = new(sql.NullInt64)
		case platformtoken.FieldPublicID, platformtoken.FieldSecretHash:
			values[i] = new(sql.NullString)
		case platformtoken.FieldCreateTime, platformtoken.FieldUpdateTime, platformtoken.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		case platformtoken.ForeignKeys[0]: // platform_app_role_tokens
			values[i] = new(sql.NullInt64)
		case platformtoken.ForeignKeys[1]: // platform_user_created_tokens
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlatformToken fields.
func (pt *PlatformToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case platformtoken.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pt.ID = int(value.Int64)
		case platformtoken.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pt.CreateTime = value.Time
			}
		case platformtoken.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pt.UpdateTime = value.Time
			}
		case platformtoken.FieldPublicID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_id", values[i])
			} else if value.Valid {
				pt.PublicID = value.String
			}
		case platformtoken.FieldSecretHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret_hash", values[i])
			} else if value.Valid {
				pt.SecretHash = value.String
			}
		case platformtoken.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				pt.IsActive = value.Bool
			}
		case platformtoken.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				pt.ExpiresAt = new(time.Time)
				*pt.ExpiresAt = value.Time
			}
		case platformtoken.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field platform_app_role_tokens", value)
			} else if value.Valid {
				pt.platform_app_role_tokens = new(int)
				*pt.platform_app_role_tokens = int(value.Int64)
			}
		case platformtoken.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field platform_user_created_tokens", value)
			} else if value.Valid {
				pt.platform_user_created_tokens = new(int)
				*pt.platform_user_created_tokens = int(value.Int64)
			}
		default:
			pt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PlatformToken.
// This includes values selected through modifiers, order, etc.
func (pt *PlatformToken) Value(name string) (ent.Value, error) {
	return pt.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the PlatformToken entity.
func (pt *PlatformToken) QueryCreator() *PlatformUserQuery {
	return NewPlatformTokenClient(pt.config).QueryCreator(pt)
}

// QueryRole queries the "role" edge of the PlatformToken entity.
func (pt *PlatformToken) QueryRole() *PlatformAppRoleQuery {
	return NewPlatformTokenClient(pt.config).QueryRole(pt)
}

// Update returns a builder for updating this PlatformToken.
// Note that you need to call PlatformToken.Unwrap() before calling this method if this PlatformToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *PlatformToken) Update() *PlatformTokenUpdateOne {
	return NewPlatformTokenClient(pt.config).UpdateOne(pt)
}

// Unwrap unwraps the PlatformToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *PlatformToken) Unwrap() *PlatformToken {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("db: PlatformToken is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *PlatformToken) String() string {
	var builder strings.Builder
	builder.WriteString("PlatformToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("create_time=")
	builder.WriteString(pt.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(pt.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("public_id=")
	builder.WriteString(pt.PublicID)
	builder.WriteString(", ")
	builder.WriteString("secret_hash=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", pt.IsActive))
	builder.WriteString(", ")
	if v := pt.ExpiresAt; v != nil {
		builder.WriteString("expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// PlatformTokens is a parsable slice of PlatformToken.
type PlatformTokens []*PlatformToken
