// Code generated by ent, DO NOT EDIT.

package platformtoken

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dexidp/dex/storage/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldEQ(FieldUpdateTime, v))
}

// PublicID applies equality check predicate on the "public_id" field. It's identical to PublicIDEQ.
func PublicID(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldEQ(FieldPublicID, v))
}

// SecretHash applies equality check predicate on the "secret_hash" field. It's identical to SecretHashEQ.
func SecretHash(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldEQ(FieldSecretHash, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldEQ(FieldIsActive, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldEQ(FieldExpiresAt, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldLTE(FieldUpdateTime, v))
}

// PublicIDEQ applies the EQ predicate on the "public_id" field.
func PublicIDEQ(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldEQ(FieldPublicID, v))
}

// PublicIDNEQ applies the NEQ predicate on the "public_id" field.
func PublicIDNEQ(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldNEQ(FieldPublicID, v))
}

// PublicIDIn applies the In predicate on the "public_id" field.
func PublicIDIn(vs ...string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldIn(FieldPublicID, vs...))
}

// PublicIDNotIn applies the NotIn predicate on the "public_id" field.
func PublicIDNotIn(vs ...string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldNotIn(FieldPublicID, vs...))
}

// PublicIDGT applies the GT predicate on the "public_id" field.
func PublicIDGT(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldGT(FieldPublicID, v))
}

// PublicIDGTE applies the GTE predicate on the "public_id" field.
func PublicIDGTE(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldGTE(FieldPublicID, v))
}

// PublicIDLT applies the LT predicate on the "public_id" field.
func PublicIDLT(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldLT(FieldPublicID, v))
}

// PublicIDLTE applies the LTE predicate on the "public_id" field.
func PublicIDLTE(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldLTE(FieldPublicID, v))
}

// PublicIDContains applies the Contains predicate on the "public_id" field.
func PublicIDContains(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldContains(FieldPublicID, v))
}

// PublicIDHasPrefix applies the HasPrefix predicate on the "public_id" field.
func PublicIDHasPrefix(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldHasPrefix(FieldPublicID, v))
}

// PublicIDHasSuffix applies the HasSuffix predicate on the "public_id" field.
func PublicIDHasSuffix(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldHasSuffix(FieldPublicID, v))
}

// PublicIDEqualFold applies the EqualFold predicate on the "public_id" field.
func PublicIDEqualFold(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldEqualFold(FieldPublicID, v))
}

// PublicIDContainsFold applies the ContainsFold predicate on the "public_id" field.
func PublicIDContainsFold(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldContainsFold(FieldPublicID, v))
}

// SecretHashEQ applies the EQ predicate on the "secret_hash" field.
func SecretHashEQ(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldEQ(FieldSecretHash, v))
}

// SecretHashNEQ applies the NEQ predicate on the "secret_hash" field.
func SecretHashNEQ(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldNEQ(FieldSecretHash, v))
}

// SecretHashIn applies the In predicate on the "secret_hash" field.
func SecretHashIn(vs ...string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldIn(FieldSecretHash, vs...))
}

// SecretHashNotIn applies the NotIn predicate on the "secret_hash" field.
func SecretHashNotIn(vs ...string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldNotIn(FieldSecretHash, vs...))
}

// SecretHashGT applies the GT predicate on the "secret_hash" field.
func SecretHashGT(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldGT(FieldSecretHash, v))
}

// SecretHashGTE applies the GTE predicate on the "secret_hash" field.
func SecretHashGTE(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldGTE(FieldSecretHash, v))
}

// SecretHashLT applies the LT predicate on the "secret_hash" field.
func SecretHashLT(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldLT(FieldSecretHash, v))
}

// SecretHashLTE applies the LTE predicate on the "secret_hash" field.
func SecretHashLTE(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldLTE(FieldSecretHash, v))
}

// SecretHashContains applies the Contains predicate on the "secret_hash" field.
func SecretHashContains(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldContains(FieldSecretHash, v))
}

// SecretHashHasPrefix applies the HasPrefix predicate on the "secret_hash" field.
func SecretHashHasPrefix(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldHasPrefix(FieldSecretHash, v))
}

// SecretHashHasSuffix applies the HasSuffix predicate on the "secret_hash" field.
func SecretHashHasSuffix(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldHasSuffix(FieldSecretHash, v))
}

// SecretHashEqualFold applies the EqualFold predicate on the "secret_hash" field.
func SecretHashEqualFold(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldEqualFold(FieldSecretHash, v))
}

// SecretHashContainsFold applies the ContainsFold predicate on the "secret_hash" field.
func SecretHashContainsFold(v string) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldContainsFold(FieldSecretHash, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldNEQ(FieldIsActive, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldLTE(FieldExpiresAt, v))
}

// ExpiresAtIsNil applies the IsNil predicate on the "expires_at" field.
func ExpiresAtIsNil() predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldIsNull(FieldExpiresAt))
}

// ExpiresAtNotNil applies the NotNil predicate on the "expires_at" field.
func ExpiresAtNotNil() predicate.PlatformToken {
	return predicate.PlatformToken(sql.FieldNotNull(FieldExpiresAt))
}

// HasCreator applies the HasEdge predicate on the "creator" edge.
func HasCreator() predicate.PlatformToken {
	return predicate.PlatformToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorWith applies the HasEdge predicate on the "creator" edge with a given conditions (other predicates).
func HasCreatorWith(preds ...predicate.PlatformUser) predicate.PlatformToken {
	return predicate.PlatformToken(func(s *sql.Selector) {
		step := newCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRole applies the HasEdge predicate on the "role" edge.
func HasRole() predicate.PlatformToken {
	return predicate.PlatformToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoleTable, RoleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleWith applies the HasEdge predicate on the "role" edge with a given conditions (other predicates).
func HasRoleWith(preds ...predicate.PlatformAppRole) predicate.PlatformToken {
	return predicate.PlatformToken(func(s *sql.Selector) {
		step := newRoleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PlatformToken) predicate.PlatformToken {
	return predicate.PlatformToken(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PlatformToken) predicate.PlatformToken {
	return predicate.PlatformToken(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PlatformToken) predicate.PlatformToken {
	return predicate.PlatformToken(sql.NotPredicates(p))
}
