// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dexidp/dex/storage/ent/db/platformapprole"
	"github.com/dexidp/dex/storage/ent/db/platformtoken"
	"github.com/dexidp/dex/storage/ent/db/platformuser"
)

// PlatformTokenCreate is the builder for creating a PlatformToken entity.
type PlatformTokenCreate struct {
	config
	mutation *PlatformTokenMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ptc *PlatformTokenCreate) SetCreateTime(t time.Time) *PlatformTokenCreate {
	ptc.mutation.SetCreateTime(t)
	return ptc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ptc *PlatformTokenCreate) SetNillableCreateTime(t *time.Time) *PlatformTokenCreate {
	if t != nil {
		ptc.SetCreateTime(*t)
	}
	return ptc
}

// SetUpdateTime sets the "update_time" field.
func (ptc *PlatformTokenCreate) SetUpdateTime(t time.Time) *PlatformTokenCreate {
	ptc.mutation.SetUpdateTime(t)
	return ptc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ptc *PlatformTokenCreate) SetNillableUpdateTime(t *time.Time) *PlatformTokenCreate {
	if t != nil {
		ptc.SetUpdateTime(*t)
	}
	return ptc
}

// SetPublicID sets the "public_id" field.
func (ptc *PlatformTokenCreate) SetPublicID(s string) *PlatformTokenCreate {
	ptc.mutation.SetPublicID(s)
	return ptc
}

// SetSecretHash sets the "secret_hash" field.
func (ptc *PlatformTokenCreate) SetSecretHash(s string) *PlatformTokenCreate {
	ptc.mutation.SetSecretHash(s)
	return ptc
}

// SetIsActive sets the "is_active" field.
func (ptc *PlatformTokenCreate) SetIsActive(b bool) *PlatformTokenCreate {
	ptc.mutation.SetIsActive(b)
	return ptc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ptc *PlatformTokenCreate) SetNillableIsActive(b *bool) *PlatformTokenCreate {
	if b != nil {
		ptc.SetIsActive(*b)
	}
	return ptc
}

// SetExpiresAt sets the "expires_at" field.
func (ptc *PlatformTokenCreate) SetExpiresAt(t time.Time) *PlatformTokenCreate {
	ptc.mutation.SetExpiresAt(t)
	return ptc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (ptc *PlatformTokenCreate) SetNillableExpiresAt(t *time.Time) *PlatformTokenCreate {
	if t != nil {
		ptc.SetExpiresAt(*t)
	}
	return ptc
}

// SetCreatorID sets the "creator" edge to the PlatformUser entity by ID.
func (ptc *PlatformTokenCreate) SetCreatorID(id int) *PlatformTokenCreate {
	ptc.mutation.SetCreatorID(id)
	return ptc
}

// SetCreator sets the "creator" edge to the PlatformUser entity.
func (ptc *PlatformTokenCreate) SetCreator(p *PlatformUser) *PlatformTokenCreate {
	return ptc.SetCreatorID(p.ID)
}

// SetRoleID sets the "role" edge to the PlatformAppRole entity by ID.
func (ptc *PlatformTokenCreate) SetRoleID(id int) *PlatformTokenCreate {
	ptc.mutation.SetRoleID(id)
	return ptc
}

// SetRole sets the "role" edge to the PlatformAppRole entity.
func (ptc *PlatformTokenCreate) SetRole(p *PlatformAppRole) *PlatformTokenCreate {
	return ptc.SetRoleID(p.ID)
}

// Mutation returns the PlatformTokenMutation object of the builder.
func (ptc *PlatformTokenCreate) Mutation() *PlatformTokenMutation {
	return ptc.mutation
}

// Save creates the PlatformToken in the database.
func (ptc *PlatformTokenCreate) Save(ctx context.Context) (*PlatformToken, error) {
	ptc.defaults()
	return withHooks(ctx, ptc.sqlSave, ptc.mutation, ptc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *PlatformTokenCreate) SaveX(ctx context.Context) *PlatformToken {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *PlatformTokenCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *PlatformTokenCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptc *PlatformTokenCreate) defaults() {
	if _, ok := ptc.mutation.CreateTime(); !ok {
		v := platformtoken.DefaultCreateTime()
		ptc.mutation.SetCreateTime(v)
	}
	if _, ok := ptc.mutation.UpdateTime(); !ok {
		v := platformtoken.DefaultUpdateTime()
		ptc.mutation.SetUpdateTime(v)
	}
	if _, ok := ptc.mutation.IsActive(); !ok {
		v := platformtoken.DefaultIsActive
		ptc.mutation.SetIsActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptc *PlatformTokenCreate) check() error {
	if _, ok := ptc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`db: missing required field "PlatformToken.create_time"`)}
	}
	if _, ok := ptc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`db: missing required field "PlatformToken.update_time"`)}
	}
	if _, ok := ptc.mutation.PublicID(); !ok {
		return &ValidationError{Name: "public_id", err: errors.New(`db: missing required field "PlatformToken.public_id"`)}
	}
	if v, ok := ptc.mutation.PublicID(); ok {
		if err := platformtoken.PublicIDValidator(v); err != nil {
			return &ValidationError{Name: "public_id", err: fmt.Errorf(`db: validator failed for field "PlatformToken.public_id": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.SecretHash(); !ok {
		return &ValidationError{Name: "secret_hash", err: errors.New(`db: missing required field "PlatformToken.secret_hash"`)}
	}
	if v, ok := ptc.mutation.SecretHash(); ok {
		if err := platformtoken.SecretHashValidator(v); err != nil {
			return &ValidationError{Name: "secret_hash", err: fmt.Errorf(`db: validator failed for field "PlatformToken.secret_hash": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`db: missing required field "PlatformToken.is_active"`)}
	}
	if len(ptc.mutation.CreatorIDs()) == 0 {
		return &ValidationError{Name: "creator", err: errors.New(`db: missing required edge "PlatformToken.creator"`)}
	}
	if len(ptc.mutation.RoleIDs()) == 0 {
		return &ValidationError{Name: "role", err: errors.New(`db: missing required edge "PlatformToken.role"`)}
	}
	return nil
}

func (ptc *PlatformTokenCreate) sqlSave(ctx context.Context) (*PlatformToken, error) {
	if err := ptc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ptc.mutation.id = &_node.ID
	ptc.mutation.done = true
	return _node, nil
}

func (ptc *PlatformTokenCreate) createSpec() (*PlatformToken, *sqlgraph.CreateSpec) {
	var (
		_node = &PlatformToken{config: ptc.config}
		_spec = sqlgraph.NewCreateSpec(platformtoken.Table, sqlgraph.NewFieldSpec(platformtoken.FieldID, field.TypeInt))
	)
	if value, ok := ptc.mutation.CreateTime(); ok {
		_spec.SetField(platformtoken.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ptc.mutation.UpdateTime(); ok {
		_spec.SetField(platformtoken.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ptc.mutation.PublicID(); ok {
		_spec.SetField(platformtoken.FieldPublicID, field.TypeString, value)
		_node.PublicID = value
	}
	if value, ok := ptc.mutation.SecretHash(); ok {
		_spec.SetField(platformtoken.FieldSecretHash, field.TypeString, value)
		_node.SecretHash = value
	}
	if value, ok := ptc.mutation.IsActive(); ok {
		_spec.SetField(platformtoken.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := ptc.mutation.ExpiresAt(); ok {
		_spec.SetField(platformtoken.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = &value
	}
	if nodes := ptc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformtoken.CreatorTable,
			Columns: []string{platformtoken.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.platform_user_created_tokens = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptc.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformtoken.RoleTable,
			Columns: []string{platformtoken.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformapprole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.platform_app_role_tokens = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlatformTokenCreateBulk is the builder for creating many PlatformToken entities in bulk.
type PlatformTokenCreateBulk struct {
	config
	err      error
	builders []*PlatformTokenCreate
}

// Save creates the PlatformToken entities in the database.
func (ptcb *PlatformTokenCreateBulk) Save(ctx context.Context) ([]*PlatformToken, error) {
	if ptcb.err != nil {
		return nil, ptcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*PlatformToken, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlatformTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *PlatformTokenCreateBulk) SaveX(ctx context.Context) []*PlatformToken {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *PlatformTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *PlatformTokenCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}
