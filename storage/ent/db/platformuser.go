// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dexidp/dex/storage/ent/db/platformuser"
)

// PlatformUser is the model entity for the PlatformUser schema.
type PlatformUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// User's unique email address. Used as the primary identifier.
	Email string `json:"email,omitempty"`
	// Optional display name for the user (e.g., Full Name).
	DisplayName string `json:"display_name,omitempty"`
	// Indicates whether the user account is active and allowed to log in.
	IsActive bool `json:"is_active,omitempty"`
	// Optional: Connector ID used when the user was first seen by the system.
	FirstConnectorID string `json:"first_connector_id,omitempty"`
	// Optional: User ID from the federated provider when the user was first seen.
	FirstFederatedUserID string `json:"first_federated_user_id,omitempty"`
	// Timestamp of the user's last known login recorded by this system.
	LastLogin time.Time `json:"last_login,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlatformUserQuery when eager-loading is set.
	Edges        PlatformUserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PlatformUserEdges holds the relations/edges for other nodes in the graph.
type PlatformUserEdges struct {
	// Holds the individual application role assignments for this user.
	Assignments []*UserAppRole `json:"assignments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AssignmentsOrErr returns the Assignments value or an error if the edge
// was not loaded in eager-loading.
func (e PlatformUserEdges) AssignmentsOrErr() ([]*UserAppRole, error) {
	if e.loadedTypes[0] {
		return e.Assignments, nil
	}
	return nil, &NotLoadedError{edge: "assignments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlatformUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case platformuser.FieldIsActive:
			values[i] = new(sql.NullBool)
		case platformuser.FieldID:
			values[i] = new(sql.NullInt64)
		case platformuser.FieldEmail, platformuser.FieldDisplayName, platformuser.FieldFirstConnectorID, platformuser.FieldFirstFederatedUserID:
			values[i] = new(sql.NullString)
		case platformuser.FieldCreateTime, platformuser.FieldUpdateTime, platformuser.FieldLastLogin:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlatformUser fields.
func (pu *PlatformUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case platformuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pu.ID = int(value.Int64)
		case platformuser.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pu.CreateTime = value.Time
			}
		case platformuser.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pu.UpdateTime = value.Time
			}
		case platformuser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				pu.Email = value.String
			}
		case platformuser.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				pu.DisplayName = value.String
			}
		case platformuser.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				pu.IsActive = value.Bool
			}
		case platformuser.FieldFirstConnectorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_connector_id", values[i])
			} else if value.Valid {
				pu.FirstConnectorID = value.String
			}
		case platformuser.FieldFirstFederatedUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_federated_user_id", values[i])
			} else if value.Valid {
				pu.FirstFederatedUserID = value.String
			}
		case platformuser.FieldLastLogin:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login", values[i])
			} else if value.Valid {
				pu.LastLogin = value.Time
			}
		default:
			pu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PlatformUser.
// This includes values selected through modifiers, order, etc.
func (pu *PlatformUser) Value(name string) (ent.Value, error) {
	return pu.selectValues.Get(name)
}

// QueryAssignments queries the "assignments" edge of the PlatformUser entity.
func (pu *PlatformUser) QueryAssignments() *UserAppRoleQuery {
	return NewPlatformUserClient(pu.config).QueryAssignments(pu)
}

// Update returns a builder for updating this PlatformUser.
// Note that you need to call PlatformUser.Unwrap() before calling this method if this PlatformUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (pu *PlatformUser) Update() *PlatformUserUpdateOne {
	return NewPlatformUserClient(pu.config).UpdateOne(pu)
}

// Unwrap unwraps the PlatformUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pu *PlatformUser) Unwrap() *PlatformUser {
	_tx, ok := pu.config.driver.(*txDriver)
	if !ok {
		panic("db: PlatformUser is not a transactional entity")
	}
	pu.config.driver = _tx.drv
	return pu
}

// String implements the fmt.Stringer.
func (pu *PlatformUser) String() string {
	var builder strings.Builder
	builder.WriteString("PlatformUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pu.ID))
	builder.WriteString("create_time=")
	builder.WriteString(pu.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(pu.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(pu.Email)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(pu.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", pu.IsActive))
	builder.WriteString(", ")
	builder.WriteString("first_connector_id=")
	builder.WriteString(pu.FirstConnectorID)
	builder.WriteString(", ")
	builder.WriteString("first_federated_user_id=")
	builder.WriteString(pu.FirstFederatedUserID)
	builder.WriteString(", ")
	builder.WriteString("last_login=")
	builder.WriteString(pu.LastLogin.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PlatformUsers is a parsable slice of PlatformUser.
type PlatformUsers []*PlatformUser
