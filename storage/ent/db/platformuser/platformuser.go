// Code generated by ent, DO NOT EDIT.

package platformuser

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the platformuser type in the database.
	Label = "platform_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldFirstConnectorID holds the string denoting the first_connector_id field in the database.
	FieldFirstConnectorID = "first_connector_id"
	// FieldFirstFederatedUserID holds the string denoting the first_federated_user_id field in the database.
	FieldFirstFederatedUserID = "first_federated_user_id"
	// FieldLastLogin holds the string denoting the last_login field in the database.
	FieldLastLogin = "last_login"
	// EdgeAssignments holds the string denoting the assignments edge name in mutations.
	EdgeAssignments = "assignments"
	// Table holds the table name of the platformuser in the database.
	Table = "platform_users"
	// AssignmentsTable is the table that holds the assignments relation/edge.
	AssignmentsTable = "user_app_roles"
	// AssignmentsInverseTable is the table name for the UserAppRole entity.
	// It exists in this package in order to avoid circular dependency with the "userapprole" package.
	AssignmentsInverseTable = "user_app_roles"
	// AssignmentsColumn is the table column denoting the assignments relation/edge.
	AssignmentsColumn = "platform_user_assignments"
)

// Columns holds all SQL columns for platformuser fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldEmail,
	FieldDisplayName,
	FieldIsActive,
	FieldFirstConnectorID,
	FieldFirstFederatedUserID,
	FieldLastLogin,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
)

// OrderOption defines the ordering options for the PlatformUser queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByFirstConnectorID orders the results by the first_connector_id field.
func ByFirstConnectorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstConnectorID, opts...).ToFunc()
}

// ByFirstFederatedUserID orders the results by the first_federated_user_id field.
func ByFirstFederatedUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstFederatedUserID, opts...).ToFunc()
}

// ByLastLogin orders the results by the last_login field.
func ByLastLogin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLogin, opts...).ToFunc()
}

// ByAssignmentsCount orders the results by assignments count.
func ByAssignmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssignmentsStep(), opts...)
	}
}

// ByAssignments orders the results by assignments terms.
func ByAssignments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssignmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAssignmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssignmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AssignmentsTable, AssignmentsColumn),
	)
}
