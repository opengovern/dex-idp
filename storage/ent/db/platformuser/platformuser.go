// Code generated by ent, DO NOT EDIT.

package platformuser

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the platformuser type in the database.
	Label = "platform_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldLastLogin holds the string denoting the last_login field in the database.
	FieldLastLogin = "last_login"
	// EdgeUserRoleAssignments holds the string denoting the user_role_assignments edge name in mutations.
	EdgeUserRoleAssignments = "user_role_assignments"
	// EdgeFederatedIdentities holds the string denoting the federated_identities edge name in mutations.
	EdgeFederatedIdentities = "federated_identities"
	// EdgeCreatedTokens holds the string denoting the created_tokens edge name in mutations.
	EdgeCreatedTokens = "created_tokens"
	// Table holds the table name of the platformuser in the database.
	Table = "platform_users"
	// UserRoleAssignmentsTable is the table that holds the user_role_assignments relation/edge.
	UserRoleAssignmentsTable = "platform_user_role_assignments"
	// UserRoleAssignmentsInverseTable is the table name for the PlatformUserRoleAssignment entity.
	// It exists in this package in order to avoid circular dependency with the "platformuserroleassignment" package.
	UserRoleAssignmentsInverseTable = "platform_user_role_assignments"
	// UserRoleAssignmentsColumn is the table column denoting the user_role_assignments relation/edge.
	UserRoleAssignmentsColumn = "platform_user_user_role_assignments"
	// FederatedIdentitiesTable is the table that holds the federated_identities relation/edge.
	FederatedIdentitiesTable = "platform_federated_identities"
	// FederatedIdentitiesInverseTable is the table name for the PlatformFederatedIdentity entity.
	// It exists in this package in order to avoid circular dependency with the "platformfederatedidentity" package.
	FederatedIdentitiesInverseTable = "platform_federated_identities"
	// FederatedIdentitiesColumn is the table column denoting the federated_identities relation/edge.
	FederatedIdentitiesColumn = "platform_user_federated_identities"
	// CreatedTokensTable is the table that holds the created_tokens relation/edge.
	CreatedTokensTable = "platform_tokens"
	// CreatedTokensInverseTable is the table name for the PlatformToken entity.
	// It exists in this package in order to avoid circular dependency with the "platformtoken" package.
	CreatedTokensInverseTable = "platform_tokens"
	// CreatedTokensColumn is the table column denoting the created_tokens relation/edge.
	CreatedTokensColumn = "platform_user_created_tokens"
)

// Columns holds all SQL columns for platformuser fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldEmail,
	FieldDisplayName,
	FieldIsActive,
	FieldLastLogin,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
)

// OrderOption defines the ordering options for the PlatformUser queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByLastLogin orders the results by the last_login field.
func ByLastLogin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLogin, opts...).ToFunc()
}

// ByUserRoleAssignmentsCount orders the results by user_role_assignments count.
func ByUserRoleAssignmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserRoleAssignmentsStep(), opts...)
	}
}

// ByUserRoleAssignments orders the results by user_role_assignments terms.
func ByUserRoleAssignments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserRoleAssignmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFederatedIdentitiesCount orders the results by federated_identities count.
func ByFederatedIdentitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFederatedIdentitiesStep(), opts...)
	}
}

// ByFederatedIdentities orders the results by federated_identities terms.
func ByFederatedIdentities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFederatedIdentitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatedTokensCount orders the results by created_tokens count.
func ByCreatedTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreatedTokensStep(), opts...)
	}
}

// ByCreatedTokens orders the results by created_tokens terms.
func ByCreatedTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserRoleAssignmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserRoleAssignmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserRoleAssignmentsTable, UserRoleAssignmentsColumn),
	)
}
func newFederatedIdentitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FederatedIdentitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FederatedIdentitiesTable, FederatedIdentitiesColumn),
	)
}
func newCreatedTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedTokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CreatedTokensTable, CreatedTokensColumn),
	)
}
