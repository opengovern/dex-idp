// Code generated by ent, DO NOT EDIT.

package platformuser

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dexidp/dex/storage/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEQ(FieldUpdateTime, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEQ(FieldEmail, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEQ(FieldDisplayName, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEQ(FieldIsActive, v))
}

// FirstConnectorID applies equality check predicate on the "first_connector_id" field. It's identical to FirstConnectorIDEQ.
func FirstConnectorID(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEQ(FieldFirstConnectorID, v))
}

// FirstFederatedUserID applies equality check predicate on the "first_federated_user_id" field. It's identical to FirstFederatedUserIDEQ.
func FirstFederatedUserID(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEQ(FieldFirstFederatedUserID, v))
}

// LastLogin applies equality check predicate on the "last_login" field. It's identical to LastLoginEQ.
func LastLogin(v time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEQ(FieldLastLogin, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldLTE(FieldUpdateTime, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldContainsFold(FieldEmail, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameIsNil applies the IsNil predicate on the "display_name" field.
func DisplayNameIsNil() predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldIsNull(FieldDisplayName))
}

// DisplayNameNotNil applies the NotNil predicate on the "display_name" field.
func DisplayNameNotNil() predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldNotNull(FieldDisplayName))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldContainsFold(FieldDisplayName, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldNEQ(FieldIsActive, v))
}

// FirstConnectorIDEQ applies the EQ predicate on the "first_connector_id" field.
func FirstConnectorIDEQ(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEQ(FieldFirstConnectorID, v))
}

// FirstConnectorIDNEQ applies the NEQ predicate on the "first_connector_id" field.
func FirstConnectorIDNEQ(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldNEQ(FieldFirstConnectorID, v))
}

// FirstConnectorIDIn applies the In predicate on the "first_connector_id" field.
func FirstConnectorIDIn(vs ...string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldIn(FieldFirstConnectorID, vs...))
}

// FirstConnectorIDNotIn applies the NotIn predicate on the "first_connector_id" field.
func FirstConnectorIDNotIn(vs ...string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldNotIn(FieldFirstConnectorID, vs...))
}

// FirstConnectorIDGT applies the GT predicate on the "first_connector_id" field.
func FirstConnectorIDGT(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldGT(FieldFirstConnectorID, v))
}

// FirstConnectorIDGTE applies the GTE predicate on the "first_connector_id" field.
func FirstConnectorIDGTE(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldGTE(FieldFirstConnectorID, v))
}

// FirstConnectorIDLT applies the LT predicate on the "first_connector_id" field.
func FirstConnectorIDLT(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldLT(FieldFirstConnectorID, v))
}

// FirstConnectorIDLTE applies the LTE predicate on the "first_connector_id" field.
func FirstConnectorIDLTE(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldLTE(FieldFirstConnectorID, v))
}

// FirstConnectorIDContains applies the Contains predicate on the "first_connector_id" field.
func FirstConnectorIDContains(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldContains(FieldFirstConnectorID, v))
}

// FirstConnectorIDHasPrefix applies the HasPrefix predicate on the "first_connector_id" field.
func FirstConnectorIDHasPrefix(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldHasPrefix(FieldFirstConnectorID, v))
}

// FirstConnectorIDHasSuffix applies the HasSuffix predicate on the "first_connector_id" field.
func FirstConnectorIDHasSuffix(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldHasSuffix(FieldFirstConnectorID, v))
}

// FirstConnectorIDIsNil applies the IsNil predicate on the "first_connector_id" field.
func FirstConnectorIDIsNil() predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldIsNull(FieldFirstConnectorID))
}

// FirstConnectorIDNotNil applies the NotNil predicate on the "first_connector_id" field.
func FirstConnectorIDNotNil() predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldNotNull(FieldFirstConnectorID))
}

// FirstConnectorIDEqualFold applies the EqualFold predicate on the "first_connector_id" field.
func FirstConnectorIDEqualFold(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEqualFold(FieldFirstConnectorID, v))
}

// FirstConnectorIDContainsFold applies the ContainsFold predicate on the "first_connector_id" field.
func FirstConnectorIDContainsFold(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldContainsFold(FieldFirstConnectorID, v))
}

// FirstFederatedUserIDEQ applies the EQ predicate on the "first_federated_user_id" field.
func FirstFederatedUserIDEQ(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEQ(FieldFirstFederatedUserID, v))
}

// FirstFederatedUserIDNEQ applies the NEQ predicate on the "first_federated_user_id" field.
func FirstFederatedUserIDNEQ(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldNEQ(FieldFirstFederatedUserID, v))
}

// FirstFederatedUserIDIn applies the In predicate on the "first_federated_user_id" field.
func FirstFederatedUserIDIn(vs ...string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldIn(FieldFirstFederatedUserID, vs...))
}

// FirstFederatedUserIDNotIn applies the NotIn predicate on the "first_federated_user_id" field.
func FirstFederatedUserIDNotIn(vs ...string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldNotIn(FieldFirstFederatedUserID, vs...))
}

// FirstFederatedUserIDGT applies the GT predicate on the "first_federated_user_id" field.
func FirstFederatedUserIDGT(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldGT(FieldFirstFederatedUserID, v))
}

// FirstFederatedUserIDGTE applies the GTE predicate on the "first_federated_user_id" field.
func FirstFederatedUserIDGTE(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldGTE(FieldFirstFederatedUserID, v))
}

// FirstFederatedUserIDLT applies the LT predicate on the "first_federated_user_id" field.
func FirstFederatedUserIDLT(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldLT(FieldFirstFederatedUserID, v))
}

// FirstFederatedUserIDLTE applies the LTE predicate on the "first_federated_user_id" field.
func FirstFederatedUserIDLTE(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldLTE(FieldFirstFederatedUserID, v))
}

// FirstFederatedUserIDContains applies the Contains predicate on the "first_federated_user_id" field.
func FirstFederatedUserIDContains(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldContains(FieldFirstFederatedUserID, v))
}

// FirstFederatedUserIDHasPrefix applies the HasPrefix predicate on the "first_federated_user_id" field.
func FirstFederatedUserIDHasPrefix(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldHasPrefix(FieldFirstFederatedUserID, v))
}

// FirstFederatedUserIDHasSuffix applies the HasSuffix predicate on the "first_federated_user_id" field.
func FirstFederatedUserIDHasSuffix(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldHasSuffix(FieldFirstFederatedUserID, v))
}

// FirstFederatedUserIDIsNil applies the IsNil predicate on the "first_federated_user_id" field.
func FirstFederatedUserIDIsNil() predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldIsNull(FieldFirstFederatedUserID))
}

// FirstFederatedUserIDNotNil applies the NotNil predicate on the "first_federated_user_id" field.
func FirstFederatedUserIDNotNil() predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldNotNull(FieldFirstFederatedUserID))
}

// FirstFederatedUserIDEqualFold applies the EqualFold predicate on the "first_federated_user_id" field.
func FirstFederatedUserIDEqualFold(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEqualFold(FieldFirstFederatedUserID, v))
}

// FirstFederatedUserIDContainsFold applies the ContainsFold predicate on the "first_federated_user_id" field.
func FirstFederatedUserIDContainsFold(v string) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldContainsFold(FieldFirstFederatedUserID, v))
}

// LastLoginEQ applies the EQ predicate on the "last_login" field.
func LastLoginEQ(v time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldEQ(FieldLastLogin, v))
}

// LastLoginNEQ applies the NEQ predicate on the "last_login" field.
func LastLoginNEQ(v time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldNEQ(FieldLastLogin, v))
}

// LastLoginIn applies the In predicate on the "last_login" field.
func LastLoginIn(vs ...time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldIn(FieldLastLogin, vs...))
}

// LastLoginNotIn applies the NotIn predicate on the "last_login" field.
func LastLoginNotIn(vs ...time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldNotIn(FieldLastLogin, vs...))
}

// LastLoginGT applies the GT predicate on the "last_login" field.
func LastLoginGT(v time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldGT(FieldLastLogin, v))
}

// LastLoginGTE applies the GTE predicate on the "last_login" field.
func LastLoginGTE(v time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldGTE(FieldLastLogin, v))
}

// LastLoginLT applies the LT predicate on the "last_login" field.
func LastLoginLT(v time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldLT(FieldLastLogin, v))
}

// LastLoginLTE applies the LTE predicate on the "last_login" field.
func LastLoginLTE(v time.Time) predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldLTE(FieldLastLogin, v))
}

// LastLoginIsNil applies the IsNil predicate on the "last_login" field.
func LastLoginIsNil() predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldIsNull(FieldLastLogin))
}

// LastLoginNotNil applies the NotNil predicate on the "last_login" field.
func LastLoginNotNil() predicate.PlatformUser {
	return predicate.PlatformUser(sql.FieldNotNull(FieldLastLogin))
}

// HasAssignments applies the HasEdge predicate on the "assignments" edge.
func HasAssignments() predicate.PlatformUser {
	return predicate.PlatformUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssignmentsTable, AssignmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssignmentsWith applies the HasEdge predicate on the "assignments" edge with a given conditions (other predicates).
func HasAssignmentsWith(preds ...predicate.UserAppRole) predicate.PlatformUser {
	return predicate.PlatformUser(func(s *sql.Selector) {
		step := newAssignmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PlatformUser) predicate.PlatformUser {
	return predicate.PlatformUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PlatformUser) predicate.PlatformUser {
	return predicate.PlatformUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PlatformUser) predicate.PlatformUser {
	return predicate.PlatformUser(sql.NotPredicates(p))
}
