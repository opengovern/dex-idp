// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dexidp/dex/storage/ent/db/platformuser"
	"github.com/dexidp/dex/storage/ent/db/userapprole"
)

// PlatformUserCreate is the builder for creating a PlatformUser entity.
type PlatformUserCreate struct {
	config
	mutation *PlatformUserMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (puc *PlatformUserCreate) SetCreateTime(t time.Time) *PlatformUserCreate {
	puc.mutation.SetCreateTime(t)
	return puc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (puc *PlatformUserCreate) SetNillableCreateTime(t *time.Time) *PlatformUserCreate {
	if t != nil {
		puc.SetCreateTime(*t)
	}
	return puc
}

// SetUpdateTime sets the "update_time" field.
func (puc *PlatformUserCreate) SetUpdateTime(t time.Time) *PlatformUserCreate {
	puc.mutation.SetUpdateTime(t)
	return puc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (puc *PlatformUserCreate) SetNillableUpdateTime(t *time.Time) *PlatformUserCreate {
	if t != nil {
		puc.SetUpdateTime(*t)
	}
	return puc
}

// SetEmail sets the "email" field.
func (puc *PlatformUserCreate) SetEmail(s string) *PlatformUserCreate {
	puc.mutation.SetEmail(s)
	return puc
}

// SetDisplayName sets the "display_name" field.
func (puc *PlatformUserCreate) SetDisplayName(s string) *PlatformUserCreate {
	puc.mutation.SetDisplayName(s)
	return puc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (puc *PlatformUserCreate) SetNillableDisplayName(s *string) *PlatformUserCreate {
	if s != nil {
		puc.SetDisplayName(*s)
	}
	return puc
}

// SetIsActive sets the "is_active" field.
func (puc *PlatformUserCreate) SetIsActive(b bool) *PlatformUserCreate {
	puc.mutation.SetIsActive(b)
	return puc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (puc *PlatformUserCreate) SetNillableIsActive(b *bool) *PlatformUserCreate {
	if b != nil {
		puc.SetIsActive(*b)
	}
	return puc
}

// SetFirstConnectorID sets the "first_connector_id" field.
func (puc *PlatformUserCreate) SetFirstConnectorID(s string) *PlatformUserCreate {
	puc.mutation.SetFirstConnectorID(s)
	return puc
}

// SetNillableFirstConnectorID sets the "first_connector_id" field if the given value is not nil.
func (puc *PlatformUserCreate) SetNillableFirstConnectorID(s *string) *PlatformUserCreate {
	if s != nil {
		puc.SetFirstConnectorID(*s)
	}
	return puc
}

// SetFirstFederatedUserID sets the "first_federated_user_id" field.
func (puc *PlatformUserCreate) SetFirstFederatedUserID(s string) *PlatformUserCreate {
	puc.mutation.SetFirstFederatedUserID(s)
	return puc
}

// SetNillableFirstFederatedUserID sets the "first_federated_user_id" field if the given value is not nil.
func (puc *PlatformUserCreate) SetNillableFirstFederatedUserID(s *string) *PlatformUserCreate {
	if s != nil {
		puc.SetFirstFederatedUserID(*s)
	}
	return puc
}

// SetLastLogin sets the "last_login" field.
func (puc *PlatformUserCreate) SetLastLogin(t time.Time) *PlatformUserCreate {
	puc.mutation.SetLastLogin(t)
	return puc
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (puc *PlatformUserCreate) SetNillableLastLogin(t *time.Time) *PlatformUserCreate {
	if t != nil {
		puc.SetLastLogin(*t)
	}
	return puc
}

// AddAssignmentIDs adds the "assignments" edge to the UserAppRole entity by IDs.
func (puc *PlatformUserCreate) AddAssignmentIDs(ids ...int) *PlatformUserCreate {
	puc.mutation.AddAssignmentIDs(ids...)
	return puc
}

// AddAssignments adds the "assignments" edges to the UserAppRole entity.
func (puc *PlatformUserCreate) AddAssignments(u ...*UserAppRole) *PlatformUserCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puc.AddAssignmentIDs(ids...)
}

// Mutation returns the PlatformUserMutation object of the builder.
func (puc *PlatformUserCreate) Mutation() *PlatformUserMutation {
	return puc.mutation
}

// Save creates the PlatformUser in the database.
func (puc *PlatformUserCreate) Save(ctx context.Context) (*PlatformUser, error) {
	puc.defaults()
	return withHooks(ctx, puc.sqlSave, puc.mutation, puc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (puc *PlatformUserCreate) SaveX(ctx context.Context) *PlatformUser {
	v, err := puc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (puc *PlatformUserCreate) Exec(ctx context.Context) error {
	_, err := puc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puc *PlatformUserCreate) ExecX(ctx context.Context) {
	if err := puc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puc *PlatformUserCreate) defaults() {
	if _, ok := puc.mutation.CreateTime(); !ok {
		v := platformuser.DefaultCreateTime()
		puc.mutation.SetCreateTime(v)
	}
	if _, ok := puc.mutation.UpdateTime(); !ok {
		v := platformuser.DefaultUpdateTime()
		puc.mutation.SetUpdateTime(v)
	}
	if _, ok := puc.mutation.IsActive(); !ok {
		v := platformuser.DefaultIsActive
		puc.mutation.SetIsActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puc *PlatformUserCreate) check() error {
	if _, ok := puc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`db: missing required field "PlatformUser.create_time"`)}
	}
	if _, ok := puc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`db: missing required field "PlatformUser.update_time"`)}
	}
	if _, ok := puc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`db: missing required field "PlatformUser.email"`)}
	}
	if v, ok := puc.mutation.Email(); ok {
		if err := platformuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`db: validator failed for field "PlatformUser.email": %w`, err)}
		}
	}
	if _, ok := puc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`db: missing required field "PlatformUser.is_active"`)}
	}
	return nil
}

func (puc *PlatformUserCreate) sqlSave(ctx context.Context) (*PlatformUser, error) {
	if err := puc.check(); err != nil {
		return nil, err
	}
	_node, _spec := puc.createSpec()
	if err := sqlgraph.CreateNode(ctx, puc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	puc.mutation.id = &_node.ID
	puc.mutation.done = true
	return _node, nil
}

func (puc *PlatformUserCreate) createSpec() (*PlatformUser, *sqlgraph.CreateSpec) {
	var (
		_node = &PlatformUser{config: puc.config}
		_spec = sqlgraph.NewCreateSpec(platformuser.Table, sqlgraph.NewFieldSpec(platformuser.FieldID, field.TypeInt))
	)
	if value, ok := puc.mutation.CreateTime(); ok {
		_spec.SetField(platformuser.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := puc.mutation.UpdateTime(); ok {
		_spec.SetField(platformuser.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := puc.mutation.Email(); ok {
		_spec.SetField(platformuser.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := puc.mutation.DisplayName(); ok {
		_spec.SetField(platformuser.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := puc.mutation.IsActive(); ok {
		_spec.SetField(platformuser.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := puc.mutation.FirstConnectorID(); ok {
		_spec.SetField(platformuser.FieldFirstConnectorID, field.TypeString, value)
		_node.FirstConnectorID = value
	}
	if value, ok := puc.mutation.FirstFederatedUserID(); ok {
		_spec.SetField(platformuser.FieldFirstFederatedUserID, field.TypeString, value)
		_node.FirstFederatedUserID = value
	}
	if value, ok := puc.mutation.LastLogin(); ok {
		_spec.SetField(platformuser.FieldLastLogin, field.TypeTime, value)
		_node.LastLogin = value
	}
	if nodes := puc.mutation.AssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformuser.AssignmentsTable,
			Columns: []string{platformuser.AssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userapprole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlatformUserCreateBulk is the builder for creating many PlatformUser entities in bulk.
type PlatformUserCreateBulk struct {
	config
	err      error
	builders []*PlatformUserCreate
}

// Save creates the PlatformUser entities in the database.
func (pucb *PlatformUserCreateBulk) Save(ctx context.Context) ([]*PlatformUser, error) {
	if pucb.err != nil {
		return nil, pucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pucb.builders))
	nodes := make([]*PlatformUser, len(pucb.builders))
	mutators := make([]Mutator, len(pucb.builders))
	for i := range pucb.builders {
		func(i int, root context.Context) {
			builder := pucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlatformUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pucb *PlatformUserCreateBulk) SaveX(ctx context.Context) []*PlatformUser {
	v, err := pucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pucb *PlatformUserCreateBulk) Exec(ctx context.Context) error {
	_, err := pucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pucb *PlatformUserCreateBulk) ExecX(ctx context.Context) {
	if err := pucb.Exec(ctx); err != nil {
		panic(err)
	}
}
