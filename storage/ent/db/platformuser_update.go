// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dexidp/dex/storage/ent/db/platformfederatedidentity"
	"github.com/dexidp/dex/storage/ent/db/platformtoken"
	"github.com/dexidp/dex/storage/ent/db/platformuser"
	"github.com/dexidp/dex/storage/ent/db/platformuserroleassignment"
	"github.com/dexidp/dex/storage/ent/db/predicate"
)

// PlatformUserUpdate is the builder for updating PlatformUser entities.
type PlatformUserUpdate struct {
	config
	hooks    []Hook
	mutation *PlatformUserMutation
}

// Where appends a list predicates to the PlatformUserUpdate builder.
func (puu *PlatformUserUpdate) Where(ps ...predicate.PlatformUser) *PlatformUserUpdate {
	puu.mutation.Where(ps...)
	return puu
}

// SetUpdateTime sets the "update_time" field.
func (puu *PlatformUserUpdate) SetUpdateTime(t time.Time) *PlatformUserUpdate {
	puu.mutation.SetUpdateTime(t)
	return puu
}

// SetEmail sets the "email" field.
func (puu *PlatformUserUpdate) SetEmail(s string) *PlatformUserUpdate {
	puu.mutation.SetEmail(s)
	return puu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (puu *PlatformUserUpdate) SetNillableEmail(s *string) *PlatformUserUpdate {
	if s != nil {
		puu.SetEmail(*s)
	}
	return puu
}

// SetDisplayName sets the "display_name" field.
func (puu *PlatformUserUpdate) SetDisplayName(s string) *PlatformUserUpdate {
	puu.mutation.SetDisplayName(s)
	return puu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (puu *PlatformUserUpdate) SetNillableDisplayName(s *string) *PlatformUserUpdate {
	if s != nil {
		puu.SetDisplayName(*s)
	}
	return puu
}

// ClearDisplayName clears the value of the "display_name" field.
func (puu *PlatformUserUpdate) ClearDisplayName() *PlatformUserUpdate {
	puu.mutation.ClearDisplayName()
	return puu
}

// SetIsActive sets the "is_active" field.
func (puu *PlatformUserUpdate) SetIsActive(b bool) *PlatformUserUpdate {
	puu.mutation.SetIsActive(b)
	return puu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (puu *PlatformUserUpdate) SetNillableIsActive(b *bool) *PlatformUserUpdate {
	if b != nil {
		puu.SetIsActive(*b)
	}
	return puu
}

// SetLastLogin sets the "last_login" field.
func (puu *PlatformUserUpdate) SetLastLogin(t time.Time) *PlatformUserUpdate {
	puu.mutation.SetLastLogin(t)
	return puu
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (puu *PlatformUserUpdate) SetNillableLastLogin(t *time.Time) *PlatformUserUpdate {
	if t != nil {
		puu.SetLastLogin(*t)
	}
	return puu
}

// ClearLastLogin clears the value of the "last_login" field.
func (puu *PlatformUserUpdate) ClearLastLogin() *PlatformUserUpdate {
	puu.mutation.ClearLastLogin()
	return puu
}

// AddUserRoleAssignmentIDs adds the "user_role_assignments" edge to the PlatformUserRoleAssignment entity by IDs.
func (puu *PlatformUserUpdate) AddUserRoleAssignmentIDs(ids ...int) *PlatformUserUpdate {
	puu.mutation.AddUserRoleAssignmentIDs(ids...)
	return puu
}

// AddUserRoleAssignments adds the "user_role_assignments" edges to the PlatformUserRoleAssignment entity.
func (puu *PlatformUserUpdate) AddUserRoleAssignments(p ...*PlatformUserRoleAssignment) *PlatformUserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puu.AddUserRoleAssignmentIDs(ids...)
}

// AddFederatedIdentityIDs adds the "federated_identities" edge to the PlatformFederatedIdentity entity by IDs.
func (puu *PlatformUserUpdate) AddFederatedIdentityIDs(ids ...int) *PlatformUserUpdate {
	puu.mutation.AddFederatedIdentityIDs(ids...)
	return puu
}

// AddFederatedIdentities adds the "federated_identities" edges to the PlatformFederatedIdentity entity.
func (puu *PlatformUserUpdate) AddFederatedIdentities(p ...*PlatformFederatedIdentity) *PlatformUserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puu.AddFederatedIdentityIDs(ids...)
}

// AddCreatedTokenIDs adds the "created_tokens" edge to the PlatformToken entity by IDs.
func (puu *PlatformUserUpdate) AddCreatedTokenIDs(ids ...int) *PlatformUserUpdate {
	puu.mutation.AddCreatedTokenIDs(ids...)
	return puu
}

// AddCreatedTokens adds the "created_tokens" edges to the PlatformToken entity.
func (puu *PlatformUserUpdate) AddCreatedTokens(p ...*PlatformToken) *PlatformUserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puu.AddCreatedTokenIDs(ids...)
}

// Mutation returns the PlatformUserMutation object of the builder.
func (puu *PlatformUserUpdate) Mutation() *PlatformUserMutation {
	return puu.mutation
}

// ClearUserRoleAssignments clears all "user_role_assignments" edges to the PlatformUserRoleAssignment entity.
func (puu *PlatformUserUpdate) ClearUserRoleAssignments() *PlatformUserUpdate {
	puu.mutation.ClearUserRoleAssignments()
	return puu
}

// RemoveUserRoleAssignmentIDs removes the "user_role_assignments" edge to PlatformUserRoleAssignment entities by IDs.
func (puu *PlatformUserUpdate) RemoveUserRoleAssignmentIDs(ids ...int) *PlatformUserUpdate {
	puu.mutation.RemoveUserRoleAssignmentIDs(ids...)
	return puu
}

// RemoveUserRoleAssignments removes "user_role_assignments" edges to PlatformUserRoleAssignment entities.
func (puu *PlatformUserUpdate) RemoveUserRoleAssignments(p ...*PlatformUserRoleAssignment) *PlatformUserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puu.RemoveUserRoleAssignmentIDs(ids...)
}

// ClearFederatedIdentities clears all "federated_identities" edges to the PlatformFederatedIdentity entity.
func (puu *PlatformUserUpdate) ClearFederatedIdentities() *PlatformUserUpdate {
	puu.mutation.ClearFederatedIdentities()
	return puu
}

// RemoveFederatedIdentityIDs removes the "federated_identities" edge to PlatformFederatedIdentity entities by IDs.
func (puu *PlatformUserUpdate) RemoveFederatedIdentityIDs(ids ...int) *PlatformUserUpdate {
	puu.mutation.RemoveFederatedIdentityIDs(ids...)
	return puu
}

// RemoveFederatedIdentities removes "federated_identities" edges to PlatformFederatedIdentity entities.
func (puu *PlatformUserUpdate) RemoveFederatedIdentities(p ...*PlatformFederatedIdentity) *PlatformUserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puu.RemoveFederatedIdentityIDs(ids...)
}

// ClearCreatedTokens clears all "created_tokens" edges to the PlatformToken entity.
func (puu *PlatformUserUpdate) ClearCreatedTokens() *PlatformUserUpdate {
	puu.mutation.ClearCreatedTokens()
	return puu
}

// RemoveCreatedTokenIDs removes the "created_tokens" edge to PlatformToken entities by IDs.
func (puu *PlatformUserUpdate) RemoveCreatedTokenIDs(ids ...int) *PlatformUserUpdate {
	puu.mutation.RemoveCreatedTokenIDs(ids...)
	return puu
}

// RemoveCreatedTokens removes "created_tokens" edges to PlatformToken entities.
func (puu *PlatformUserUpdate) RemoveCreatedTokens(p ...*PlatformToken) *PlatformUserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puu.RemoveCreatedTokenIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (puu *PlatformUserUpdate) Save(ctx context.Context) (int, error) {
	puu.defaults()
	return withHooks(ctx, puu.sqlSave, puu.mutation, puu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puu *PlatformUserUpdate) SaveX(ctx context.Context) int {
	affected, err := puu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (puu *PlatformUserUpdate) Exec(ctx context.Context) error {
	_, err := puu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puu *PlatformUserUpdate) ExecX(ctx context.Context) {
	if err := puu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puu *PlatformUserUpdate) defaults() {
	if _, ok := puu.mutation.UpdateTime(); !ok {
		v := platformuser.UpdateDefaultUpdateTime()
		puu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puu *PlatformUserUpdate) check() error {
	if v, ok := puu.mutation.Email(); ok {
		if err := platformuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`db: validator failed for field "PlatformUser.email": %w`, err)}
		}
	}
	return nil
}

func (puu *PlatformUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := puu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(platformuser.Table, platformuser.Columns, sqlgraph.NewFieldSpec(platformuser.FieldID, field.TypeInt))
	if ps := puu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puu.mutation.UpdateTime(); ok {
		_spec.SetField(platformuser.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := puu.mutation.Email(); ok {
		_spec.SetField(platformuser.FieldEmail, field.TypeString, value)
	}
	if value, ok := puu.mutation.DisplayName(); ok {
		_spec.SetField(platformuser.FieldDisplayName, field.TypeString, value)
	}
	if puu.mutation.DisplayNameCleared() {
		_spec.ClearField(platformuser.FieldDisplayName, field.TypeString)
	}
	if value, ok := puu.mutation.IsActive(); ok {
		_spec.SetField(platformuser.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := puu.mutation.LastLogin(); ok {
		_spec.SetField(platformuser.FieldLastLogin, field.TypeTime, value)
	}
	if puu.mutation.LastLoginCleared() {
		_spec.ClearField(platformuser.FieldLastLogin, field.TypeTime)
	}
	if puu.mutation.UserRoleAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformuser.UserRoleAssignmentsTable,
			Columns: []string{platformuser.UserRoleAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuserroleassignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puu.mutation.RemovedUserRoleAssignmentsIDs(); len(nodes) > 0 && !puu.mutation.UserRoleAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformuser.UserRoleAssignmentsTable,
			Columns: []string{platformuser.UserRoleAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuserroleassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puu.mutation.UserRoleAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformuser.UserRoleAssignmentsTable,
			Columns: []string{platformuser.UserRoleAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuserroleassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puu.mutation.FederatedIdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformuser.FederatedIdentitiesTable,
			Columns: []string{platformuser.FederatedIdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformfederatedidentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puu.mutation.RemovedFederatedIdentitiesIDs(); len(nodes) > 0 && !puu.mutation.FederatedIdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformuser.FederatedIdentitiesTable,
			Columns: []string{platformuser.FederatedIdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformfederatedidentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puu.mutation.FederatedIdentitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformuser.FederatedIdentitiesTable,
			Columns: []string{platformuser.FederatedIdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformfederatedidentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puu.mutation.CreatedTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformuser.CreatedTokensTable,
			Columns: []string{platformuser.CreatedTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformtoken.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puu.mutation.RemovedCreatedTokensIDs(); len(nodes) > 0 && !puu.mutation.CreatedTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformuser.CreatedTokensTable,
			Columns: []string{platformuser.CreatedTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformtoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puu.mutation.CreatedTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformuser.CreatedTokensTable,
			Columns: []string{platformuser.CreatedTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformtoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, puu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platformuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	puu.mutation.done = true
	return n, nil
}

// PlatformUserUpdateOne is the builder for updating a single PlatformUser entity.
type PlatformUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlatformUserMutation
}

// SetUpdateTime sets the "update_time" field.
func (puuo *PlatformUserUpdateOne) SetUpdateTime(t time.Time) *PlatformUserUpdateOne {
	puuo.mutation.SetUpdateTime(t)
	return puuo
}

// SetEmail sets the "email" field.
func (puuo *PlatformUserUpdateOne) SetEmail(s string) *PlatformUserUpdateOne {
	puuo.mutation.SetEmail(s)
	return puuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (puuo *PlatformUserUpdateOne) SetNillableEmail(s *string) *PlatformUserUpdateOne {
	if s != nil {
		puuo.SetEmail(*s)
	}
	return puuo
}

// SetDisplayName sets the "display_name" field.
func (puuo *PlatformUserUpdateOne) SetDisplayName(s string) *PlatformUserUpdateOne {
	puuo.mutation.SetDisplayName(s)
	return puuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (puuo *PlatformUserUpdateOne) SetNillableDisplayName(s *string) *PlatformUserUpdateOne {
	if s != nil {
		puuo.SetDisplayName(*s)
	}
	return puuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (puuo *PlatformUserUpdateOne) ClearDisplayName() *PlatformUserUpdateOne {
	puuo.mutation.ClearDisplayName()
	return puuo
}

// SetIsActive sets the "is_active" field.
func (puuo *PlatformUserUpdateOne) SetIsActive(b bool) *PlatformUserUpdateOne {
	puuo.mutation.SetIsActive(b)
	return puuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (puuo *PlatformUserUpdateOne) SetNillableIsActive(b *bool) *PlatformUserUpdateOne {
	if b != nil {
		puuo.SetIsActive(*b)
	}
	return puuo
}

// SetLastLogin sets the "last_login" field.
func (puuo *PlatformUserUpdateOne) SetLastLogin(t time.Time) *PlatformUserUpdateOne {
	puuo.mutation.SetLastLogin(t)
	return puuo
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (puuo *PlatformUserUpdateOne) SetNillableLastLogin(t *time.Time) *PlatformUserUpdateOne {
	if t != nil {
		puuo.SetLastLogin(*t)
	}
	return puuo
}

// ClearLastLogin clears the value of the "last_login" field.
func (puuo *PlatformUserUpdateOne) ClearLastLogin() *PlatformUserUpdateOne {
	puuo.mutation.ClearLastLogin()
	return puuo
}

// AddUserRoleAssignmentIDs adds the "user_role_assignments" edge to the PlatformUserRoleAssignment entity by IDs.
func (puuo *PlatformUserUpdateOne) AddUserRoleAssignmentIDs(ids ...int) *PlatformUserUpdateOne {
	puuo.mutation.AddUserRoleAssignmentIDs(ids...)
	return puuo
}

// AddUserRoleAssignments adds the "user_role_assignments" edges to the PlatformUserRoleAssignment entity.
func (puuo *PlatformUserUpdateOne) AddUserRoleAssignments(p ...*PlatformUserRoleAssignment) *PlatformUserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puuo.AddUserRoleAssignmentIDs(ids...)
}

// AddFederatedIdentityIDs adds the "federated_identities" edge to the PlatformFederatedIdentity entity by IDs.
func (puuo *PlatformUserUpdateOne) AddFederatedIdentityIDs(ids ...int) *PlatformUserUpdateOne {
	puuo.mutation.AddFederatedIdentityIDs(ids...)
	return puuo
}

// AddFederatedIdentities adds the "federated_identities" edges to the PlatformFederatedIdentity entity.
func (puuo *PlatformUserUpdateOne) AddFederatedIdentities(p ...*PlatformFederatedIdentity) *PlatformUserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puuo.AddFederatedIdentityIDs(ids...)
}

// AddCreatedTokenIDs adds the "created_tokens" edge to the PlatformToken entity by IDs.
func (puuo *PlatformUserUpdateOne) AddCreatedTokenIDs(ids ...int) *PlatformUserUpdateOne {
	puuo.mutation.AddCreatedTokenIDs(ids...)
	return puuo
}

// AddCreatedTokens adds the "created_tokens" edges to the PlatformToken entity.
func (puuo *PlatformUserUpdateOne) AddCreatedTokens(p ...*PlatformToken) *PlatformUserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puuo.AddCreatedTokenIDs(ids...)
}

// Mutation returns the PlatformUserMutation object of the builder.
func (puuo *PlatformUserUpdateOne) Mutation() *PlatformUserMutation {
	return puuo.mutation
}

// ClearUserRoleAssignments clears all "user_role_assignments" edges to the PlatformUserRoleAssignment entity.
func (puuo *PlatformUserUpdateOne) ClearUserRoleAssignments() *PlatformUserUpdateOne {
	puuo.mutation.ClearUserRoleAssignments()
	return puuo
}

// RemoveUserRoleAssignmentIDs removes the "user_role_assignments" edge to PlatformUserRoleAssignment entities by IDs.
func (puuo *PlatformUserUpdateOne) RemoveUserRoleAssignmentIDs(ids ...int) *PlatformUserUpdateOne {
	puuo.mutation.RemoveUserRoleAssignmentIDs(ids...)
	return puuo
}

// RemoveUserRoleAssignments removes "user_role_assignments" edges to PlatformUserRoleAssignment entities.
func (puuo *PlatformUserUpdateOne) RemoveUserRoleAssignments(p ...*PlatformUserRoleAssignment) *PlatformUserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puuo.RemoveUserRoleAssignmentIDs(ids...)
}

// ClearFederatedIdentities clears all "federated_identities" edges to the PlatformFederatedIdentity entity.
func (puuo *PlatformUserUpdateOne) ClearFederatedIdentities() *PlatformUserUpdateOne {
	puuo.mutation.ClearFederatedIdentities()
	return puuo
}

// RemoveFederatedIdentityIDs removes the "federated_identities" edge to PlatformFederatedIdentity entities by IDs.
func (puuo *PlatformUserUpdateOne) RemoveFederatedIdentityIDs(ids ...int) *PlatformUserUpdateOne {
	puuo.mutation.RemoveFederatedIdentityIDs(ids...)
	return puuo
}

// RemoveFederatedIdentities removes "federated_identities" edges to PlatformFederatedIdentity entities.
func (puuo *PlatformUserUpdateOne) RemoveFederatedIdentities(p ...*PlatformFederatedIdentity) *PlatformUserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puuo.RemoveFederatedIdentityIDs(ids...)
}

// ClearCreatedTokens clears all "created_tokens" edges to the PlatformToken entity.
func (puuo *PlatformUserUpdateOne) ClearCreatedTokens() *PlatformUserUpdateOne {
	puuo.mutation.ClearCreatedTokens()
	return puuo
}

// RemoveCreatedTokenIDs removes the "created_tokens" edge to PlatformToken entities by IDs.
func (puuo *PlatformUserUpdateOne) RemoveCreatedTokenIDs(ids ...int) *PlatformUserUpdateOne {
	puuo.mutation.RemoveCreatedTokenIDs(ids...)
	return puuo
}

// RemoveCreatedTokens removes "created_tokens" edges to PlatformToken entities.
func (puuo *PlatformUserUpdateOne) RemoveCreatedTokens(p ...*PlatformToken) *PlatformUserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puuo.RemoveCreatedTokenIDs(ids...)
}

// Where appends a list predicates to the PlatformUserUpdate builder.
func (puuo *PlatformUserUpdateOne) Where(ps ...predicate.PlatformUser) *PlatformUserUpdateOne {
	puuo.mutation.Where(ps...)
	return puuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puuo *PlatformUserUpdateOne) Select(field string, fields ...string) *PlatformUserUpdateOne {
	puuo.fields = append([]string{field}, fields...)
	return puuo
}

// Save executes the query and returns the updated PlatformUser entity.
func (puuo *PlatformUserUpdateOne) Save(ctx context.Context) (*PlatformUser, error) {
	puuo.defaults()
	return withHooks(ctx, puuo.sqlSave, puuo.mutation, puuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puuo *PlatformUserUpdateOne) SaveX(ctx context.Context) *PlatformUser {
	node, err := puuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puuo *PlatformUserUpdateOne) Exec(ctx context.Context) error {
	_, err := puuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puuo *PlatformUserUpdateOne) ExecX(ctx context.Context) {
	if err := puuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puuo *PlatformUserUpdateOne) defaults() {
	if _, ok := puuo.mutation.UpdateTime(); !ok {
		v := platformuser.UpdateDefaultUpdateTime()
		puuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puuo *PlatformUserUpdateOne) check() error {
	if v, ok := puuo.mutation.Email(); ok {
		if err := platformuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`db: validator failed for field "PlatformUser.email": %w`, err)}
		}
	}
	return nil
}

func (puuo *PlatformUserUpdateOne) sqlSave(ctx context.Context) (_node *PlatformUser, err error) {
	if err := puuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(platformuser.Table, platformuser.Columns, sqlgraph.NewFieldSpec(platformuser.FieldID, field.TypeInt))
	id, ok := puuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "PlatformUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, platformuser.FieldID)
		for _, f := range fields {
			if !platformuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != platformuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puuo.mutation.UpdateTime(); ok {
		_spec.SetField(platformuser.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := puuo.mutation.Email(); ok {
		_spec.SetField(platformuser.FieldEmail, field.TypeString, value)
	}
	if value, ok := puuo.mutation.DisplayName(); ok {
		_spec.SetField(platformuser.FieldDisplayName, field.TypeString, value)
	}
	if puuo.mutation.DisplayNameCleared() {
		_spec.ClearField(platformuser.FieldDisplayName, field.TypeString)
	}
	if value, ok := puuo.mutation.IsActive(); ok {
		_spec.SetField(platformuser.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := puuo.mutation.LastLogin(); ok {
		_spec.SetField(platformuser.FieldLastLogin, field.TypeTime, value)
	}
	if puuo.mutation.LastLoginCleared() {
		_spec.ClearField(platformuser.FieldLastLogin, field.TypeTime)
	}
	if puuo.mutation.UserRoleAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformuser.UserRoleAssignmentsTable,
			Columns: []string{platformuser.UserRoleAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuserroleassignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puuo.mutation.RemovedUserRoleAssignmentsIDs(); len(nodes) > 0 && !puuo.mutation.UserRoleAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformuser.UserRoleAssignmentsTable,
			Columns: []string{platformuser.UserRoleAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuserroleassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puuo.mutation.UserRoleAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformuser.UserRoleAssignmentsTable,
			Columns: []string{platformuser.UserRoleAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuserroleassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puuo.mutation.FederatedIdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformuser.FederatedIdentitiesTable,
			Columns: []string{platformuser.FederatedIdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformfederatedidentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puuo.mutation.RemovedFederatedIdentitiesIDs(); len(nodes) > 0 && !puuo.mutation.FederatedIdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformuser.FederatedIdentitiesTable,
			Columns: []string{platformuser.FederatedIdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformfederatedidentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puuo.mutation.FederatedIdentitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformuser.FederatedIdentitiesTable,
			Columns: []string{platformuser.FederatedIdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformfederatedidentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puuo.mutation.CreatedTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformuser.CreatedTokensTable,
			Columns: []string{platformuser.CreatedTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformtoken.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puuo.mutation.RemovedCreatedTokensIDs(); len(nodes) > 0 && !puuo.mutation.CreatedTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformuser.CreatedTokensTable,
			Columns: []string{platformuser.CreatedTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformtoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puuo.mutation.CreatedTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformuser.CreatedTokensTable,
			Columns: []string{platformuser.CreatedTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformtoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlatformUser{config: puuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platformuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puuo.mutation.done = true
	return _node, nil
}
