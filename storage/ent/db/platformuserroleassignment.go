// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dexidp/dex/storage/ent/db/platformapprole"
	"github.com/dexidp/dex/storage/ent/db/platformuser"
	"github.com/dexidp/dex/storage/ent/db/platformuserroleassignment"
)

// PlatformUserRoleAssignment is the model entity for the PlatformUserRoleAssignment schema.
type PlatformUserRoleAssignment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Indicates if this specific role assignment instance is currently active.
	IsActive bool `json:"is_active,omitempty"`
	// Timestamp when the role was initially assigned to the user.
	AssignedAt time.Time `json:"assigned_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlatformUserRoleAssignmentQuery when eager-loading is set.
	Edges                               PlatformUserRoleAssignmentEdges `json:"edges"`
	platform_app_role_user_assignments  *int
	platform_user_user_role_assignments *int
	selectValues                        sql.SelectValues
}

// PlatformUserRoleAssignmentEdges holds the relations/edges for other nodes in the graph.
type PlatformUserRoleAssignmentEdges struct {
	// User holds the value of the user edge.
	User *PlatformUser `json:"user,omitempty"`
	// Role holds the value of the role edge.
	Role *PlatformAppRole `json:"role,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlatformUserRoleAssignmentEdges) UserOrErr() (*PlatformUser, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: platformuser.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlatformUserRoleAssignmentEdges) RoleOrErr() (*PlatformAppRole, error) {
	if e.Role != nil {
		return e.Role, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: platformapprole.Label}
	}
	return nil, &NotLoadedError{edge: "role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlatformUserRoleAssignment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case platformuserroleassignment.FieldIsActive:
			values[i] = new(sql.NullBool)
		case platformuserroleassignment.FieldID:
			values[i] = new(sql.NullInt64)
		case platformuserroleassignment.FieldUpdateTime, platformuserroleassignment.FieldAssignedAt:
			values[i] = new(sql.NullTime)
		case platformuserroleassignment.ForeignKeys[0]: // platform_app_role_user_assignments
			values[i] = new(sql.NullInt64)
		case platformuserroleassignment.ForeignKeys[1]: // platform_user_user_role_assignments
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlatformUserRoleAssignment fields.
func (pura *PlatformUserRoleAssignment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case platformuserroleassignment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pura.ID = int(value.Int64)
		case platformuserroleassignment.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pura.UpdateTime = value.Time
			}
		case platformuserroleassignment.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				pura.IsActive = value.Bool
			}
		case platformuserroleassignment.FieldAssignedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field assigned_at", values[i])
			} else if value.Valid {
				pura.AssignedAt = value.Time
			}
		case platformuserroleassignment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field platform_app_role_user_assignments", value)
			} else if value.Valid {
				pura.platform_app_role_user_assignments = new(int)
				*pura.platform_app_role_user_assignments = int(value.Int64)
			}
		case platformuserroleassignment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field platform_user_user_role_assignments", value)
			} else if value.Valid {
				pura.platform_user_user_role_assignments = new(int)
				*pura.platform_user_user_role_assignments = int(value.Int64)
			}
		default:
			pura.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PlatformUserRoleAssignment.
// This includes values selected through modifiers, order, etc.
func (pura *PlatformUserRoleAssignment) Value(name string) (ent.Value, error) {
	return pura.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the PlatformUserRoleAssignment entity.
func (pura *PlatformUserRoleAssignment) QueryUser() *PlatformUserQuery {
	return NewPlatformUserRoleAssignmentClient(pura.config).QueryUser(pura)
}

// QueryRole queries the "role" edge of the PlatformUserRoleAssignment entity.
func (pura *PlatformUserRoleAssignment) QueryRole() *PlatformAppRoleQuery {
	return NewPlatformUserRoleAssignmentClient(pura.config).QueryRole(pura)
}

// Update returns a builder for updating this PlatformUserRoleAssignment.
// Note that you need to call PlatformUserRoleAssignment.Unwrap() before calling this method if this PlatformUserRoleAssignment
// was returned from a transaction, and the transaction was committed or rolled back.
func (pura *PlatformUserRoleAssignment) Update() *PlatformUserRoleAssignmentUpdateOne {
	return NewPlatformUserRoleAssignmentClient(pura.config).UpdateOne(pura)
}

// Unwrap unwraps the PlatformUserRoleAssignment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pura *PlatformUserRoleAssignment) Unwrap() *PlatformUserRoleAssignment {
	_tx, ok := pura.config.driver.(*txDriver)
	if !ok {
		panic("db: PlatformUserRoleAssignment is not a transactional entity")
	}
	pura.config.driver = _tx.drv
	return pura
}

// String implements the fmt.Stringer.
func (pura *PlatformUserRoleAssignment) String() string {
	var builder strings.Builder
	builder.WriteString("PlatformUserRoleAssignment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pura.ID))
	builder.WriteString("update_time=")
	builder.WriteString(pura.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", pura.IsActive))
	builder.WriteString(", ")
	builder.WriteString("assigned_at=")
	builder.WriteString(pura.AssignedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PlatformUserRoleAssignments is a parsable slice of PlatformUserRoleAssignment.
type PlatformUserRoleAssignments []*PlatformUserRoleAssignment
