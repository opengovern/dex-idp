// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dexidp/dex/storage/ent/db/platformapprole"
	"github.com/dexidp/dex/storage/ent/db/platformuser"
	"github.com/dexidp/dex/storage/ent/db/platformuserroleassignment"
)

// PlatformUserRoleAssignmentCreate is the builder for creating a PlatformUserRoleAssignment entity.
type PlatformUserRoleAssignmentCreate struct {
	config
	mutation *PlatformUserRoleAssignmentMutation
	hooks    []Hook
}

// SetUpdateTime sets the "update_time" field.
func (purac *PlatformUserRoleAssignmentCreate) SetUpdateTime(t time.Time) *PlatformUserRoleAssignmentCreate {
	purac.mutation.SetUpdateTime(t)
	return purac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (purac *PlatformUserRoleAssignmentCreate) SetNillableUpdateTime(t *time.Time) *PlatformUserRoleAssignmentCreate {
	if t != nil {
		purac.SetUpdateTime(*t)
	}
	return purac
}

// SetIsActive sets the "is_active" field.
func (purac *PlatformUserRoleAssignmentCreate) SetIsActive(b bool) *PlatformUserRoleAssignmentCreate {
	purac.mutation.SetIsActive(b)
	return purac
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (purac *PlatformUserRoleAssignmentCreate) SetNillableIsActive(b *bool) *PlatformUserRoleAssignmentCreate {
	if b != nil {
		purac.SetIsActive(*b)
	}
	return purac
}

// SetAssignedAt sets the "assigned_at" field.
func (purac *PlatformUserRoleAssignmentCreate) SetAssignedAt(t time.Time) *PlatformUserRoleAssignmentCreate {
	purac.mutation.SetAssignedAt(t)
	return purac
}

// SetNillableAssignedAt sets the "assigned_at" field if the given value is not nil.
func (purac *PlatformUserRoleAssignmentCreate) SetNillableAssignedAt(t *time.Time) *PlatformUserRoleAssignmentCreate {
	if t != nil {
		purac.SetAssignedAt(*t)
	}
	return purac
}

// SetUserID sets the "user" edge to the PlatformUser entity by ID.
func (purac *PlatformUserRoleAssignmentCreate) SetUserID(id int) *PlatformUserRoleAssignmentCreate {
	purac.mutation.SetUserID(id)
	return purac
}

// SetUser sets the "user" edge to the PlatformUser entity.
func (purac *PlatformUserRoleAssignmentCreate) SetUser(p *PlatformUser) *PlatformUserRoleAssignmentCreate {
	return purac.SetUserID(p.ID)
}

// SetRoleID sets the "role" edge to the PlatformAppRole entity by ID.
func (purac *PlatformUserRoleAssignmentCreate) SetRoleID(id int) *PlatformUserRoleAssignmentCreate {
	purac.mutation.SetRoleID(id)
	return purac
}

// SetRole sets the "role" edge to the PlatformAppRole entity.
func (purac *PlatformUserRoleAssignmentCreate) SetRole(p *PlatformAppRole) *PlatformUserRoleAssignmentCreate {
	return purac.SetRoleID(p.ID)
}

// Mutation returns the PlatformUserRoleAssignmentMutation object of the builder.
func (purac *PlatformUserRoleAssignmentCreate) Mutation() *PlatformUserRoleAssignmentMutation {
	return purac.mutation
}

// Save creates the PlatformUserRoleAssignment in the database.
func (purac *PlatformUserRoleAssignmentCreate) Save(ctx context.Context) (*PlatformUserRoleAssignment, error) {
	purac.defaults()
	return withHooks(ctx, purac.sqlSave, purac.mutation, purac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (purac *PlatformUserRoleAssignmentCreate) SaveX(ctx context.Context) *PlatformUserRoleAssignment {
	v, err := purac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (purac *PlatformUserRoleAssignmentCreate) Exec(ctx context.Context) error {
	_, err := purac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (purac *PlatformUserRoleAssignmentCreate) ExecX(ctx context.Context) {
	if err := purac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (purac *PlatformUserRoleAssignmentCreate) defaults() {
	if _, ok := purac.mutation.UpdateTime(); !ok {
		v := platformuserroleassignment.DefaultUpdateTime()
		purac.mutation.SetUpdateTime(v)
	}
	if _, ok := purac.mutation.IsActive(); !ok {
		v := platformuserroleassignment.DefaultIsActive
		purac.mutation.SetIsActive(v)
	}
	if _, ok := purac.mutation.AssignedAt(); !ok {
		v := platformuserroleassignment.DefaultAssignedAt()
		purac.mutation.SetAssignedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (purac *PlatformUserRoleAssignmentCreate) check() error {
	if _, ok := purac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`db: missing required field "PlatformUserRoleAssignment.update_time"`)}
	}
	if _, ok := purac.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`db: missing required field "PlatformUserRoleAssignment.is_active"`)}
	}
	if _, ok := purac.mutation.AssignedAt(); !ok {
		return &ValidationError{Name: "assigned_at", err: errors.New(`db: missing required field "PlatformUserRoleAssignment.assigned_at"`)}
	}
	if len(purac.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`db: missing required edge "PlatformUserRoleAssignment.user"`)}
	}
	if len(purac.mutation.RoleIDs()) == 0 {
		return &ValidationError{Name: "role", err: errors.New(`db: missing required edge "PlatformUserRoleAssignment.role"`)}
	}
	return nil
}

func (purac *PlatformUserRoleAssignmentCreate) sqlSave(ctx context.Context) (*PlatformUserRoleAssignment, error) {
	if err := purac.check(); err != nil {
		return nil, err
	}
	_node, _spec := purac.createSpec()
	if err := sqlgraph.CreateNode(ctx, purac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	purac.mutation.id = &_node.ID
	purac.mutation.done = true
	return _node, nil
}

func (purac *PlatformUserRoleAssignmentCreate) createSpec() (*PlatformUserRoleAssignment, *sqlgraph.CreateSpec) {
	var (
		_node = &PlatformUserRoleAssignment{config: purac.config}
		_spec = sqlgraph.NewCreateSpec(platformuserroleassignment.Table, sqlgraph.NewFieldSpec(platformuserroleassignment.FieldID, field.TypeInt))
	)
	if value, ok := purac.mutation.UpdateTime(); ok {
		_spec.SetField(platformuserroleassignment.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := purac.mutation.IsActive(); ok {
		_spec.SetField(platformuserroleassignment.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := purac.mutation.AssignedAt(); ok {
		_spec.SetField(platformuserroleassignment.FieldAssignedAt, field.TypeTime, value)
		_node.AssignedAt = value
	}
	if nodes := purac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformuserroleassignment.UserTable,
			Columns: []string{platformuserroleassignment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.platform_user_user_role_assignments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := purac.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformuserroleassignment.RoleTable,
			Columns: []string{platformuserroleassignment.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformapprole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.platform_app_role_user_assignments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlatformUserRoleAssignmentCreateBulk is the builder for creating many PlatformUserRoleAssignment entities in bulk.
type PlatformUserRoleAssignmentCreateBulk struct {
	config
	err      error
	builders []*PlatformUserRoleAssignmentCreate
}

// Save creates the PlatformUserRoleAssignment entities in the database.
func (puracb *PlatformUserRoleAssignmentCreateBulk) Save(ctx context.Context) ([]*PlatformUserRoleAssignment, error) {
	if puracb.err != nil {
		return nil, puracb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(puracb.builders))
	nodes := make([]*PlatformUserRoleAssignment, len(puracb.builders))
	mutators := make([]Mutator, len(puracb.builders))
	for i := range puracb.builders {
		func(i int, root context.Context) {
			builder := puracb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlatformUserRoleAssignmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, puracb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, puracb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, puracb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (puracb *PlatformUserRoleAssignmentCreateBulk) SaveX(ctx context.Context) []*PlatformUserRoleAssignment {
	v, err := puracb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (puracb *PlatformUserRoleAssignmentCreateBulk) Exec(ctx context.Context) error {
	_, err := puracb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puracb *PlatformUserRoleAssignmentCreateBulk) ExecX(ctx context.Context) {
	if err := puracb.Exec(ctx); err != nil {
		panic(err)
	}
}
