// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dexidp/dex/storage/ent/db/platformuserroleassignment"
	"github.com/dexidp/dex/storage/ent/db/predicate"
)

// PlatformUserRoleAssignmentDelete is the builder for deleting a PlatformUserRoleAssignment entity.
type PlatformUserRoleAssignmentDelete struct {
	config
	hooks    []Hook
	mutation *PlatformUserRoleAssignmentMutation
}

// Where appends a list predicates to the PlatformUserRoleAssignmentDelete builder.
func (purad *PlatformUserRoleAssignmentDelete) Where(ps ...predicate.PlatformUserRoleAssignment) *PlatformUserRoleAssignmentDelete {
	purad.mutation.Where(ps...)
	return purad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (purad *PlatformUserRoleAssignmentDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, purad.sqlExec, purad.mutation, purad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (purad *PlatformUserRoleAssignmentDelete) ExecX(ctx context.Context) int {
	n, err := purad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (purad *PlatformUserRoleAssignmentDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(platformuserroleassignment.Table, sqlgraph.NewFieldSpec(platformuserroleassignment.FieldID, field.TypeInt))
	if ps := purad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, purad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	purad.mutation.done = true
	return affected, err
}

// PlatformUserRoleAssignmentDeleteOne is the builder for deleting a single PlatformUserRoleAssignment entity.
type PlatformUserRoleAssignmentDeleteOne struct {
	purad *PlatformUserRoleAssignmentDelete
}

// Where appends a list predicates to the PlatformUserRoleAssignmentDelete builder.
func (purado *PlatformUserRoleAssignmentDeleteOne) Where(ps ...predicate.PlatformUserRoleAssignment) *PlatformUserRoleAssignmentDeleteOne {
	purado.purad.mutation.Where(ps...)
	return purado
}

// Exec executes the deletion query.
func (purado *PlatformUserRoleAssignmentDeleteOne) Exec(ctx context.Context) error {
	n, err := purado.purad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{platformuserroleassignment.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (purado *PlatformUserRoleAssignmentDeleteOne) ExecX(ctx context.Context) {
	if err := purado.Exec(ctx); err != nil {
		panic(err)
	}
}
