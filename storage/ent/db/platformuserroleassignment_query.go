// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dexidp/dex/storage/ent/db/platformapprole"
	"github.com/dexidp/dex/storage/ent/db/platformuser"
	"github.com/dexidp/dex/storage/ent/db/platformuserroleassignment"
	"github.com/dexidp/dex/storage/ent/db/predicate"
)

// PlatformUserRoleAssignmentQuery is the builder for querying PlatformUserRoleAssignment entities.
type PlatformUserRoleAssignmentQuery struct {
	config
	ctx        *QueryContext
	order      []platformuserroleassignment.OrderOption
	inters     []Interceptor
	predicates []predicate.PlatformUserRoleAssignment
	withUser   *PlatformUserQuery
	withRole   *PlatformAppRoleQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PlatformUserRoleAssignmentQuery builder.
func (puraq *PlatformUserRoleAssignmentQuery) Where(ps ...predicate.PlatformUserRoleAssignment) *PlatformUserRoleAssignmentQuery {
	puraq.predicates = append(puraq.predicates, ps...)
	return puraq
}

// Limit the number of records to be returned by this query.
func (puraq *PlatformUserRoleAssignmentQuery) Limit(limit int) *PlatformUserRoleAssignmentQuery {
	puraq.ctx.Limit = &limit
	return puraq
}

// Offset to start from.
func (puraq *PlatformUserRoleAssignmentQuery) Offset(offset int) *PlatformUserRoleAssignmentQuery {
	puraq.ctx.Offset = &offset
	return puraq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (puraq *PlatformUserRoleAssignmentQuery) Unique(unique bool) *PlatformUserRoleAssignmentQuery {
	puraq.ctx.Unique = &unique
	return puraq
}

// Order specifies how the records should be ordered.
func (puraq *PlatformUserRoleAssignmentQuery) Order(o ...platformuserroleassignment.OrderOption) *PlatformUserRoleAssignmentQuery {
	puraq.order = append(puraq.order, o...)
	return puraq
}

// QueryUser chains the current query on the "user" edge.
func (puraq *PlatformUserRoleAssignmentQuery) QueryUser() *PlatformUserQuery {
	query := (&PlatformUserClient{config: puraq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := puraq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := puraq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(platformuserroleassignment.Table, platformuserroleassignment.FieldID, selector),
			sqlgraph.To(platformuser.Table, platformuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, platformuserroleassignment.UserTable, platformuserroleassignment.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(puraq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRole chains the current query on the "role" edge.
func (puraq *PlatformUserRoleAssignmentQuery) QueryRole() *PlatformAppRoleQuery {
	query := (&PlatformAppRoleClient{config: puraq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := puraq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := puraq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(platformuserroleassignment.Table, platformuserroleassignment.FieldID, selector),
			sqlgraph.To(platformapprole.Table, platformapprole.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, platformuserroleassignment.RoleTable, platformuserroleassignment.RoleColumn),
		)
		fromU = sqlgraph.SetNeighbors(puraq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PlatformUserRoleAssignment entity from the query.
// Returns a *NotFoundError when no PlatformUserRoleAssignment was found.
func (puraq *PlatformUserRoleAssignmentQuery) First(ctx context.Context) (*PlatformUserRoleAssignment, error) {
	nodes, err := puraq.Limit(1).All(setContextOp(ctx, puraq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{platformuserroleassignment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (puraq *PlatformUserRoleAssignmentQuery) FirstX(ctx context.Context) *PlatformUserRoleAssignment {
	node, err := puraq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PlatformUserRoleAssignment ID from the query.
// Returns a *NotFoundError when no PlatformUserRoleAssignment ID was found.
func (puraq *PlatformUserRoleAssignmentQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = puraq.Limit(1).IDs(setContextOp(ctx, puraq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{platformuserroleassignment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (puraq *PlatformUserRoleAssignmentQuery) FirstIDX(ctx context.Context) int {
	id, err := puraq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PlatformUserRoleAssignment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PlatformUserRoleAssignment entity is found.
// Returns a *NotFoundError when no PlatformUserRoleAssignment entities are found.
func (puraq *PlatformUserRoleAssignmentQuery) Only(ctx context.Context) (*PlatformUserRoleAssignment, error) {
	nodes, err := puraq.Limit(2).All(setContextOp(ctx, puraq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{platformuserroleassignment.Label}
	default:
		return nil, &NotSingularError{platformuserroleassignment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (puraq *PlatformUserRoleAssignmentQuery) OnlyX(ctx context.Context) *PlatformUserRoleAssignment {
	node, err := puraq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PlatformUserRoleAssignment ID in the query.
// Returns a *NotSingularError when more than one PlatformUserRoleAssignment ID is found.
// Returns a *NotFoundError when no entities are found.
func (puraq *PlatformUserRoleAssignmentQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = puraq.Limit(2).IDs(setContextOp(ctx, puraq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{platformuserroleassignment.Label}
	default:
		err = &NotSingularError{platformuserroleassignment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (puraq *PlatformUserRoleAssignmentQuery) OnlyIDX(ctx context.Context) int {
	id, err := puraq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PlatformUserRoleAssignments.
func (puraq *PlatformUserRoleAssignmentQuery) All(ctx context.Context) ([]*PlatformUserRoleAssignment, error) {
	ctx = setContextOp(ctx, puraq.ctx, ent.OpQueryAll)
	if err := puraq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PlatformUserRoleAssignment, *PlatformUserRoleAssignmentQuery]()
	return withInterceptors[[]*PlatformUserRoleAssignment](ctx, puraq, qr, puraq.inters)
}

// AllX is like All, but panics if an error occurs.
func (puraq *PlatformUserRoleAssignmentQuery) AllX(ctx context.Context) []*PlatformUserRoleAssignment {
	nodes, err := puraq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PlatformUserRoleAssignment IDs.
func (puraq *PlatformUserRoleAssignmentQuery) IDs(ctx context.Context) (ids []int, err error) {
	if puraq.ctx.Unique == nil && puraq.path != nil {
		puraq.Unique(true)
	}
	ctx = setContextOp(ctx, puraq.ctx, ent.OpQueryIDs)
	if err = puraq.Select(platformuserroleassignment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (puraq *PlatformUserRoleAssignmentQuery) IDsX(ctx context.Context) []int {
	ids, err := puraq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (puraq *PlatformUserRoleAssignmentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, puraq.ctx, ent.OpQueryCount)
	if err := puraq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, puraq, querierCount[*PlatformUserRoleAssignmentQuery](), puraq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (puraq *PlatformUserRoleAssignmentQuery) CountX(ctx context.Context) int {
	count, err := puraq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (puraq *PlatformUserRoleAssignmentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, puraq.ctx, ent.OpQueryExist)
	switch _, err := puraq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (puraq *PlatformUserRoleAssignmentQuery) ExistX(ctx context.Context) bool {
	exist, err := puraq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PlatformUserRoleAssignmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (puraq *PlatformUserRoleAssignmentQuery) Clone() *PlatformUserRoleAssignmentQuery {
	if puraq == nil {
		return nil
	}
	return &PlatformUserRoleAssignmentQuery{
		config:     puraq.config,
		ctx:        puraq.ctx.Clone(),
		order:      append([]platformuserroleassignment.OrderOption{}, puraq.order...),
		inters:     append([]Interceptor{}, puraq.inters...),
		predicates: append([]predicate.PlatformUserRoleAssignment{}, puraq.predicates...),
		withUser:   puraq.withUser.Clone(),
		withRole:   puraq.withRole.Clone(),
		// clone intermediate query.
		sql:  puraq.sql.Clone(),
		path: puraq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (puraq *PlatformUserRoleAssignmentQuery) WithUser(opts ...func(*PlatformUserQuery)) *PlatformUserRoleAssignmentQuery {
	query := (&PlatformUserClient{config: puraq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	puraq.withUser = query
	return puraq
}

// WithRole tells the query-builder to eager-load the nodes that are connected to
// the "role" edge. The optional arguments are used to configure the query builder of the edge.
func (puraq *PlatformUserRoleAssignmentQuery) WithRole(opts ...func(*PlatformAppRoleQuery)) *PlatformUserRoleAssignmentQuery {
	query := (&PlatformAppRoleClient{config: puraq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	puraq.withRole = query
	return puraq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UpdateTime time.Time `json:"update_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PlatformUserRoleAssignment.Query().
//		GroupBy(platformuserroleassignment.FieldUpdateTime).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (puraq *PlatformUserRoleAssignmentQuery) GroupBy(field string, fields ...string) *PlatformUserRoleAssignmentGroupBy {
	puraq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PlatformUserRoleAssignmentGroupBy{build: puraq}
	grbuild.flds = &puraq.ctx.Fields
	grbuild.label = platformuserroleassignment.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UpdateTime time.Time `json:"update_time,omitempty"`
//	}
//
//	client.PlatformUserRoleAssignment.Query().
//		Select(platformuserroleassignment.FieldUpdateTime).
//		Scan(ctx, &v)
func (puraq *PlatformUserRoleAssignmentQuery) Select(fields ...string) *PlatformUserRoleAssignmentSelect {
	puraq.ctx.Fields = append(puraq.ctx.Fields, fields...)
	sbuild := &PlatformUserRoleAssignmentSelect{PlatformUserRoleAssignmentQuery: puraq}
	sbuild.label = platformuserroleassignment.Label
	sbuild.flds, sbuild.scan = &puraq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PlatformUserRoleAssignmentSelect configured with the given aggregations.
func (puraq *PlatformUserRoleAssignmentQuery) Aggregate(fns ...AggregateFunc) *PlatformUserRoleAssignmentSelect {
	return puraq.Select().Aggregate(fns...)
}

func (puraq *PlatformUserRoleAssignmentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range puraq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, puraq); err != nil {
				return err
			}
		}
	}
	for _, f := range puraq.ctx.Fields {
		if !platformuserroleassignment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if puraq.path != nil {
		prev, err := puraq.path(ctx)
		if err != nil {
			return err
		}
		puraq.sql = prev
	}
	return nil
}

func (puraq *PlatformUserRoleAssignmentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PlatformUserRoleAssignment, error) {
	var (
		nodes       = []*PlatformUserRoleAssignment{}
		withFKs     = puraq.withFKs
		_spec       = puraq.querySpec()
		loadedTypes = [2]bool{
			puraq.withUser != nil,
			puraq.withRole != nil,
		}
	)
	if puraq.withUser != nil || puraq.withRole != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, platformuserroleassignment.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PlatformUserRoleAssignment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PlatformUserRoleAssignment{config: puraq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, puraq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := puraq.withUser; query != nil {
		if err := puraq.loadUser(ctx, query, nodes, nil,
			func(n *PlatformUserRoleAssignment, e *PlatformUser) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := puraq.withRole; query != nil {
		if err := puraq.loadRole(ctx, query, nodes, nil,
			func(n *PlatformUserRoleAssignment, e *PlatformAppRole) { n.Edges.Role = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (puraq *PlatformUserRoleAssignmentQuery) loadUser(ctx context.Context, query *PlatformUserQuery, nodes []*PlatformUserRoleAssignment, init func(*PlatformUserRoleAssignment), assign func(*PlatformUserRoleAssignment, *PlatformUser)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*PlatformUserRoleAssignment)
	for i := range nodes {
		if nodes[i].platform_user_user_role_assignments == nil {
			continue
		}
		fk := *nodes[i].platform_user_user_role_assignments
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(platformuser.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "platform_user_user_role_assignments" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (puraq *PlatformUserRoleAssignmentQuery) loadRole(ctx context.Context, query *PlatformAppRoleQuery, nodes []*PlatformUserRoleAssignment, init func(*PlatformUserRoleAssignment), assign func(*PlatformUserRoleAssignment, *PlatformAppRole)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*PlatformUserRoleAssignment)
	for i := range nodes {
		if nodes[i].platform_app_role_user_assignments == nil {
			continue
		}
		fk := *nodes[i].platform_app_role_user_assignments
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(platformapprole.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "platform_app_role_user_assignments" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (puraq *PlatformUserRoleAssignmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := puraq.querySpec()
	_spec.Node.Columns = puraq.ctx.Fields
	if len(puraq.ctx.Fields) > 0 {
		_spec.Unique = puraq.ctx.Unique != nil && *puraq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, puraq.driver, _spec)
}

func (puraq *PlatformUserRoleAssignmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(platformuserroleassignment.Table, platformuserroleassignment.Columns, sqlgraph.NewFieldSpec(platformuserroleassignment.FieldID, field.TypeInt))
	_spec.From = puraq.sql
	if unique := puraq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if puraq.path != nil {
		_spec.Unique = true
	}
	if fields := puraq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, platformuserroleassignment.FieldID)
		for i := range fields {
			if fields[i] != platformuserroleassignment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := puraq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := puraq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := puraq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := puraq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (puraq *PlatformUserRoleAssignmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(puraq.driver.Dialect())
	t1 := builder.Table(platformuserroleassignment.Table)
	columns := puraq.ctx.Fields
	if len(columns) == 0 {
		columns = platformuserroleassignment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if puraq.sql != nil {
		selector = puraq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if puraq.ctx.Unique != nil && *puraq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range puraq.predicates {
		p(selector)
	}
	for _, p := range puraq.order {
		p(selector)
	}
	if offset := puraq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := puraq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PlatformUserRoleAssignmentGroupBy is the group-by builder for PlatformUserRoleAssignment entities.
type PlatformUserRoleAssignmentGroupBy struct {
	selector
	build *PlatformUserRoleAssignmentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (puragb *PlatformUserRoleAssignmentGroupBy) Aggregate(fns ...AggregateFunc) *PlatformUserRoleAssignmentGroupBy {
	puragb.fns = append(puragb.fns, fns...)
	return puragb
}

// Scan applies the selector query and scans the result into the given value.
func (puragb *PlatformUserRoleAssignmentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, puragb.build.ctx, ent.OpQueryGroupBy)
	if err := puragb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlatformUserRoleAssignmentQuery, *PlatformUserRoleAssignmentGroupBy](ctx, puragb.build, puragb, puragb.build.inters, v)
}

func (puragb *PlatformUserRoleAssignmentGroupBy) sqlScan(ctx context.Context, root *PlatformUserRoleAssignmentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(puragb.fns))
	for _, fn := range puragb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*puragb.flds)+len(puragb.fns))
		for _, f := range *puragb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*puragb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := puragb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PlatformUserRoleAssignmentSelect is the builder for selecting fields of PlatformUserRoleAssignment entities.
type PlatformUserRoleAssignmentSelect struct {
	*PlatformUserRoleAssignmentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (puras *PlatformUserRoleAssignmentSelect) Aggregate(fns ...AggregateFunc) *PlatformUserRoleAssignmentSelect {
	puras.fns = append(puras.fns, fns...)
	return puras
}

// Scan applies the selector query and scans the result into the given value.
func (puras *PlatformUserRoleAssignmentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, puras.ctx, ent.OpQuerySelect)
	if err := puras.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlatformUserRoleAssignmentQuery, *PlatformUserRoleAssignmentSelect](ctx, puras.PlatformUserRoleAssignmentQuery, puras, puras.inters, v)
}

func (puras *PlatformUserRoleAssignmentSelect) sqlScan(ctx context.Context, root *PlatformUserRoleAssignmentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(puras.fns))
	for _, fn := range puras.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*puras.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := puras.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
