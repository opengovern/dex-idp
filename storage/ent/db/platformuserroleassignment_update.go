// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dexidp/dex/storage/ent/db/platformapprole"
	"github.com/dexidp/dex/storage/ent/db/platformuser"
	"github.com/dexidp/dex/storage/ent/db/platformuserroleassignment"
	"github.com/dexidp/dex/storage/ent/db/predicate"
)

// PlatformUserRoleAssignmentUpdate is the builder for updating PlatformUserRoleAssignment entities.
type PlatformUserRoleAssignmentUpdate struct {
	config
	hooks    []Hook
	mutation *PlatformUserRoleAssignmentMutation
}

// Where appends a list predicates to the PlatformUserRoleAssignmentUpdate builder.
func (purau *PlatformUserRoleAssignmentUpdate) Where(ps ...predicate.PlatformUserRoleAssignment) *PlatformUserRoleAssignmentUpdate {
	purau.mutation.Where(ps...)
	return purau
}

// SetUpdateTime sets the "update_time" field.
func (purau *PlatformUserRoleAssignmentUpdate) SetUpdateTime(t time.Time) *PlatformUserRoleAssignmentUpdate {
	purau.mutation.SetUpdateTime(t)
	return purau
}

// SetIsActive sets the "is_active" field.
func (purau *PlatformUserRoleAssignmentUpdate) SetIsActive(b bool) *PlatformUserRoleAssignmentUpdate {
	purau.mutation.SetIsActive(b)
	return purau
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (purau *PlatformUserRoleAssignmentUpdate) SetNillableIsActive(b *bool) *PlatformUserRoleAssignmentUpdate {
	if b != nil {
		purau.SetIsActive(*b)
	}
	return purau
}

// SetUserID sets the "user" edge to the PlatformUser entity by ID.
func (purau *PlatformUserRoleAssignmentUpdate) SetUserID(id int) *PlatformUserRoleAssignmentUpdate {
	purau.mutation.SetUserID(id)
	return purau
}

// SetUser sets the "user" edge to the PlatformUser entity.
func (purau *PlatformUserRoleAssignmentUpdate) SetUser(p *PlatformUser) *PlatformUserRoleAssignmentUpdate {
	return purau.SetUserID(p.ID)
}

// SetRoleID sets the "role" edge to the PlatformAppRole entity by ID.
func (purau *PlatformUserRoleAssignmentUpdate) SetRoleID(id int) *PlatformUserRoleAssignmentUpdate {
	purau.mutation.SetRoleID(id)
	return purau
}

// SetRole sets the "role" edge to the PlatformAppRole entity.
func (purau *PlatformUserRoleAssignmentUpdate) SetRole(p *PlatformAppRole) *PlatformUserRoleAssignmentUpdate {
	return purau.SetRoleID(p.ID)
}

// Mutation returns the PlatformUserRoleAssignmentMutation object of the builder.
func (purau *PlatformUserRoleAssignmentUpdate) Mutation() *PlatformUserRoleAssignmentMutation {
	return purau.mutation
}

// ClearUser clears the "user" edge to the PlatformUser entity.
func (purau *PlatformUserRoleAssignmentUpdate) ClearUser() *PlatformUserRoleAssignmentUpdate {
	purau.mutation.ClearUser()
	return purau
}

// ClearRole clears the "role" edge to the PlatformAppRole entity.
func (purau *PlatformUserRoleAssignmentUpdate) ClearRole() *PlatformUserRoleAssignmentUpdate {
	purau.mutation.ClearRole()
	return purau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (purau *PlatformUserRoleAssignmentUpdate) Save(ctx context.Context) (int, error) {
	purau.defaults()
	return withHooks(ctx, purau.sqlSave, purau.mutation, purau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (purau *PlatformUserRoleAssignmentUpdate) SaveX(ctx context.Context) int {
	affected, err := purau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (purau *PlatformUserRoleAssignmentUpdate) Exec(ctx context.Context) error {
	_, err := purau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (purau *PlatformUserRoleAssignmentUpdate) ExecX(ctx context.Context) {
	if err := purau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (purau *PlatformUserRoleAssignmentUpdate) defaults() {
	if _, ok := purau.mutation.UpdateTime(); !ok {
		v := platformuserroleassignment.UpdateDefaultUpdateTime()
		purau.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (purau *PlatformUserRoleAssignmentUpdate) check() error {
	if purau.mutation.UserCleared() && len(purau.mutation.UserIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "PlatformUserRoleAssignment.user"`)
	}
	if purau.mutation.RoleCleared() && len(purau.mutation.RoleIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "PlatformUserRoleAssignment.role"`)
	}
	return nil
}

func (purau *PlatformUserRoleAssignmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := purau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(platformuserroleassignment.Table, platformuserroleassignment.Columns, sqlgraph.NewFieldSpec(platformuserroleassignment.FieldID, field.TypeInt))
	if ps := purau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := purau.mutation.UpdateTime(); ok {
		_spec.SetField(platformuserroleassignment.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := purau.mutation.IsActive(); ok {
		_spec.SetField(platformuserroleassignment.FieldIsActive, field.TypeBool, value)
	}
	if purau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformuserroleassignment.UserTable,
			Columns: []string{platformuserroleassignment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := purau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformuserroleassignment.UserTable,
			Columns: []string{platformuserroleassignment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if purau.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformuserroleassignment.RoleTable,
			Columns: []string{platformuserroleassignment.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformapprole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := purau.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformuserroleassignment.RoleTable,
			Columns: []string{platformuserroleassignment.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformapprole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, purau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platformuserroleassignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	purau.mutation.done = true
	return n, nil
}

// PlatformUserRoleAssignmentUpdateOne is the builder for updating a single PlatformUserRoleAssignment entity.
type PlatformUserRoleAssignmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlatformUserRoleAssignmentMutation
}

// SetUpdateTime sets the "update_time" field.
func (purauo *PlatformUserRoleAssignmentUpdateOne) SetUpdateTime(t time.Time) *PlatformUserRoleAssignmentUpdateOne {
	purauo.mutation.SetUpdateTime(t)
	return purauo
}

// SetIsActive sets the "is_active" field.
func (purauo *PlatformUserRoleAssignmentUpdateOne) SetIsActive(b bool) *PlatformUserRoleAssignmentUpdateOne {
	purauo.mutation.SetIsActive(b)
	return purauo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (purauo *PlatformUserRoleAssignmentUpdateOne) SetNillableIsActive(b *bool) *PlatformUserRoleAssignmentUpdateOne {
	if b != nil {
		purauo.SetIsActive(*b)
	}
	return purauo
}

// SetUserID sets the "user" edge to the PlatformUser entity by ID.
func (purauo *PlatformUserRoleAssignmentUpdateOne) SetUserID(id int) *PlatformUserRoleAssignmentUpdateOne {
	purauo.mutation.SetUserID(id)
	return purauo
}

// SetUser sets the "user" edge to the PlatformUser entity.
func (purauo *PlatformUserRoleAssignmentUpdateOne) SetUser(p *PlatformUser) *PlatformUserRoleAssignmentUpdateOne {
	return purauo.SetUserID(p.ID)
}

// SetRoleID sets the "role" edge to the PlatformAppRole entity by ID.
func (purauo *PlatformUserRoleAssignmentUpdateOne) SetRoleID(id int) *PlatformUserRoleAssignmentUpdateOne {
	purauo.mutation.SetRoleID(id)
	return purauo
}

// SetRole sets the "role" edge to the PlatformAppRole entity.
func (purauo *PlatformUserRoleAssignmentUpdateOne) SetRole(p *PlatformAppRole) *PlatformUserRoleAssignmentUpdateOne {
	return purauo.SetRoleID(p.ID)
}

// Mutation returns the PlatformUserRoleAssignmentMutation object of the builder.
func (purauo *PlatformUserRoleAssignmentUpdateOne) Mutation() *PlatformUserRoleAssignmentMutation {
	return purauo.mutation
}

// ClearUser clears the "user" edge to the PlatformUser entity.
func (purauo *PlatformUserRoleAssignmentUpdateOne) ClearUser() *PlatformUserRoleAssignmentUpdateOne {
	purauo.mutation.ClearUser()
	return purauo
}

// ClearRole clears the "role" edge to the PlatformAppRole entity.
func (purauo *PlatformUserRoleAssignmentUpdateOne) ClearRole() *PlatformUserRoleAssignmentUpdateOne {
	purauo.mutation.ClearRole()
	return purauo
}

// Where appends a list predicates to the PlatformUserRoleAssignmentUpdate builder.
func (purauo *PlatformUserRoleAssignmentUpdateOne) Where(ps ...predicate.PlatformUserRoleAssignment) *PlatformUserRoleAssignmentUpdateOne {
	purauo.mutation.Where(ps...)
	return purauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (purauo *PlatformUserRoleAssignmentUpdateOne) Select(field string, fields ...string) *PlatformUserRoleAssignmentUpdateOne {
	purauo.fields = append([]string{field}, fields...)
	return purauo
}

// Save executes the query and returns the updated PlatformUserRoleAssignment entity.
func (purauo *PlatformUserRoleAssignmentUpdateOne) Save(ctx context.Context) (*PlatformUserRoleAssignment, error) {
	purauo.defaults()
	return withHooks(ctx, purauo.sqlSave, purauo.mutation, purauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (purauo *PlatformUserRoleAssignmentUpdateOne) SaveX(ctx context.Context) *PlatformUserRoleAssignment {
	node, err := purauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (purauo *PlatformUserRoleAssignmentUpdateOne) Exec(ctx context.Context) error {
	_, err := purauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (purauo *PlatformUserRoleAssignmentUpdateOne) ExecX(ctx context.Context) {
	if err := purauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (purauo *PlatformUserRoleAssignmentUpdateOne) defaults() {
	if _, ok := purauo.mutation.UpdateTime(); !ok {
		v := platformuserroleassignment.UpdateDefaultUpdateTime()
		purauo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (purauo *PlatformUserRoleAssignmentUpdateOne) check() error {
	if purauo.mutation.UserCleared() && len(purauo.mutation.UserIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "PlatformUserRoleAssignment.user"`)
	}
	if purauo.mutation.RoleCleared() && len(purauo.mutation.RoleIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "PlatformUserRoleAssignment.role"`)
	}
	return nil
}

func (purauo *PlatformUserRoleAssignmentUpdateOne) sqlSave(ctx context.Context) (_node *PlatformUserRoleAssignment, err error) {
	if err := purauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(platformuserroleassignment.Table, platformuserroleassignment.Columns, sqlgraph.NewFieldSpec(platformuserroleassignment.FieldID, field.TypeInt))
	id, ok := purauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "PlatformUserRoleAssignment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := purauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, platformuserroleassignment.FieldID)
		for _, f := range fields {
			if !platformuserroleassignment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != platformuserroleassignment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := purauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := purauo.mutation.UpdateTime(); ok {
		_spec.SetField(platformuserroleassignment.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := purauo.mutation.IsActive(); ok {
		_spec.SetField(platformuserroleassignment.FieldIsActive, field.TypeBool, value)
	}
	if purauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformuserroleassignment.UserTable,
			Columns: []string{platformuserroleassignment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := purauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformuserroleassignment.UserTable,
			Columns: []string{platformuserroleassignment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if purauo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformuserroleassignment.RoleTable,
			Columns: []string{platformuserroleassignment.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformapprole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := purauo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformuserroleassignment.RoleTable,
			Columns: []string{platformuserroleassignment.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformapprole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlatformUserRoleAssignment{config: purauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, purauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platformuserroleassignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	purauo.mutation.done = true
	return _node, nil
}
