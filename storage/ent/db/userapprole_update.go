// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dexidp/dex/storage/ent/db/predicate"
	"github.com/dexidp/dex/storage/ent/db/userapprole"
)

// UserAppRoleUpdate is the builder for updating UserAppRole entities.
type UserAppRoleUpdate struct {
	config
	hooks    []Hook
	mutation *UserAppRoleMutation
}

// Where appends a list predicates to the UserAppRoleUpdate builder.
func (uaru *UserAppRoleUpdate) Where(ps ...predicate.UserAppRole) *UserAppRoleUpdate {
	uaru.mutation.Where(ps...)
	return uaru
}

// Mutation returns the UserAppRoleMutation object of the builder.
func (uaru *UserAppRoleUpdate) Mutation() *UserAppRoleMutation {
	return uaru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uaru *UserAppRoleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uaru.sqlSave, uaru.mutation, uaru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uaru *UserAppRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := uaru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uaru *UserAppRoleUpdate) Exec(ctx context.Context) error {
	_, err := uaru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uaru *UserAppRoleUpdate) ExecX(ctx context.Context) {
	if err := uaru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uaru *UserAppRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userapprole.Table, userapprole.Columns, sqlgraph.NewFieldSpec(userapprole.FieldID, field.TypeInt))
	if ps := uaru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uaru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userapprole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uaru.mutation.done = true
	return n, nil
}

// UserAppRoleUpdateOne is the builder for updating a single UserAppRole entity.
type UserAppRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserAppRoleMutation
}

// Mutation returns the UserAppRoleMutation object of the builder.
func (uaruo *UserAppRoleUpdateOne) Mutation() *UserAppRoleMutation {
	return uaruo.mutation
}

// Where appends a list predicates to the UserAppRoleUpdate builder.
func (uaruo *UserAppRoleUpdateOne) Where(ps ...predicate.UserAppRole) *UserAppRoleUpdateOne {
	uaruo.mutation.Where(ps...)
	return uaruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uaruo *UserAppRoleUpdateOne) Select(field string, fields ...string) *UserAppRoleUpdateOne {
	uaruo.fields = append([]string{field}, fields...)
	return uaruo
}

// Save executes the query and returns the updated UserAppRole entity.
func (uaruo *UserAppRoleUpdateOne) Save(ctx context.Context) (*UserAppRole, error) {
	return withHooks(ctx, uaruo.sqlSave, uaruo.mutation, uaruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uaruo *UserAppRoleUpdateOne) SaveX(ctx context.Context) *UserAppRole {
	node, err := uaruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uaruo *UserAppRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := uaruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uaruo *UserAppRoleUpdateOne) ExecX(ctx context.Context) {
	if err := uaruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uaruo *UserAppRoleUpdateOne) sqlSave(ctx context.Context) (_node *UserAppRole, err error) {
	_spec := sqlgraph.NewUpdateSpec(userapprole.Table, userapprole.Columns, sqlgraph.NewFieldSpec(userapprole.FieldID, field.TypeInt))
	id, ok := uaruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "UserAppRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uaruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userapprole.FieldID)
		for _, f := range fields {
			if !userapprole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != userapprole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uaruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &UserAppRole{config: uaruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uaruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userapprole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uaruo.mutation.done = true
	return _node, nil
}
